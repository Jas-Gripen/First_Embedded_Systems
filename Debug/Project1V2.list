
Project1V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073e8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007570  08007570  00017570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075b8  080075b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080075b8  080075b8  000175b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075c0  080075c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075c0  080075c0  000175c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075c4  080075c4  000175c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080075c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  2000000c  080075d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  080075d4  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f81d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037ce  00000000  00000000  0003f859  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019a0  00000000  00000000  00043028  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017b8  00000000  00000000  000449c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c449  00000000  00000000  00046180  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016f9e  00000000  00000000  000725c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010f45c  00000000  00000000  00089567  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001989c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006de4  00000000  00000000  00198a40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007558 	.word	0x08007558

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08007558 	.word	0x08007558

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__gedf2>:
 8000540:	f04f 3cff 	mov.w	ip, #4294967295
 8000544:	e006      	b.n	8000554 <__cmpdf2+0x4>
 8000546:	bf00      	nop

08000548 <__ledf2>:
 8000548:	f04f 0c01 	mov.w	ip, #1
 800054c:	e002      	b.n	8000554 <__cmpdf2+0x4>
 800054e:	bf00      	nop

08000550 <__cmpdf2>:
 8000550:	f04f 0c01 	mov.w	ip, #1
 8000554:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800055c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000564:	bf18      	it	ne
 8000566:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800056a:	d01b      	beq.n	80005a4 <__cmpdf2+0x54>
 800056c:	b001      	add	sp, #4
 800056e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000572:	bf0c      	ite	eq
 8000574:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000578:	ea91 0f03 	teqne	r1, r3
 800057c:	bf02      	ittt	eq
 800057e:	ea90 0f02 	teqeq	r0, r2
 8000582:	2000      	moveq	r0, #0
 8000584:	4770      	bxeq	lr
 8000586:	f110 0f00 	cmn.w	r0, #0
 800058a:	ea91 0f03 	teq	r1, r3
 800058e:	bf58      	it	pl
 8000590:	4299      	cmppl	r1, r3
 8000592:	bf08      	it	eq
 8000594:	4290      	cmpeq	r0, r2
 8000596:	bf2c      	ite	cs
 8000598:	17d8      	asrcs	r0, r3, #31
 800059a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800059e:	f040 0001 	orr.w	r0, r0, #1
 80005a2:	4770      	bx	lr
 80005a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005ac:	d102      	bne.n	80005b4 <__cmpdf2+0x64>
 80005ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005b2:	d107      	bne.n	80005c4 <__cmpdf2+0x74>
 80005b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d1d6      	bne.n	800056c <__cmpdf2+0x1c>
 80005be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005c2:	d0d3      	beq.n	800056c <__cmpdf2+0x1c>
 80005c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <__aeabi_cdrcmple>:
 80005cc:	4684      	mov	ip, r0
 80005ce:	4610      	mov	r0, r2
 80005d0:	4662      	mov	r2, ip
 80005d2:	468c      	mov	ip, r1
 80005d4:	4619      	mov	r1, r3
 80005d6:	4663      	mov	r3, ip
 80005d8:	e000      	b.n	80005dc <__aeabi_cdcmpeq>
 80005da:	bf00      	nop

080005dc <__aeabi_cdcmpeq>:
 80005dc:	b501      	push	{r0, lr}
 80005de:	f7ff ffb7 	bl	8000550 <__cmpdf2>
 80005e2:	2800      	cmp	r0, #0
 80005e4:	bf48      	it	mi
 80005e6:	f110 0f00 	cmnmi.w	r0, #0
 80005ea:	bd01      	pop	{r0, pc}

080005ec <__aeabi_dcmpeq>:
 80005ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f0:	f7ff fff4 	bl	80005dc <__aeabi_cdcmpeq>
 80005f4:	bf0c      	ite	eq
 80005f6:	2001      	moveq	r0, #1
 80005f8:	2000      	movne	r0, #0
 80005fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fe:	bf00      	nop

08000600 <__aeabi_dcmplt>:
 8000600:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000604:	f7ff ffea 	bl	80005dc <__aeabi_cdcmpeq>
 8000608:	bf34      	ite	cc
 800060a:	2001      	movcc	r0, #1
 800060c:	2000      	movcs	r0, #0
 800060e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000612:	bf00      	nop

08000614 <__aeabi_dcmple>:
 8000614:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000618:	f7ff ffe0 	bl	80005dc <__aeabi_cdcmpeq>
 800061c:	bf94      	ite	ls
 800061e:	2001      	movls	r0, #1
 8000620:	2000      	movhi	r0, #0
 8000622:	f85d fb08 	ldr.w	pc, [sp], #8
 8000626:	bf00      	nop

08000628 <__aeabi_dcmpge>:
 8000628:	f84d ed08 	str.w	lr, [sp, #-8]!
 800062c:	f7ff ffce 	bl	80005cc <__aeabi_cdrcmple>
 8000630:	bf94      	ite	ls
 8000632:	2001      	movls	r0, #1
 8000634:	2000      	movhi	r0, #0
 8000636:	f85d fb08 	ldr.w	pc, [sp], #8
 800063a:	bf00      	nop

0800063c <__aeabi_dcmpgt>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff ffc4 	bl	80005cc <__aeabi_cdrcmple>
 8000644:	bf34      	ite	cc
 8000646:	2001      	movcc	r0, #1
 8000648:	2000      	movcs	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <__aeabi_d2uiz>:
 8000650:	004a      	lsls	r2, r1, #1
 8000652:	d211      	bcs.n	8000678 <__aeabi_d2uiz+0x28>
 8000654:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000658:	d211      	bcs.n	800067e <__aeabi_d2uiz+0x2e>
 800065a:	d50d      	bpl.n	8000678 <__aeabi_d2uiz+0x28>
 800065c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000660:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000664:	d40e      	bmi.n	8000684 <__aeabi_d2uiz+0x34>
 8000666:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800066a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800066e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000672:	fa23 f002 	lsr.w	r0, r3, r2
 8000676:	4770      	bx	lr
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	4770      	bx	lr
 800067e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000682:	d102      	bne.n	800068a <__aeabi_d2uiz+0x3a>
 8000684:	f04f 30ff 	mov.w	r0, #4294967295
 8000688:	4770      	bx	lr
 800068a:	f04f 0000 	mov.w	r0, #0
 800068e:	4770      	bx	lr

08000690 <__aeabi_uldivmod>:
 8000690:	b953      	cbnz	r3, 80006a8 <__aeabi_uldivmod+0x18>
 8000692:	b94a      	cbnz	r2, 80006a8 <__aeabi_uldivmod+0x18>
 8000694:	2900      	cmp	r1, #0
 8000696:	bf08      	it	eq
 8000698:	2800      	cmpeq	r0, #0
 800069a:	bf1c      	itt	ne
 800069c:	f04f 31ff 	movne.w	r1, #4294967295
 80006a0:	f04f 30ff 	movne.w	r0, #4294967295
 80006a4:	f000 b972 	b.w	800098c <__aeabi_idiv0>
 80006a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80006ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b0:	f000 f806 	bl	80006c0 <__udivmoddi4>
 80006b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006bc:	b004      	add	sp, #16
 80006be:	4770      	bx	lr

080006c0 <__udivmoddi4>:
 80006c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006c4:	9e08      	ldr	r6, [sp, #32]
 80006c6:	4604      	mov	r4, r0
 80006c8:	4688      	mov	r8, r1
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d14b      	bne.n	8000766 <__udivmoddi4+0xa6>
 80006ce:	428a      	cmp	r2, r1
 80006d0:	4615      	mov	r5, r2
 80006d2:	d967      	bls.n	80007a4 <__udivmoddi4+0xe4>
 80006d4:	fab2 f282 	clz	r2, r2
 80006d8:	b14a      	cbz	r2, 80006ee <__udivmoddi4+0x2e>
 80006da:	f1c2 0720 	rsb	r7, r2, #32
 80006de:	fa01 f302 	lsl.w	r3, r1, r2
 80006e2:	fa20 f707 	lsr.w	r7, r0, r7
 80006e6:	4095      	lsls	r5, r2
 80006e8:	ea47 0803 	orr.w	r8, r7, r3
 80006ec:	4094      	lsls	r4, r2
 80006ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006f2:	0c23      	lsrs	r3, r4, #16
 80006f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80006f8:	fa1f fc85 	uxth.w	ip, r5
 80006fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000700:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000704:	fb07 f10c 	mul.w	r1, r7, ip
 8000708:	4299      	cmp	r1, r3
 800070a:	d909      	bls.n	8000720 <__udivmoddi4+0x60>
 800070c:	18eb      	adds	r3, r5, r3
 800070e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000712:	f080 811b 	bcs.w	800094c <__udivmoddi4+0x28c>
 8000716:	4299      	cmp	r1, r3
 8000718:	f240 8118 	bls.w	800094c <__udivmoddi4+0x28c>
 800071c:	3f02      	subs	r7, #2
 800071e:	442b      	add	r3, r5
 8000720:	1a5b      	subs	r3, r3, r1
 8000722:	b2a4      	uxth	r4, r4
 8000724:	fbb3 f0fe 	udiv	r0, r3, lr
 8000728:	fb0e 3310 	mls	r3, lr, r0, r3
 800072c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000730:	fb00 fc0c 	mul.w	ip, r0, ip
 8000734:	45a4      	cmp	ip, r4
 8000736:	d909      	bls.n	800074c <__udivmoddi4+0x8c>
 8000738:	192c      	adds	r4, r5, r4
 800073a:	f100 33ff 	add.w	r3, r0, #4294967295
 800073e:	f080 8107 	bcs.w	8000950 <__udivmoddi4+0x290>
 8000742:	45a4      	cmp	ip, r4
 8000744:	f240 8104 	bls.w	8000950 <__udivmoddi4+0x290>
 8000748:	3802      	subs	r0, #2
 800074a:	442c      	add	r4, r5
 800074c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000750:	eba4 040c 	sub.w	r4, r4, ip
 8000754:	2700      	movs	r7, #0
 8000756:	b11e      	cbz	r6, 8000760 <__udivmoddi4+0xa0>
 8000758:	40d4      	lsrs	r4, r2
 800075a:	2300      	movs	r3, #0
 800075c:	e9c6 4300 	strd	r4, r3, [r6]
 8000760:	4639      	mov	r1, r7
 8000762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000766:	428b      	cmp	r3, r1
 8000768:	d909      	bls.n	800077e <__udivmoddi4+0xbe>
 800076a:	2e00      	cmp	r6, #0
 800076c:	f000 80eb 	beq.w	8000946 <__udivmoddi4+0x286>
 8000770:	2700      	movs	r7, #0
 8000772:	e9c6 0100 	strd	r0, r1, [r6]
 8000776:	4638      	mov	r0, r7
 8000778:	4639      	mov	r1, r7
 800077a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800077e:	fab3 f783 	clz	r7, r3
 8000782:	2f00      	cmp	r7, #0
 8000784:	d147      	bne.n	8000816 <__udivmoddi4+0x156>
 8000786:	428b      	cmp	r3, r1
 8000788:	d302      	bcc.n	8000790 <__udivmoddi4+0xd0>
 800078a:	4282      	cmp	r2, r0
 800078c:	f200 80fa 	bhi.w	8000984 <__udivmoddi4+0x2c4>
 8000790:	1a84      	subs	r4, r0, r2
 8000792:	eb61 0303 	sbc.w	r3, r1, r3
 8000796:	2001      	movs	r0, #1
 8000798:	4698      	mov	r8, r3
 800079a:	2e00      	cmp	r6, #0
 800079c:	d0e0      	beq.n	8000760 <__udivmoddi4+0xa0>
 800079e:	e9c6 4800 	strd	r4, r8, [r6]
 80007a2:	e7dd      	b.n	8000760 <__udivmoddi4+0xa0>
 80007a4:	b902      	cbnz	r2, 80007a8 <__udivmoddi4+0xe8>
 80007a6:	deff      	udf	#255	; 0xff
 80007a8:	fab2 f282 	clz	r2, r2
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	f040 808f 	bne.w	80008d0 <__udivmoddi4+0x210>
 80007b2:	1b49      	subs	r1, r1, r5
 80007b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007b8:	fa1f f885 	uxth.w	r8, r5
 80007bc:	2701      	movs	r7, #1
 80007be:	fbb1 fcfe 	udiv	ip, r1, lr
 80007c2:	0c23      	lsrs	r3, r4, #16
 80007c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80007c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007cc:	fb08 f10c 	mul.w	r1, r8, ip
 80007d0:	4299      	cmp	r1, r3
 80007d2:	d907      	bls.n	80007e4 <__udivmoddi4+0x124>
 80007d4:	18eb      	adds	r3, r5, r3
 80007d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007da:	d202      	bcs.n	80007e2 <__udivmoddi4+0x122>
 80007dc:	4299      	cmp	r1, r3
 80007de:	f200 80cd 	bhi.w	800097c <__udivmoddi4+0x2bc>
 80007e2:	4684      	mov	ip, r0
 80007e4:	1a59      	subs	r1, r3, r1
 80007e6:	b2a3      	uxth	r3, r4
 80007e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80007ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80007f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007f4:	fb08 f800 	mul.w	r8, r8, r0
 80007f8:	45a0      	cmp	r8, r4
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0x14c>
 80007fc:	192c      	adds	r4, r5, r4
 80007fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0x14a>
 8000804:	45a0      	cmp	r8, r4
 8000806:	f200 80b6 	bhi.w	8000976 <__udivmoddi4+0x2b6>
 800080a:	4618      	mov	r0, r3
 800080c:	eba4 0408 	sub.w	r4, r4, r8
 8000810:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000814:	e79f      	b.n	8000756 <__udivmoddi4+0x96>
 8000816:	f1c7 0c20 	rsb	ip, r7, #32
 800081a:	40bb      	lsls	r3, r7
 800081c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000820:	ea4e 0e03 	orr.w	lr, lr, r3
 8000824:	fa01 f407 	lsl.w	r4, r1, r7
 8000828:	fa20 f50c 	lsr.w	r5, r0, ip
 800082c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000830:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000834:	4325      	orrs	r5, r4
 8000836:	fbb3 f9f8 	udiv	r9, r3, r8
 800083a:	0c2c      	lsrs	r4, r5, #16
 800083c:	fb08 3319 	mls	r3, r8, r9, r3
 8000840:	fa1f fa8e 	uxth.w	sl, lr
 8000844:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000848:	fb09 f40a 	mul.w	r4, r9, sl
 800084c:	429c      	cmp	r4, r3
 800084e:	fa02 f207 	lsl.w	r2, r2, r7
 8000852:	fa00 f107 	lsl.w	r1, r0, r7
 8000856:	d90b      	bls.n	8000870 <__udivmoddi4+0x1b0>
 8000858:	eb1e 0303 	adds.w	r3, lr, r3
 800085c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000860:	f080 8087 	bcs.w	8000972 <__udivmoddi4+0x2b2>
 8000864:	429c      	cmp	r4, r3
 8000866:	f240 8084 	bls.w	8000972 <__udivmoddi4+0x2b2>
 800086a:	f1a9 0902 	sub.w	r9, r9, #2
 800086e:	4473      	add	r3, lr
 8000870:	1b1b      	subs	r3, r3, r4
 8000872:	b2ad      	uxth	r5, r5
 8000874:	fbb3 f0f8 	udiv	r0, r3, r8
 8000878:	fb08 3310 	mls	r3, r8, r0, r3
 800087c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000880:	fb00 fa0a 	mul.w	sl, r0, sl
 8000884:	45a2      	cmp	sl, r4
 8000886:	d908      	bls.n	800089a <__udivmoddi4+0x1da>
 8000888:	eb1e 0404 	adds.w	r4, lr, r4
 800088c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000890:	d26b      	bcs.n	800096a <__udivmoddi4+0x2aa>
 8000892:	45a2      	cmp	sl, r4
 8000894:	d969      	bls.n	800096a <__udivmoddi4+0x2aa>
 8000896:	3802      	subs	r0, #2
 8000898:	4474      	add	r4, lr
 800089a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800089e:	fba0 8902 	umull	r8, r9, r0, r2
 80008a2:	eba4 040a 	sub.w	r4, r4, sl
 80008a6:	454c      	cmp	r4, r9
 80008a8:	46c2      	mov	sl, r8
 80008aa:	464b      	mov	r3, r9
 80008ac:	d354      	bcc.n	8000958 <__udivmoddi4+0x298>
 80008ae:	d051      	beq.n	8000954 <__udivmoddi4+0x294>
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d069      	beq.n	8000988 <__udivmoddi4+0x2c8>
 80008b4:	ebb1 050a 	subs.w	r5, r1, sl
 80008b8:	eb64 0403 	sbc.w	r4, r4, r3
 80008bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80008c0:	40fd      	lsrs	r5, r7
 80008c2:	40fc      	lsrs	r4, r7
 80008c4:	ea4c 0505 	orr.w	r5, ip, r5
 80008c8:	e9c6 5400 	strd	r5, r4, [r6]
 80008cc:	2700      	movs	r7, #0
 80008ce:	e747      	b.n	8000760 <__udivmoddi4+0xa0>
 80008d0:	f1c2 0320 	rsb	r3, r2, #32
 80008d4:	fa20 f703 	lsr.w	r7, r0, r3
 80008d8:	4095      	lsls	r5, r2
 80008da:	fa01 f002 	lsl.w	r0, r1, r2
 80008de:	fa21 f303 	lsr.w	r3, r1, r3
 80008e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008e6:	4338      	orrs	r0, r7
 80008e8:	0c01      	lsrs	r1, r0, #16
 80008ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80008ee:	fa1f f885 	uxth.w	r8, r5
 80008f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80008f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008fa:	fb07 f308 	mul.w	r3, r7, r8
 80008fe:	428b      	cmp	r3, r1
 8000900:	fa04 f402 	lsl.w	r4, r4, r2
 8000904:	d907      	bls.n	8000916 <__udivmoddi4+0x256>
 8000906:	1869      	adds	r1, r5, r1
 8000908:	f107 3cff 	add.w	ip, r7, #4294967295
 800090c:	d22f      	bcs.n	800096e <__udivmoddi4+0x2ae>
 800090e:	428b      	cmp	r3, r1
 8000910:	d92d      	bls.n	800096e <__udivmoddi4+0x2ae>
 8000912:	3f02      	subs	r7, #2
 8000914:	4429      	add	r1, r5
 8000916:	1acb      	subs	r3, r1, r3
 8000918:	b281      	uxth	r1, r0
 800091a:	fbb3 f0fe 	udiv	r0, r3, lr
 800091e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000922:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000926:	fb00 f308 	mul.w	r3, r0, r8
 800092a:	428b      	cmp	r3, r1
 800092c:	d907      	bls.n	800093e <__udivmoddi4+0x27e>
 800092e:	1869      	adds	r1, r5, r1
 8000930:	f100 3cff 	add.w	ip, r0, #4294967295
 8000934:	d217      	bcs.n	8000966 <__udivmoddi4+0x2a6>
 8000936:	428b      	cmp	r3, r1
 8000938:	d915      	bls.n	8000966 <__udivmoddi4+0x2a6>
 800093a:	3802      	subs	r0, #2
 800093c:	4429      	add	r1, r5
 800093e:	1ac9      	subs	r1, r1, r3
 8000940:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000944:	e73b      	b.n	80007be <__udivmoddi4+0xfe>
 8000946:	4637      	mov	r7, r6
 8000948:	4630      	mov	r0, r6
 800094a:	e709      	b.n	8000760 <__udivmoddi4+0xa0>
 800094c:	4607      	mov	r7, r0
 800094e:	e6e7      	b.n	8000720 <__udivmoddi4+0x60>
 8000950:	4618      	mov	r0, r3
 8000952:	e6fb      	b.n	800074c <__udivmoddi4+0x8c>
 8000954:	4541      	cmp	r1, r8
 8000956:	d2ab      	bcs.n	80008b0 <__udivmoddi4+0x1f0>
 8000958:	ebb8 0a02 	subs.w	sl, r8, r2
 800095c:	eb69 020e 	sbc.w	r2, r9, lr
 8000960:	3801      	subs	r0, #1
 8000962:	4613      	mov	r3, r2
 8000964:	e7a4      	b.n	80008b0 <__udivmoddi4+0x1f0>
 8000966:	4660      	mov	r0, ip
 8000968:	e7e9      	b.n	800093e <__udivmoddi4+0x27e>
 800096a:	4618      	mov	r0, r3
 800096c:	e795      	b.n	800089a <__udivmoddi4+0x1da>
 800096e:	4667      	mov	r7, ip
 8000970:	e7d1      	b.n	8000916 <__udivmoddi4+0x256>
 8000972:	4681      	mov	r9, r0
 8000974:	e77c      	b.n	8000870 <__udivmoddi4+0x1b0>
 8000976:	3802      	subs	r0, #2
 8000978:	442c      	add	r4, r5
 800097a:	e747      	b.n	800080c <__udivmoddi4+0x14c>
 800097c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000980:	442b      	add	r3, r5
 8000982:	e72f      	b.n	80007e4 <__udivmoddi4+0x124>
 8000984:	4638      	mov	r0, r7
 8000986:	e708      	b.n	800079a <__udivmoddi4+0xda>
 8000988:	4637      	mov	r7, r6
 800098a:	e6e9      	b.n	8000760 <__udivmoddi4+0xa0>

0800098c <__aeabi_idiv0>:
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop

08000990 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
 80009b0:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80009b2:	4b2f      	ldr	r3, [pc, #188]	; (8000a70 <MX_ADC1_Init+0xe0>)
 80009b4:	4a2f      	ldr	r2, [pc, #188]	; (8000a74 <MX_ADC1_Init+0xe4>)
 80009b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009b8:	4b2d      	ldr	r3, [pc, #180]	; (8000a70 <MX_ADC1_Init+0xe0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009be:	4b2c      	ldr	r3, [pc, #176]	; (8000a70 <MX_ADC1_Init+0xe0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009c4:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <MX_ADC1_Init+0xe0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ca:	4b29      	ldr	r3, [pc, #164]	; (8000a70 <MX_ADC1_Init+0xe0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009d0:	4b27      	ldr	r3, [pc, #156]	; (8000a70 <MX_ADC1_Init+0xe0>)
 80009d2:	2204      	movs	r2, #4
 80009d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009d6:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <MX_ADC1_Init+0xe0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009dc:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <MX_ADC1_Init+0xe0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80009e2:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <MX_ADC1_Init+0xe0>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009e8:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <MX_ADC1_Init+0xe0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009f0:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <MX_ADC1_Init+0xe0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009f6:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <MX_ADC1_Init+0xe0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009fc:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <MX_ADC1_Init+0xe0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a04:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_ADC1_Init+0xe0>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <MX_ADC1_Init+0xe0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a12:	4817      	ldr	r0, [pc, #92]	; (8000a70 <MX_ADC1_Init+0xe0>)
 8000a14:	f001 fbc6 	bl	80021a4 <HAL_ADC_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000a1e:	f000 fb73 	bl	8001108 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4810      	ldr	r0, [pc, #64]	; (8000a70 <MX_ADC1_Init+0xe0>)
 8000a2e:	f002 fa89 	bl	8002f44 <HAL_ADCEx_MultiModeConfigChannel>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a38:	f000 fb66 	bl	8001108 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_ADC1_Init+0xe8>)
 8000a3e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a40:	2306      	movs	r3, #6
 8000a42:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a48:	237f      	movs	r3, #127	; 0x7f
 8000a4a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_ADC1_Init+0xe0>)
 8000a5a:	f001 fe8f 	bl	800277c <HAL_ADC_ConfigChannel>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000a64:	f000 fb50 	bl	8001108 <Error_Handler>
  }

}
 8000a68:	bf00      	nop
 8000a6a:	3728      	adds	r7, #40	; 0x28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000044 	.word	0x20000044
 8000a74:	50040000 	.word	0x50040000
 8000a78:	43210000 	.word	0x43210000

08000a7c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a15      	ldr	r2, [pc, #84]	; (8000af0 <HAL_ADC_MspInit+0x74>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d123      	bne.n	8000ae6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_ADC_MspInit+0x78>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <HAL_ADC_MspInit+0x78>)
 8000aa4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_ADC_MspInit+0x78>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <HAL_ADC_MspInit+0x78>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <HAL_ADC_MspInit+0x78>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_ADC_MspInit+0x78>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB1     ------> ADC1_IN16 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ad2:	230b      	movs	r3, #11
 8000ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <HAL_ADC_MspInit+0x7c>)
 8000ae2:	f002 fbc1 	bl	8003268 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	3728      	adds	r7, #40	; 0x28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	50040000 	.word	0x50040000
 8000af4:	40021000 	.word	0x40021000
 8000af8:	48000400 	.word	0x48000400

08000afc <SPI_send_display>:
 * and send 3 bytes over SPI to the display
 * @param uint8_t rs, uint8_t rw, uint8_t data
@author  Daniel Gripenstedt
@return void */
void SPI_send_display (uint8_t rs, uint8_t rw, uint8_t data)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
 8000b06:	460b      	mov	r3, r1
 8000b08:	71bb      	strb	r3, [r7, #6]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	717b      	strb	r3, [r7, #5]
	uint8_t dataBytes[3];	//3 bytes to transmit over SPI
	uint8_t startData = 0x00;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	73bb      	strb	r3, [r7, #14]
	uint8_t startByte = 0x1F;
 8000b12:	231f      	movs	r3, #31
 8000b14:	73fb      	strb	r3, [r7, #15]
	uint8_t firstByte = 0x0F;
 8000b16:	230f      	movs	r3, #15
 8000b18:	737b      	strb	r3, [r7, #13]
	uint8_t secondByte = 0x0F;
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	733b      	strb	r3, [r7, #12]
	uint8_t data_byte = 0x00;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	72fb      	strb	r3, [r7, #11]

	if(rw == 1)
 8000b22:	79bb      	ldrb	r3, [r7, #6]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d103      	bne.n	8000b30 <SPI_send_display+0x34>
	{
		startByte = startByte | 0x20;	//set rw bit to 1
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
 8000b2a:	f043 0320 	orr.w	r3, r3, #32
 8000b2e:	73fb      	strb	r3, [r7, #15]
	}

	if(rs == 1)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d103      	bne.n	8000b3e <SPI_send_display+0x42>
	{
		startByte = startByte | 0x40;	//set rs bit to 1
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b3c:	73fb      	strb	r3, [r7, #15]
	}

	data_byte = (data_byte | data);	//save the data in a varible
 8000b3e:	7afa      	ldrb	r2, [r7, #11]
 8000b40:	797b      	ldrb	r3, [r7, #5]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	72fb      	strb	r3, [r7, #11]

	firstByte = 0x0F & data_byte;	//mask the first byte
 8000b46:	7afb      	ldrb	r3, [r7, #11]
 8000b48:	f003 030f 	and.w	r3, r3, #15
 8000b4c:	737b      	strb	r3, [r7, #13]

	data_byte = (data & 0xF0); // Mask last 4 bits
 8000b4e:	797b      	ldrb	r3, [r7, #5]
 8000b50:	f023 030f 	bic.w	r3, r3, #15
 8000b54:	72fb      	strb	r3, [r7, #11]
	secondByte = 0x0F & (data_byte >> 4);	//shift and store in second byte
 8000b56:	7afb      	ldrb	r3, [r7, #11]
 8000b58:	091b      	lsrs	r3, r3, #4
 8000b5a:	733b      	strb	r3, [r7, #12]

	dataBytes[0] = startByte;
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	723b      	strb	r3, [r7, #8]
	dataBytes[1] = firstByte;
 8000b60:	7b7b      	ldrb	r3, [r7, #13]
 8000b62:	727b      	strb	r3, [r7, #9]
	dataBytes[2] = secondByte;
 8000b64:	7b3b      	ldrb	r3, [r7, #12]
 8000b66:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(Disp_CS_GPIO_Port, Disp_CS_Pin, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b6e:	480a      	ldr	r0, [pc, #40]	; (8000b98 <SPI_send_display+0x9c>)
 8000b70:	f002 fd22 	bl	80035b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, dataBytes, 3, 50);
 8000b74:	f107 0108 	add.w	r1, r7, #8
 8000b78:	2332      	movs	r3, #50	; 0x32
 8000b7a:	2203      	movs	r2, #3
 8000b7c:	4807      	ldr	r0, [pc, #28]	; (8000b9c <SPI_send_display+0xa0>)
 8000b7e:	f004 fd0e 	bl	800559e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(Disp_CS_GPIO_Port, Disp_CS_Pin, GPIO_PIN_SET);
 8000b82:	2201      	movs	r2, #1
 8000b84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b88:	4803      	ldr	r0, [pc, #12]	; (8000b98 <SPI_send_display+0x9c>)
 8000b8a:	f002 fd15 	bl	80035b8 <HAL_GPIO_WritePin>
}/* End of function SPI_send_display */
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	48000400 	.word	0x48000400
 8000b9c:	20000118 	.word	0x20000118

08000ba0 <Init_display>:
 * the display can't print any characters without this.
 * However, the backlight will work without this function.
@author  Daniel Gripenstedt
@return void */
void Init_display(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	HAL_Delay(10);
 8000ba4:	200a      	movs	r0, #10
 8000ba6:	f001 f905 	bl	8001db4 <HAL_Delay>
	HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 8000baa:	2201      	movs	r2, #1
 8000bac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb4:	f002 fd00 	bl	80035b8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000bb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bbc:	f001 f8fa 	bl	8001db4 <HAL_Delay>
	HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bca:	f002 fcf5 	bl	80035b8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000bce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bd2:	f001 f8ef 	bl	8001db4 <HAL_Delay>
	HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be0:	f002 fcea 	bl	80035b8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000be4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000be8:	f001 f8e4 	bl	8001db4 <HAL_Delay>

	/*Commands that will initialize the display*/
	SPI_send_display (0x00, 0x00, 0x3A);
 8000bec:	223a      	movs	r2, #58	; 0x3a
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f7ff ff83 	bl	8000afc <SPI_send_display>
	SPI_send_display (0x00, 0x00, 0x09);
 8000bf6:	2209      	movs	r2, #9
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f7ff ff7e 	bl	8000afc <SPI_send_display>
	SPI_send_display (0x00, 0x00, 0x06);
 8000c00:	2206      	movs	r2, #6
 8000c02:	2100      	movs	r1, #0
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff ff79 	bl	8000afc <SPI_send_display>
	SPI_send_display (0x00, 0x00, 0x1E);
 8000c0a:	221e      	movs	r2, #30
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f7ff ff74 	bl	8000afc <SPI_send_display>
	SPI_send_display (0x00, 0x00, 0x39);
 8000c14:	2239      	movs	r2, #57	; 0x39
 8000c16:	2100      	movs	r1, #0
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff ff6f 	bl	8000afc <SPI_send_display>
	SPI_send_display (0x00, 0x00, 0x1B);
 8000c1e:	221b      	movs	r2, #27
 8000c20:	2100      	movs	r1, #0
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff ff6a 	bl	8000afc <SPI_send_display>
	SPI_send_display (0x00, 0x00, 0x6E);
 8000c28:	226e      	movs	r2, #110	; 0x6e
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff ff65 	bl	8000afc <SPI_send_display>
	SPI_send_display (0x00, 0x00, 0x56);
 8000c32:	2256      	movs	r2, #86	; 0x56
 8000c34:	2100      	movs	r1, #0
 8000c36:	2000      	movs	r0, #0
 8000c38:	f7ff ff60 	bl	8000afc <SPI_send_display>
	SPI_send_display (0x00, 0x00, 0x7A);
 8000c3c:	227a      	movs	r2, #122	; 0x7a
 8000c3e:	2100      	movs	r1, #0
 8000c40:	2000      	movs	r0, #0
 8000c42:	f7ff ff5b 	bl	8000afc <SPI_send_display>
	SPI_send_display (0x00, 0x00, 0x38);
 8000c46:	2238      	movs	r2, #56	; 0x38
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff ff56 	bl	8000afc <SPI_send_display>
	SPI_send_display (0x00, 0x00, 0x0C);
 8000c50:	220c      	movs	r2, #12
 8000c52:	2100      	movs	r1, #0
 8000c54:	2000      	movs	r0, #0
 8000c56:	f7ff ff51 	bl	8000afc <SPI_send_display>
	SPI_send_display (0x00, 0x00, 0x01);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff ff4c 	bl	8000afc <SPI_send_display>

	HAL_Delay(1000);
 8000c64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c68:	f001 f8a4 	bl	8001db4 <HAL_Delay>
}/*End of function Init_display*/
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <Write_display>:
 * has the code "data" on the display.
 *	@param uint8_t data
@author  Daniel Gripenstedt
@return void */
void Write_display(uint8_t data)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
	SPI_send_display(0x01, 0x00, data);
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2001      	movs	r0, #1
 8000c82:	f7ff ff3b 	bl	8000afc <SPI_send_display>
}/*End of function Write_display*/
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <Dim_display>:
 * depending on the value from ADC1_In16 which is determined by the
 * potentiometer.
@author  Daniel Gripenstedt
@return void */
void Dim_display(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
	//uint16_t adc_value;
	uint16_t dim_value;
	HAL_ADC_Start(&hadc1);	//start adc
 8000c96:	4816      	ldr	r0, [pc, #88]	; (8000cf0 <Dim_display+0x60>)
 8000c98:	f001 fbd8 	bl	800244c <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc1, 2000) != HAL_OK);	//wait until adc value is red
 8000c9c:	bf00      	nop
 8000c9e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000ca2:	4813      	ldr	r0, [pc, #76]	; (8000cf0 <Dim_display+0x60>)
 8000ca4:	f001 fc8c 	bl	80025c0 <HAL_ADC_PollForConversion>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1f7      	bne.n	8000c9e <Dim_display+0xe>

		dim_value = HAL_ADC_GetValue(&hadc1);	//store adc value in adc_value
 8000cae:	4810      	ldr	r0, [pc, #64]	; (8000cf0 <Dim_display+0x60>)
 8000cb0:	f001 fd56 	bl	8002760 <HAL_ADC_GetValue>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	80fb      	strh	r3, [r7, #6]
		if (dim_value < 40)	//to prevent negative values
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	2b27      	cmp	r3, #39	; 0x27
 8000cbc:	d802      	bhi.n	8000cc4 <Dim_display+0x34>
		{
			dim_value = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	80fb      	strh	r3, [r7, #6]
 8000cc2:	e00c      	b.n	8000cde <Dim_display+0x4e>
		}

		else
		{
			dim_value = ((dim_value / 40) - 1);	//store value between 0-99 in dim_value
 8000cc4:	88fb      	ldrh	r3, [r7, #6]
 8000cc6:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <Dim_display+0x64>)
 8000cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ccc:	095b      	lsrs	r3, r3, #5
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	80fb      	strh	r3, [r7, #6]

			if (dim_value > 99)
 8000cd4:	88fb      	ldrh	r3, [r7, #6]
 8000cd6:	2b63      	cmp	r3, #99	; 0x63
 8000cd8:	d901      	bls.n	8000cde <Dim_display+0x4e>
					{
						dim_value = 99;
 8000cda:	2363      	movs	r3, #99	; 0x63
 8000cdc:	80fb      	strh	r3, [r7, #6]
					}
		}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, dim_value);	//change the duty cycle
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <Dim_display+0x68>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	88fa      	ldrh	r2, [r7, #6]
 8000ce4:	639a      	str	r2, [r3, #56]	; 0x38
}/*End of function Dim_display*/
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000044 	.word	0x20000044
 8000cf4:	cccccccd 	.word	0xcccccccd
 8000cf8:	2000017c 	.word	0x2000017c

08000cfc <MX_GPIO_Init>:
        * EXTI
     PA0   ------> UART4_TX
     PA1   ------> UART4_RX
*/
void MX_GPIO_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d12:	4b56      	ldr	r3, [pc, #344]	; (8000e6c <MX_GPIO_Init+0x170>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	4a55      	ldr	r2, [pc, #340]	; (8000e6c <MX_GPIO_Init+0x170>)
 8000d18:	f043 0304 	orr.w	r3, r3, #4
 8000d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1e:	4b53      	ldr	r3, [pc, #332]	; (8000e6c <MX_GPIO_Init+0x170>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	f003 0304 	and.w	r3, r3, #4
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d2a:	4b50      	ldr	r3, [pc, #320]	; (8000e6c <MX_GPIO_Init+0x170>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	4a4f      	ldr	r2, [pc, #316]	; (8000e6c <MX_GPIO_Init+0x170>)
 8000d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d36:	4b4d      	ldr	r3, [pc, #308]	; (8000e6c <MX_GPIO_Init+0x170>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	4b4a      	ldr	r3, [pc, #296]	; (8000e6c <MX_GPIO_Init+0x170>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	4a49      	ldr	r2, [pc, #292]	; (8000e6c <MX_GPIO_Init+0x170>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4e:	4b47      	ldr	r3, [pc, #284]	; (8000e6c <MX_GPIO_Init+0x170>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	4b44      	ldr	r3, [pc, #272]	; (8000e6c <MX_GPIO_Init+0x170>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5e:	4a43      	ldr	r2, [pc, #268]	; (8000e6c <MX_GPIO_Init+0x170>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d66:	4b41      	ldr	r3, [pc, #260]	; (8000e6c <MX_GPIO_Init+0x170>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d72:	4b3e      	ldr	r3, [pc, #248]	; (8000e6c <MX_GPIO_Init+0x170>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	4a3d      	ldr	r2, [pc, #244]	; (8000e6c <MX_GPIO_Init+0x170>)
 8000d78:	f043 0308 	orr.w	r3, r3, #8
 8000d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7e:	4b3b      	ldr	r3, [pc, #236]	; (8000e6c <MX_GPIO_Init+0x170>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	f003 0308 	and.w	r3, r3, #8
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Disp_Reset_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f248 0120 	movw	r1, #32800	; 0x8020
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d94:	f002 fc10 	bl	80035b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Disp_CS_GPIO_Port, Disp_CS_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d9e:	4834      	ldr	r0, [pc, #208]	; (8000e70 <MX_GPIO_Init+0x174>)
 8000da0:	f002 fc0a 	bl	80035b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Disp_Green_Pin|Disp_White_Pin, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000daa:	4832      	ldr	r0, [pc, #200]	; (8000e74 <MX_GPIO_Init+0x178>)
 8000dac:	f002 fc04 	bl	80035b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000db0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000db6:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <MX_GPIO_Init+0x17c>)
 8000db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	482b      	ldr	r0, [pc, #172]	; (8000e74 <MX_GPIO_Init+0x178>)
 8000dc6:	f002 fa4f 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000dda:	2308      	movs	r3, #8
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de8:	f002 fa3e 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Disp_Reset_Pin;
 8000dec:	f248 0320 	movw	r3, #32800	; 0x8020
 8000df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e08:	f002 fa2e 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HTS221_DRDY_Pin;
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HTS221_DRDY_GPIO_Port, &GPIO_InitStruct);
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e22:	f002 fa21 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Disp_CS_Pin;
 8000e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Disp_CS_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	480c      	ldr	r0, [pc, #48]	; (8000e70 <MX_GPIO_Init+0x174>)
 8000e40:	f002 fa12 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Disp_Green_Pin|Disp_White_Pin;
 8000e44:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_GPIO_Init+0x178>)
 8000e5e:	f002 fa03 	bl	8003268 <HAL_GPIO_Init>

}
 8000e62:	bf00      	nop
 8000e64:	3728      	adds	r7, #40	; 0x28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	48000400 	.word	0x48000400
 8000e74:	48000800 	.word	0x48000800
 8000e78:	10210000 	.word	0x10210000

08000e7c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000e80:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <MX_I2C3_Init+0x74>)
 8000e82:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <MX_I2C3_Init+0x78>)
 8000e84:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8000e86:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <MX_I2C3_Init+0x74>)
 8000e88:	4a1b      	ldr	r2, [pc, #108]	; (8000ef8 <MX_I2C3_Init+0x7c>)
 8000e8a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <MX_I2C3_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <MX_I2C3_Init+0x74>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <MX_I2C3_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <MX_I2C3_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <MX_I2C3_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <MX_I2C3_Init+0x74>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MX_I2C3_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000eb6:	480e      	ldr	r0, [pc, #56]	; (8000ef0 <MX_I2C3_Init+0x74>)
 8000eb8:	f002 fb96 	bl	80035e8 <HAL_I2C_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000ec2:	f000 f921 	bl	8001108 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4809      	ldr	r0, [pc, #36]	; (8000ef0 <MX_I2C3_Init+0x74>)
 8000eca:	f002 fc1c 	bl	8003706 <HAL_I2CEx_ConfigAnalogFilter>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000ed4:	f000 f918 	bl	8001108 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_I2C3_Init+0x74>)
 8000edc:	f002 fc5e 	bl	800379c <HAL_I2CEx_ConfigDigitalFilter>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000ee6:	f000 f90f 	bl	8001108 <Error_Handler>
  }

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200000a8 	.word	0x200000a8
 8000ef4:	40005c00 	.word	0x40005c00
 8000ef8:	10909cec 	.word	0x10909cec

08000efc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a17      	ldr	r2, [pc, #92]	; (8000f78 <HAL_I2C_MspInit+0x7c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d127      	bne.n	8000f6e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <HAL_I2C_MspInit+0x80>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	4a16      	ldr	r2, [pc, #88]	; (8000f7c <HAL_I2C_MspInit+0x80>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <HAL_I2C_MspInit+0x80>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration    
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f36:	2303      	movs	r3, #3
 8000f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f3a:	2312      	movs	r3, #18
 8000f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f46:	2304      	movs	r3, #4
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480b      	ldr	r0, [pc, #44]	; (8000f80 <HAL_I2C_MspInit+0x84>)
 8000f52:	f002 f989 	bl	8003268 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_I2C_MspInit+0x80>)
 8000f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5a:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <HAL_I2C_MspInit+0x80>)
 8000f5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f60:	6593      	str	r3, [r2, #88]	; 0x58
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_I2C_MspInit+0x80>)
 8000f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000f6e:	bf00      	nop
 8000f70:	3728      	adds	r7, #40	; 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40005c00 	.word	0x40005c00
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	48000800 	.word	0x48000800

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f88:	f000 fe9c 	bl	8001cc4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8c:	f000 f828 	bl	8000fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f90:	f7ff feb4 	bl	8000cfc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f94:	f7ff fcfc 	bl	8000990 <MX_ADC1_Init>
  MX_RTC_Init();
 8000f98:	f000 f8e8 	bl	800116c <MX_RTC_Init>
  MX_SPI2_Init();
 8000f9c:	f000 f98c 	bl	80012b8 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000fa0:	f000 fab2 	bl	8001508 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000fa4:	f000 fda0 	bl	8001ae8 <MX_USART2_UART_Init>
  MX_UART5_Init();
 8000fa8:	f000 fd6e 	bl	8001a88 <MX_UART5_Init>
  MX_I2C3_Init();
 8000fac:	f7ff ff66 	bl	8000e7c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(Disp_CS_GPIO_Port, Disp_CS_Pin, GPIO_PIN_SET); //set cs high
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb6:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <main+0x54>)
 8000fb8:	f002 fafe 	bl	80035b8 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000fbc:	2032      	movs	r0, #50	; 0x32
 8000fbe:	f000 fef9 	bl	8001db4 <HAL_Delay>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);	//Start timerPWM
 8000fc2:	2104      	movs	r1, #4
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <main+0x58>)
 8000fc6:	f004 fdcd 	bl	8005b64 <HAL_TIM_PWM_Start>
  HAL_Delay(50);
 8000fca:	2032      	movs	r0, #50	; 0x32
 8000fcc:	f000 fef2 	bl	8001db4 <HAL_Delay>
  #ifdef RUN_TEST_PROGRAM
    Test_program();
  #else
    Project();
 8000fd0:	f000 f8be 	bl	8001150 <Project>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <main+0x50>
 8000fd6:	bf00      	nop
 8000fd8:	48000400 	.word	0x48000400
 8000fdc:	2000017c 	.word	0x2000017c

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0b8      	sub	sp, #224	; 0xe0
 8000fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fea:	2244      	movs	r2, #68	; 0x44
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f006 fa26 	bl	8007440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001004:	463b      	mov	r3, r7
 8001006:	2288      	movs	r2, #136	; 0x88
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f006 fa18 	bl	8007440 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001010:	230a      	movs	r3, #10
 8001012:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001016:	f44f 7380 	mov.w	r3, #256	; 0x100
 800101a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800101e:	2310      	movs	r3, #16
 8001020:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001024:	2301      	movs	r3, #1
 8001026:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102a:	2302      	movs	r3, #2
 800102c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001030:	2302      	movs	r3, #2
 8001032:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001036:	2301      	movs	r3, #1
 8001038:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800103c:	230a      	movs	r3, #10
 800103e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001042:	2307      	movs	r3, #7
 8001044:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001048:	2302      	movs	r3, #2
 800104a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800104e:	2302      	movs	r3, #2
 8001050:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001054:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001058:	4618      	mov	r0, r3
 800105a:	f002 fc4f 	bl	80038fc <HAL_RCC_OscConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001064:	f000 f850 	bl	8001108 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001068:	230f      	movs	r3, #15
 800106a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106e:	2303      	movs	r3, #3
 8001070:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001086:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800108a:	2104      	movs	r1, #4
 800108c:	4618      	mov	r0, r3
 800108e:	f002 ffe5 	bl	800405c <HAL_RCC_ClockConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001098:	f000 f836 	bl	8001108 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 800109c:	4b19      	ldr	r3, [pc, #100]	; (8001104 <SystemClock_Config+0x124>)
 800109e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010b0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80010ba:	2302      	movs	r3, #2
 80010bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010be:	2301      	movs	r3, #1
 80010c0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80010c2:	2308      	movs	r3, #8
 80010c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010c6:	2307      	movs	r3, #7
 80010c8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80010d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010d6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d8:	463b      	mov	r3, r7
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 f9c2 	bl	8004464 <HAL_RCCEx_PeriphCLKConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80010e6:	f000 f80f 	bl	8001108 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010ee:	f002 fbaf 	bl	8003850 <HAL_PWREx_ControlVoltageScaling>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0x11c>
  {
    Error_Handler();
 80010f8:	f000 f806 	bl	8001108 <Error_Handler>
  }
}
 80010fc:	bf00      	nop
 80010fe:	37e0      	adds	r7, #224	; 0xe0
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	00024112 	.word	0x00024112

08001108 <Error_Handler>:
  * error handle will be called when an error occur when data is being received
  * over uart.
  * @retval None
  */
void Error_Handler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	SPI_send_display(0x00, 0x00, 0x01);	//clear display
 800110c:	2201      	movs	r2, #1
 800110e:	2100      	movs	r1, #0
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff fcf3 	bl	8000afc <SPI_send_display>

	/*Display "To slow"*/
	Write_display(0x54);
 8001116:	2054      	movs	r0, #84	; 0x54
 8001118:	f7ff fdaa 	bl	8000c70 <Write_display>
	Write_display(0x6F);
 800111c:	206f      	movs	r0, #111	; 0x6f
 800111e:	f7ff fda7 	bl	8000c70 <Write_display>
	Write_display(0x20);
 8001122:	2020      	movs	r0, #32
 8001124:	f7ff fda4 	bl	8000c70 <Write_display>
	Write_display(0x73);
 8001128:	2073      	movs	r0, #115	; 0x73
 800112a:	f7ff fda1 	bl	8000c70 <Write_display>
	Write_display(0x6C);
 800112e:	206c      	movs	r0, #108	; 0x6c
 8001130:	f7ff fd9e 	bl	8000c70 <Write_display>
	Write_display(0x6F);
 8001134:	206f      	movs	r0, #111	; 0x6f
 8001136:	f7ff fd9b 	bl	8000c70 <Write_display>
	Write_display(0x77);
 800113a:	2077      	movs	r0, #119	; 0x77
 800113c:	f7ff fd98 	bl	8000c70 <Write_display>

	HAL_Delay(3000);
 8001140:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001144:	f000 fe36 	bl	8001db4 <HAL_Delay>
	Project();
 8001148:	f000 f802 	bl	8001150 <Project>
  /* USER CODE END Error_Handler_Debug */
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}

08001150 <Project>:
/** @brief Project, position the bits correctly
 * get the time from the user via uart and display it on the display.
@author  Daniel Gripenstedt
@return void */
void Project(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	Init_display();
 8001154:	f7ff fd24 	bl	8000ba0 <Init_display>
	Dim_display();
 8001158:	f7ff fd9a 	bl	8000c90 <Dim_display>
	Set_user_clock();	//get time form user via uart
 800115c:	f000 fb2c 	bl	80017b8 <Set_user_clock>

	while(1)
	{
		Dim_display();	//control the red backlight brightness with PWM
 8001160:	f7ff fd96 	bl	8000c90 <Dim_display>
		Display_clock();	//display the time
 8001164:	f000 fc1e 	bl	80019a4 <Display_clock>
	{
 8001168:	e7fa      	b.n	8001160 <Project+0x10>
	...

0800116c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001180:	2300      	movs	r3, #0
 8001182:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001184:	4b2a      	ldr	r3, [pc, #168]	; (8001230 <MX_RTC_Init+0xc4>)
 8001186:	4a2b      	ldr	r2, [pc, #172]	; (8001234 <MX_RTC_Init+0xc8>)
 8001188:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800118a:	4b29      	ldr	r3, [pc, #164]	; (8001230 <MX_RTC_Init+0xc4>)
 800118c:	2200      	movs	r2, #0
 800118e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <MX_RTC_Init+0xc4>)
 8001192:	227f      	movs	r2, #127	; 0x7f
 8001194:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001196:	4b26      	ldr	r3, [pc, #152]	; (8001230 <MX_RTC_Init+0xc4>)
 8001198:	22ff      	movs	r2, #255	; 0xff
 800119a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <MX_RTC_Init+0xc4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_POS1;
 80011a2:	4b23      	ldr	r3, [pc, #140]	; (8001230 <MX_RTC_Init+0xc4>)
 80011a4:	2202      	movs	r2, #2
 80011a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011a8:	4b21      	ldr	r3, [pc, #132]	; (8001230 <MX_RTC_Init+0xc4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <MX_RTC_Init+0xc4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011b4:	481e      	ldr	r0, [pc, #120]	; (8001230 <MX_RTC_Init+0xc4>)
 80011b6:	f003 fe05 	bl	8004dc4 <HAL_RTC_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80011c0:	f7ff ffa2 	bl	8001108 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 23;
 80011c4:	2317      	movs	r3, #23
 80011c6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	2200      	movs	r2, #0
 80011dc:	4619      	mov	r1, r3
 80011de:	4814      	ldr	r0, [pc, #80]	; (8001230 <MX_RTC_Init+0xc4>)
 80011e0:	f003 fe6e 	bl	8004ec0 <HAL_RTC_SetTime>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80011ea:	f7ff ff8d 	bl	8001108 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80011ee:	2301      	movs	r3, #1
 80011f0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80011f2:	2301      	movs	r3, #1
 80011f4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80011f6:	2301      	movs	r3, #1
 80011f8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80011fe:	463b      	mov	r3, r7
 8001200:	2200      	movs	r2, #0
 8001202:	4619      	mov	r1, r3
 8001204:	480a      	ldr	r0, [pc, #40]	; (8001230 <MX_RTC_Init+0xc4>)
 8001206:	f003 ff54 	bl	80050b2 <HAL_RTC_SetDate>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001210:	f7ff ff7a 	bl	8001108 <Error_Handler>
  }
  /** Enable Calibration 
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 8001214:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001218:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_RTC_Init+0xc4>)
 800121a:	f004 f8ef 	bl	80053fc <HAL_RTCEx_SetCalibrationOutPut>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8001224:	f7ff ff70 	bl	8001108 <Error_Handler>
  }

}
 8001228:	bf00      	nop
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200000f4 	.word	0x200000f4
 8001234:	40002800 	.word	0x40002800

08001238 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a15      	ldr	r2, [pc, #84]	; (80012ac <HAL_RTC_MspInit+0x74>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d123      	bne.n	80012a2 <HAL_RTC_MspInit+0x6a>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_RTC_MspInit+0x78>)
 800125c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001260:	4a13      	ldr	r2, [pc, #76]	; (80012b0 <HAL_RTC_MspInit+0x78>)
 8001262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001266:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <HAL_RTC_MspInit+0x78>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <HAL_RTC_MspInit+0x78>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <HAL_RTC_MspInit+0x78>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration    
    PB2     ------> RTC_OUT_CALIB 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001282:	2304      	movs	r3, #4
 8001284:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <HAL_RTC_MspInit+0x7c>)
 800129e:	f001 ffe3 	bl	8003268 <HAL_GPIO_Init>

  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80012a2:	bf00      	nop
 80012a4:	3720      	adds	r7, #32
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40002800 	.word	0x40002800
 80012b0:	40021000 	.word	0x40021000
 80012b4:	48000400 	.word	0x48000400

080012b8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <MX_SPI2_Init+0x74>)
 80012be:	4a1c      	ldr	r2, [pc, #112]	; (8001330 <MX_SPI2_Init+0x78>)
 80012c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <MX_SPI2_Init+0x74>)
 80012c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <MX_SPI2_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <MX_SPI2_Init+0x74>)
 80012d2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012d6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <MX_SPI2_Init+0x74>)
 80012da:	2202      	movs	r2, #2
 80012dc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <MX_SPI2_Init+0x74>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_SPI2_Init+0x74>)
 80012e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MX_SPI2_Init+0x74>)
 80012ee:	2230      	movs	r2, #48	; 0x30
 80012f0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <MX_SPI2_Init+0x74>)
 80012f4:	2280      	movs	r2, #128	; 0x80
 80012f6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_SPI2_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <MX_SPI2_Init+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_SPI2_Init+0x74>)
 8001306:	2207      	movs	r2, #7
 8001308:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <MX_SPI2_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_SPI2_Init+0x74>)
 8001312:	2200      	movs	r2, #0
 8001314:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_SPI2_Init+0x74>)
 8001318:	f004 f8b7 	bl	800548a <HAL_SPI_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001322:	f7ff fef1 	bl	8001108 <Error_Handler>
  }

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000118 	.word	0x20000118
 8001330:	40003800 	.word	0x40003800

08001334 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a25      	ldr	r2, [pc, #148]	; (80013e8 <HAL_SPI_MspInit+0xb4>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d144      	bne.n	80013e0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001356:	4b25      	ldr	r3, [pc, #148]	; (80013ec <HAL_SPI_MspInit+0xb8>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	4a24      	ldr	r2, [pc, #144]	; (80013ec <HAL_SPI_MspInit+0xb8>)
 800135c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001360:	6593      	str	r3, [r2, #88]	; 0x58
 8001362:	4b22      	ldr	r3, [pc, #136]	; (80013ec <HAL_SPI_MspInit+0xb8>)
 8001364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800136e:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <HAL_SPI_MspInit+0xb8>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a1e      	ldr	r2, [pc, #120]	; (80013ec <HAL_SPI_MspInit+0xb8>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <HAL_SPI_MspInit+0xb8>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <HAL_SPI_MspInit+0xb8>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4a18      	ldr	r2, [pc, #96]	; (80013ec <HAL_SPI_MspInit+0xb8>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <HAL_SPI_MspInit+0xb8>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800139e:	230c      	movs	r3, #12
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013ae:	2305      	movs	r3, #5
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	480d      	ldr	r0, [pc, #52]	; (80013f0 <HAL_SPI_MspInit+0xbc>)
 80013ba:	f001 ff55 	bl	8003268 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013d0:	2305      	movs	r3, #5
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4619      	mov	r1, r3
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <HAL_SPI_MspInit+0xc0>)
 80013dc:	f001 ff44 	bl	8003268 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80013e0:	bf00      	nop
 80013e2:	3728      	adds	r7, #40	; 0x28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40003800 	.word	0x40003800
 80013ec:	40021000 	.word	0x40021000
 80013f0:	48000800 	.word	0x48000800
 80013f4:	48000400 	.word	0x48000400

080013f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fe:	4b0f      	ldr	r3, [pc, #60]	; (800143c <HAL_MspInit+0x44>)
 8001400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001402:	4a0e      	ldr	r2, [pc, #56]	; (800143c <HAL_MspInit+0x44>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6613      	str	r3, [r2, #96]	; 0x60
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <HAL_MspInit+0x44>)
 800140c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_MspInit+0x44>)
 8001418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141a:	4a08      	ldr	r2, [pc, #32]	; (800143c <HAL_MspInit+0x44>)
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001420:	6593      	str	r3, [r2, #88]	; 0x58
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_MspInit+0x44>)
 8001424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000

08001440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <HardFault_Handler+0x4>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <MemManage_Handler+0x4>

0800145a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145e:	e7fe      	b.n	800145e <BusFault_Handler+0x4>

08001460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <UsageFault_Handler+0x4>

08001466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001494:	f000 fc70 	bl	8001d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}

0800149c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <SystemInit+0x64>)
 80014a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014a6:	4a16      	ldr	r2, [pc, #88]	; (8001500 <SystemInit+0x64>)
 80014a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <SystemInit+0x68>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a13      	ldr	r2, [pc, #76]	; (8001504 <SystemInit+0x68>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <SystemInit+0x68>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <SystemInit+0x68>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a0f      	ldr	r2, [pc, #60]	; (8001504 <SystemInit+0x68>)
 80014c8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80014cc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80014d0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <SystemInit+0x68>)
 80014d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014d8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <SystemInit+0x68>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a09      	ldr	r2, [pc, #36]	; (8001504 <SystemInit+0x68>)
 80014e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <SystemInit+0x68>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <SystemInit+0x64>)
 80014ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014f2:	609a      	str	r2, [r3, #8]
#endif
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00
 8001504:	40021000 	.word	0x40021000

08001508 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08e      	sub	sp, #56	; 0x38
 800150c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001528:	463b      	mov	r3, r7
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]
 8001536:	615a      	str	r2, [r3, #20]
 8001538:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800153a:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <MX_TIM3_Init+0xe8>)
 800153c:	4a2d      	ldr	r2, [pc, #180]	; (80015f4 <MX_TIM3_Init+0xec>)
 800153e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4096;
 8001540:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <MX_TIM3_Init+0xe8>)
 8001542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001546:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001548:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <MX_TIM3_Init+0xe8>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800154e:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <MX_TIM3_Init+0xe8>)
 8001550:	2263      	movs	r2, #99	; 0x63
 8001552:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001554:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <MX_TIM3_Init+0xe8>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155a:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <MX_TIM3_Init+0xe8>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001560:	4823      	ldr	r0, [pc, #140]	; (80015f0 <MX_TIM3_Init+0xe8>)
 8001562:	f004 fa9f 	bl	8005aa4 <HAL_TIM_Base_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800156c:	f7ff fdcc 	bl	8001108 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001576:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157a:	4619      	mov	r1, r3
 800157c:	481c      	ldr	r0, [pc, #112]	; (80015f0 <MX_TIM3_Init+0xe8>)
 800157e:	f004 fc61 	bl	8005e44 <HAL_TIM_ConfigClockSource>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001588:	f7ff fdbe 	bl	8001108 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800158c:	4818      	ldr	r0, [pc, #96]	; (80015f0 <MX_TIM3_Init+0xe8>)
 800158e:	f004 fab4 	bl	8005afa <HAL_TIM_PWM_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001598:	f7ff fdb6 	bl	8001108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	4811      	ldr	r0, [pc, #68]	; (80015f0 <MX_TIM3_Init+0xe8>)
 80015ac:	f005 f934 	bl	8006818 <HAL_TIMEx_MasterConfigSynchronization>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80015b6:	f7ff fda7 	bl	8001108 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ba:	2360      	movs	r3, #96	; 0x60
 80015bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2048;
 80015be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015cc:	463b      	mov	r3, r7
 80015ce:	2204      	movs	r2, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	4807      	ldr	r0, [pc, #28]	; (80015f0 <MX_TIM3_Init+0xe8>)
 80015d4:	f004 fb1e 	bl	8005c14 <HAL_TIM_PWM_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80015de:	f7ff fd93 	bl	8001108 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80015e2:	4803      	ldr	r0, [pc, #12]	; (80015f0 <MX_TIM3_Init+0xe8>)
 80015e4:	f000 f828 	bl	8001638 <HAL_TIM_MspPostInit>

}
 80015e8:	bf00      	nop
 80015ea:	3738      	adds	r7, #56	; 0x38
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2000017c 	.word	0x2000017c
 80015f4:	40000400 	.word	0x40000400

080015f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <HAL_TIM_Base_MspInit+0x38>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d10b      	bne.n	8001622 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <HAL_TIM_Base_MspInit+0x3c>)
 800160c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160e:	4a09      	ldr	r2, [pc, #36]	; (8001634 <HAL_TIM_Base_MspInit+0x3c>)
 8001610:	f043 0302 	orr.w	r3, r3, #2
 8001614:	6593      	str	r3, [r2, #88]	; 0x58
 8001616:	4b07      	ldr	r3, [pc, #28]	; (8001634 <HAL_TIM_Base_MspInit+0x3c>)
 8001618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001622:	bf00      	nop
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40000400 	.word	0x40000400
 8001634:	40021000 	.word	0x40021000

08001638 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a11      	ldr	r2, [pc, #68]	; (800169c <HAL_TIM_MspPostInit+0x64>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d11b      	bne.n	8001692 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_TIM_MspPostInit+0x68>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	4a10      	ldr	r2, [pc, #64]	; (80016a0 <HAL_TIM_MspPostInit+0x68>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_TIM_MspPostInit+0x68>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001682:	2302      	movs	r3, #2
 8001684:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001686:	f107 030c 	add.w	r3, r7, #12
 800168a:	4619      	mov	r1, r3
 800168c:	4805      	ldr	r0, [pc, #20]	; (80016a4 <HAL_TIM_MspPostInit+0x6c>)
 800168e:	f001 fdeb 	bl	8003268 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001692:	bf00      	nop
 8001694:	3720      	adds	r7, #32
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40000400 	.word	0x40000400
 80016a0:	40021000 	.word	0x40021000
 80016a4:	48000800 	.word	0x48000800

080016a8 <Display_number>:
/* @brief Display_number, display "number" on the display.
 * @param number
@author  Daniel Gripenstedt
@return void */
void Display_number(uint8_t number)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
	if (number == 0)
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <Display_number+0x16>
	{
		Write_display(0x30);
 80016b8:	2030      	movs	r0, #48	; 0x30
 80016ba:	f7ff fad9 	bl	8000c70 <Write_display>
	}

	if (number == 1)
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d102      	bne.n	80016ca <Display_number+0x22>
	{
		Write_display(0x31);
 80016c4:	2031      	movs	r0, #49	; 0x31
 80016c6:	f7ff fad3 	bl	8000c70 <Write_display>
	}

	if (number == 2)
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d102      	bne.n	80016d6 <Display_number+0x2e>
	{
		Write_display(0x32);
 80016d0:	2032      	movs	r0, #50	; 0x32
 80016d2:	f7ff facd 	bl	8000c70 <Write_display>
	}

	if (number == 3)
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d102      	bne.n	80016e2 <Display_number+0x3a>
	{
		Write_display(0x33);
 80016dc:	2033      	movs	r0, #51	; 0x33
 80016de:	f7ff fac7 	bl	8000c70 <Write_display>
	}

	if (number == 4)
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d102      	bne.n	80016ee <Display_number+0x46>
	{
		Write_display(0x34);
 80016e8:	2034      	movs	r0, #52	; 0x34
 80016ea:	f7ff fac1 	bl	8000c70 <Write_display>
	}

	if (number == 5)
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	2b05      	cmp	r3, #5
 80016f2:	d102      	bne.n	80016fa <Display_number+0x52>
	{
		Write_display(0x35);
 80016f4:	2035      	movs	r0, #53	; 0x35
 80016f6:	f7ff fabb 	bl	8000c70 <Write_display>
	}

	if (number == 6)
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2b06      	cmp	r3, #6
 80016fe:	d102      	bne.n	8001706 <Display_number+0x5e>
	{
		Write_display(0x36);
 8001700:	2036      	movs	r0, #54	; 0x36
 8001702:	f7ff fab5 	bl	8000c70 <Write_display>
	}

	if (number == 7)
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	2b07      	cmp	r3, #7
 800170a:	d102      	bne.n	8001712 <Display_number+0x6a>
	{
		Write_display(0x37);
 800170c:	2037      	movs	r0, #55	; 0x37
 800170e:	f7ff faaf 	bl	8000c70 <Write_display>
	}

	if (number == 8)
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	2b08      	cmp	r3, #8
 8001716:	d102      	bne.n	800171e <Display_number+0x76>
	{
		Write_display(0x38);
 8001718:	2038      	movs	r0, #56	; 0x38
 800171a:	f7ff faa9 	bl	8000c70 <Write_display>
	}

	if (number == 9)
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	2b09      	cmp	r3, #9
 8001722:	d102      	bne.n	800172a <Display_number+0x82>
	{
		Write_display(0x39);
 8001724:	2039      	movs	r0, #57	; 0x39
 8001726:	f7ff faa3 	bl	8000c70 <Write_display>
	}
}/*End of function Display_number*/
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <Large_number>:
 * second digit becoms the number. Send digits to Display_numbers(uint8_t number);
 * @param Large_number
@author  Daniel Gripenstedt
@return void */
void Large_number (uint8_t Large_number)
{
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
	double temp_num = Large_number / 10;	//first number
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	4a1c      	ldr	r2, [pc, #112]	; (80017b4 <Large_number+0x80>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	08db      	lsrs	r3, r3, #3
 8001748:	b2db      	uxtb	r3, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fe8e 	bl	800046c <__aeabi_i2d>
 8001750:	4603      	mov	r3, r0
 8001752:	460c      	mov	r4, r1
 8001754:	e9c7 3406 	strd	r3, r4, [r7, #24]

	uint8_t first_num = floor(temp_num);	//make temp_num into an uint8_t
 8001758:	ed97 0b06 	vldr	d0, [r7, #24]
 800175c:	f005 fe78 	bl	8007450 <floor>
 8001760:	ec54 3b10 	vmov	r3, r4, d0
 8001764:	4618      	mov	r0, r3
 8001766:	4621      	mov	r1, r4
 8001768:	f7fe ff72 	bl	8000650 <__aeabi_d2uiz>
 800176c:	4603      	mov	r3, r0
 800176e:	75fb      	strb	r3, [r7, #23]

	temp_num = Large_number;
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fe6a 	bl	800044c <__aeabi_ui2d>
 8001778:	4603      	mov	r3, r0
 800177a:	460c      	mov	r4, r1
 800177c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	int modulo_num = Large_number % 10;	//modulos can not be made on uint8_t
 8001780:	79fa      	ldrb	r2, [r7, #7]
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <Large_number+0x80>)
 8001784:	fba3 1302 	umull	r1, r3, r3, r2
 8001788:	08d9      	lsrs	r1, r3, #3
 800178a:	460b      	mov	r3, r1
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	440b      	add	r3, r1
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	613b      	str	r3, [r7, #16]
	uint8_t second_num = modulo_num;
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	73fb      	strb	r3, [r7, #15]


		Display_number(first_num);
 800179c:	7dfb      	ldrb	r3, [r7, #23]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ff82 	bl	80016a8 <Display_number>
		Display_number(second_num);
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ff7e 	bl	80016a8 <Display_number>
}/*End of function Large_number*/
 80017ac:	bf00      	nop
 80017ae:	3724      	adds	r7, #36	; 0x24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd90      	pop	{r4, r7, pc}
 80017b4:	cccccccd 	.word	0xcccccccd

080017b8 <Set_user_clock>:
/** @brief Set_user_clock, let the user set the time
 * via uart and serial cable from pc to nucleo.
@author  Daniel Gripenstedt
@return void */
void Set_user_clock(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
	/*Display "Set hour"*/
	Write_display(0x53);
 80017be:	2053      	movs	r0, #83	; 0x53
 80017c0:	f7ff fa56 	bl	8000c70 <Write_display>
	Write_display(0x65);
 80017c4:	2065      	movs	r0, #101	; 0x65
 80017c6:	f7ff fa53 	bl	8000c70 <Write_display>
	Write_display(0x74);
 80017ca:	2074      	movs	r0, #116	; 0x74
 80017cc:	f7ff fa50 	bl	8000c70 <Write_display>
	Write_display(0x20);
 80017d0:	2020      	movs	r0, #32
 80017d2:	f7ff fa4d 	bl	8000c70 <Write_display>
	Write_display(0x68);
 80017d6:	2068      	movs	r0, #104	; 0x68
 80017d8:	f7ff fa4a 	bl	8000c70 <Write_display>
	Write_display(0x6F);
 80017dc:	206f      	movs	r0, #111	; 0x6f
 80017de:	f7ff fa47 	bl	8000c70 <Write_display>
	Write_display(0x75);
 80017e2:	2075      	movs	r0, #117	; 0x75
 80017e4:	f7ff fa44 	bl	8000c70 <Write_display>
	Write_display(0x72);
 80017e8:	2072      	movs	r0, #114	; 0x72
 80017ea:	f7ff fa41 	bl	8000c70 <Write_display>

	RTC_TimeTypeDef sTime;	//struct to store time
	RTC_DateTypeDef sDate;	//struct to store dates

	/*Time varibles*/
	uint8_t prev_sec = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	77fb      	strb	r3, [r7, #31]
	uint8_t uHour = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	70fb      	strb	r3, [r7, #3]
	uint8_t uMinute = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	70bb      	strb	r3, [r7, #2]
	uint8_t uSecond = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	707b      	strb	r3, [r7, #1]
	uint16_t size = 1;
 80017fe:	2301      	movs	r3, #1
 8001800:	83bb      	strh	r3, [r7, #28]

	if (HAL_UART_Receive(&huart5, &uHour, size, 60000) != HAL_OK) // get hour from user
 8001802:	8bba      	ldrh	r2, [r7, #28]
 8001804:	1cf9      	adds	r1, r7, #3
 8001806:	f64e 2360 	movw	r3, #60000	; 0xea60
 800180a:	4864      	ldr	r0, [pc, #400]	; (800199c <Set_user_clock+0x1e4>)
 800180c:	f005 f8ae 	bl	800696c <HAL_UART_Receive>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <Set_user_clock+0x62>
				{
					Error_Handler();
 8001816:	f7ff fc77 	bl	8001108 <Error_Handler>
				}

	SPI_send_display(0,0,0xC0);	//rad 3
 800181a:	22c0      	movs	r2, #192	; 0xc0
 800181c:	2100      	movs	r1, #0
 800181e:	2000      	movs	r0, #0
 8001820:	f7ff f96c 	bl	8000afc <SPI_send_display>
	Large_number(uHour);
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ff84 	bl	8001734 <Large_number>
	Write_display(0x3A);	// display :
 800182c:	203a      	movs	r0, #58	; 0x3a
 800182e:	f7ff fa1f 	bl	8000c70 <Write_display>

	/*Display "Set minute"*/
	SPI_send_display(0x00, 0x00, 0x80);	//rad 1
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	2100      	movs	r1, #0
 8001836:	2000      	movs	r0, #0
 8001838:	f7ff f960 	bl	8000afc <SPI_send_display>
	Write_display(0x53);
 800183c:	2053      	movs	r0, #83	; 0x53
 800183e:	f7ff fa17 	bl	8000c70 <Write_display>
	Write_display(0x65);
 8001842:	2065      	movs	r0, #101	; 0x65
 8001844:	f7ff fa14 	bl	8000c70 <Write_display>
	Write_display(0x74);
 8001848:	2074      	movs	r0, #116	; 0x74
 800184a:	f7ff fa11 	bl	8000c70 <Write_display>
	Write_display(0x20);
 800184e:	2020      	movs	r0, #32
 8001850:	f7ff fa0e 	bl	8000c70 <Write_display>
	Write_display(0x6D);
 8001854:	206d      	movs	r0, #109	; 0x6d
 8001856:	f7ff fa0b 	bl	8000c70 <Write_display>
	Write_display(0x69);
 800185a:	2069      	movs	r0, #105	; 0x69
 800185c:	f7ff fa08 	bl	8000c70 <Write_display>
	Write_display(0x6E);
 8001860:	206e      	movs	r0, #110	; 0x6e
 8001862:	f7ff fa05 	bl	8000c70 <Write_display>
	Write_display(0x75);
 8001866:	2075      	movs	r0, #117	; 0x75
 8001868:	f7ff fa02 	bl	8000c70 <Write_display>
	Write_display(0x74);
 800186c:	2074      	movs	r0, #116	; 0x74
 800186e:	f7ff f9ff 	bl	8000c70 <Write_display>

	SPI_send_display(0,0,0xC0);	//rad 3
 8001872:	22c0      	movs	r2, #192	; 0xc0
 8001874:	2100      	movs	r1, #0
 8001876:	2000      	movs	r0, #0
 8001878:	f7ff f940 	bl	8000afc <SPI_send_display>
	Large_number(uHour);
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff58 	bl	8001734 <Large_number>
	Write_display(0x3A);
 8001884:	203a      	movs	r0, #58	; 0x3a
 8001886:	f7ff f9f3 	bl	8000c70 <Write_display>

	if (HAL_UART_Receive(&huart5, &uMinute, size, 60000) != HAL_OK)	//get minute from user
 800188a:	8bba      	ldrh	r2, [r7, #28]
 800188c:	1cb9      	adds	r1, r7, #2
 800188e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001892:	4842      	ldr	r0, [pc, #264]	; (800199c <Set_user_clock+0x1e4>)
 8001894:	f005 f86a 	bl	800696c <HAL_UART_Receive>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <Set_user_clock+0xea>
	{
		Error_Handler();
 800189e:	f7ff fc33 	bl	8001108 <Error_Handler>
	}

	//SPI_send_display(0,0,0xC0);
	Large_number(uMinute);
 80018a2:	78bb      	ldrb	r3, [r7, #2]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff45 	bl	8001734 <Large_number>
	Write_display(0x3A);
 80018aa:	203a      	movs	r0, #58	; 0x3a
 80018ac:	f7ff f9e0 	bl	8000c70 <Write_display>

	/*Display "Set second"*/
	SPI_send_display(0x00, 0x00, 0x80);	//rad 1
 80018b0:	2280      	movs	r2, #128	; 0x80
 80018b2:	2100      	movs	r1, #0
 80018b4:	2000      	movs	r0, #0
 80018b6:	f7ff f921 	bl	8000afc <SPI_send_display>
	Write_display(0x53);
 80018ba:	2053      	movs	r0, #83	; 0x53
 80018bc:	f7ff f9d8 	bl	8000c70 <Write_display>
	Write_display(0x65);
 80018c0:	2065      	movs	r0, #101	; 0x65
 80018c2:	f7ff f9d5 	bl	8000c70 <Write_display>
	Write_display(0x74);
 80018c6:	2074      	movs	r0, #116	; 0x74
 80018c8:	f7ff f9d2 	bl	8000c70 <Write_display>
	Write_display(0x20);
 80018cc:	2020      	movs	r0, #32
 80018ce:	f7ff f9cf 	bl	8000c70 <Write_display>
	Write_display(0x73);
 80018d2:	2073      	movs	r0, #115	; 0x73
 80018d4:	f7ff f9cc 	bl	8000c70 <Write_display>
	Write_display(0x65);
 80018d8:	2065      	movs	r0, #101	; 0x65
 80018da:	f7ff f9c9 	bl	8000c70 <Write_display>
	Write_display(0x63);
 80018de:	2063      	movs	r0, #99	; 0x63
 80018e0:	f7ff f9c6 	bl	8000c70 <Write_display>

	Write_display(0x6F);
 80018e4:	206f      	movs	r0, #111	; 0x6f
 80018e6:	f7ff f9c3 	bl	8000c70 <Write_display>
	Write_display(0x6E);
 80018ea:	206e      	movs	r0, #110	; 0x6e
 80018ec:	f7ff f9c0 	bl	8000c70 <Write_display>
	Write_display(0x64);
 80018f0:	2064      	movs	r0, #100	; 0x64
 80018f2:	f7ff f9bd 	bl	8000c70 <Write_display>
	Write_display(0x73);
 80018f6:	2073      	movs	r0, #115	; 0x73
 80018f8:	f7ff f9ba 	bl	8000c70 <Write_display>

	SPI_send_display(0,0,0xC0);	//rad 3
 80018fc:	22c0      	movs	r2, #192	; 0xc0
 80018fe:	2100      	movs	r1, #0
 8001900:	2000      	movs	r0, #0
 8001902:	f7ff f8fb 	bl	8000afc <SPI_send_display>
	Large_number(uHour);
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff13 	bl	8001734 <Large_number>
	Write_display(0x3A);
 800190e:	203a      	movs	r0, #58	; 0x3a
 8001910:	f7ff f9ae 	bl	8000c70 <Write_display>
	Large_number(uMinute);
 8001914:	78bb      	ldrb	r3, [r7, #2]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ff0c 	bl	8001734 <Large_number>
	Write_display(0x3A);
 800191c:	203a      	movs	r0, #58	; 0x3a
 800191e:	f7ff f9a7 	bl	8000c70 <Write_display>

	if (HAL_UART_Receive(&huart5, &uSecond, size, 60000) != HAL_OK)	//get second from user
 8001922:	8bba      	ldrh	r2, [r7, #28]
 8001924:	1c79      	adds	r1, r7, #1
 8001926:	f64e 2360 	movw	r3, #60000	; 0xea60
 800192a:	481c      	ldr	r0, [pc, #112]	; (800199c <Set_user_clock+0x1e4>)
 800192c:	f005 f81e 	bl	800696c <HAL_UART_Receive>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <Set_user_clock+0x182>
	{
		Error_Handler();
 8001936:	f7ff fbe7 	bl	8001108 <Error_Handler>
	}

	Large_number(uSecond);
 800193a:	787b      	ldrb	r3, [r7, #1]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fef9 	bl	8001734 <Large_number>
	SPI_send_display(0x00, 0x00, 0x01);	//clear display
 8001942:	2201      	movs	r2, #1
 8001944:	2100      	movs	r1, #0
 8001946:	2000      	movs	r0, #0
 8001948:	f7ff f8d8 	bl	8000afc <SPI_send_display>
	/*Write "Time" on the display*/
	SPI_send_display(0x00, 0x00, 0x00);	//rad 1
 800194c:	2200      	movs	r2, #0
 800194e:	2100      	movs	r1, #0
 8001950:	2000      	movs	r0, #0
 8001952:	f7ff f8d3 	bl	8000afc <SPI_send_display>
	Write_display(0x54);
 8001956:	2054      	movs	r0, #84	; 0x54
 8001958:	f7ff f98a 	bl	8000c70 <Write_display>
	Write_display(0x69);
 800195c:	2069      	movs	r0, #105	; 0x69
 800195e:	f7ff f987 	bl	8000c70 <Write_display>
	Write_display(0x6D);
 8001962:	206d      	movs	r0, #109	; 0x6d
 8001964:	f7ff f984 	bl	8000c70 <Write_display>
	Write_display(0x65);
 8001968:	2065      	movs	r0, #101	; 0x65
 800196a:	f7ff f981 	bl	8000c70 <Write_display>

		/* Store the users time in sTime */
		sTime.Hours = uHour;
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	723b      	strb	r3, [r7, #8]
		sTime.Minutes = uMinute;
 8001972:	78bb      	ldrb	r3, [r7, #2]
 8001974:	727b      	strb	r3, [r7, #9]
		sTime.Seconds = uSecond;
 8001976:	787b      	ldrb	r3, [r7, #1]
 8001978:	72bb      	strb	r3, [r7, #10]

	    HAL_RTC_SetTime(&hrtc,&sTime,RTC_FORMAT_BIN);
 800197a:	f107 0308 	add.w	r3, r7, #8
 800197e:	2200      	movs	r2, #0
 8001980:	4619      	mov	r1, r3
 8001982:	4807      	ldr	r0, [pc, #28]	; (80019a0 <Set_user_clock+0x1e8>)
 8001984:	f003 fa9c 	bl	8004ec0 <HAL_RTC_SetTime>
	    HAL_RTC_SetDate(&hrtc,&sDate,RTC_FORMAT_BIN);
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	2200      	movs	r2, #0
 800198c:	4619      	mov	r1, r3
 800198e:	4804      	ldr	r0, [pc, #16]	; (80019a0 <Set_user_clock+0x1e8>)
 8001990:	f003 fb8f 	bl	80050b2 <HAL_RTC_SetDate>
}/*End of function Set_user_clock*/
 8001994:	bf00      	nop
 8001996:	3720      	adds	r7, #32
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200001bc 	.word	0x200001bc
 80019a0:	200000f4 	.word	0x200000f4

080019a4 <Display_clock>:
/*@brief Display_clock, display the time on the display
* @param number
@author  Daniel Gripenstedt
@return void */
void Display_clock(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BIN);
 80019a8:	2200      	movs	r2, #0
 80019aa:	4932      	ldr	r1, [pc, #200]	; (8001a74 <Display_clock+0xd0>)
 80019ac:	4832      	ldr	r0, [pc, #200]	; (8001a78 <Display_clock+0xd4>)
 80019ae:	f003 fb24 	bl	8004ffa <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&sDate,RTC_FORMAT_BIN);
 80019b2:	2200      	movs	r2, #0
 80019b4:	4931      	ldr	r1, [pc, #196]	; (8001a7c <Display_clock+0xd8>)
 80019b6:	4830      	ldr	r0, [pc, #192]	; (8001a78 <Display_clock+0xd4>)
 80019b8:	f003 fc02 	bl	80051c0 <HAL_RTC_GetDate>

	if(sTime.Hours == 0x18)	//fix bug where sTime.Hours get the value 24, reset back to 00:00:00
 80019bc:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <Display_clock+0xd0>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b18      	cmp	r3, #24
 80019c2:	d112      	bne.n	80019ea <Display_clock+0x46>
	{
		sTime.Hours = 0x00;
 80019c4:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <Display_clock+0xd0>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
		sTime.Minutes = 0x00;
 80019ca:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <Display_clock+0xd0>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	705a      	strb	r2, [r3, #1]
		sTime.Seconds = 0x00;
 80019d0:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <Display_clock+0xd0>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	709a      	strb	r2, [r3, #2]
		HAL_RTC_SetTime(&hrtc,&sTime,RTC_FORMAT_BIN);
 80019d6:	2200      	movs	r2, #0
 80019d8:	4926      	ldr	r1, [pc, #152]	; (8001a74 <Display_clock+0xd0>)
 80019da:	4827      	ldr	r0, [pc, #156]	; (8001a78 <Display_clock+0xd4>)
 80019dc:	f003 fa70 	bl	8004ec0 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc,&sDate,RTC_FORMAT_BIN);
 80019e0:	2200      	movs	r2, #0
 80019e2:	4926      	ldr	r1, [pc, #152]	; (8001a7c <Display_clock+0xd8>)
 80019e4:	4824      	ldr	r0, [pc, #144]	; (8001a78 <Display_clock+0xd4>)
 80019e6:	f003 fb64 	bl	80050b2 <HAL_RTC_SetDate>
	}

	if((sTime.Hours == 0x01) && (prev_hour == 0x0C))	//fix bug where sTime.Hours goes from 12 to 01, reset back to 00:00:00
 80019ea:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <Display_clock+0xd0>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d116      	bne.n	8001a20 <Display_clock+0x7c>
 80019f2:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <Display_clock+0xdc>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b0c      	cmp	r3, #12
 80019f8:	d112      	bne.n	8001a20 <Display_clock+0x7c>
				{
					//HAL_Delay(1000);
					sTime.Hours = 0x0D;
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <Display_clock+0xd0>)
 80019fc:	220d      	movs	r2, #13
 80019fe:	701a      	strb	r2, [r3, #0]
					sTime.Minutes = 0x00;
 8001a00:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <Display_clock+0xd0>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	705a      	strb	r2, [r3, #1]
					sTime.Seconds = 0x00;
 8001a06:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <Display_clock+0xd0>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	709a      	strb	r2, [r3, #2]
					HAL_RTC_SetTime(&hrtc,&sTime,RTC_FORMAT_BIN);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	4919      	ldr	r1, [pc, #100]	; (8001a74 <Display_clock+0xd0>)
 8001a10:	4819      	ldr	r0, [pc, #100]	; (8001a78 <Display_clock+0xd4>)
 8001a12:	f003 fa55 	bl	8004ec0 <HAL_RTC_SetTime>
					HAL_RTC_SetDate(&hrtc,&sDate,RTC_FORMAT_BIN);
 8001a16:	2200      	movs	r2, #0
 8001a18:	4918      	ldr	r1, [pc, #96]	; (8001a7c <Display_clock+0xd8>)
 8001a1a:	4817      	ldr	r0, [pc, #92]	; (8001a78 <Display_clock+0xd4>)
 8001a1c:	f003 fb49 	bl	80050b2 <HAL_RTC_SetDate>
				}

	if(prev_sec != sTime.Seconds)	//if we have a new second, display the new time
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <Display_clock+0xd0>)
 8001a22:	789a      	ldrb	r2, [r3, #2]
 8001a24:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <Display_clock+0xe0>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d019      	beq.n	8001a60 <Display_clock+0xbc>
	{
		SPI_send_display(0,0,0xC0);	//rad 3
 8001a2c:	22c0      	movs	r2, #192	; 0xc0
 8001a2e:	2100      	movs	r1, #0
 8001a30:	2000      	movs	r0, #0
 8001a32:	f7ff f863 	bl	8000afc <SPI_send_display>

		Large_number(sTime.Hours);
 8001a36:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <Display_clock+0xd0>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fe7a 	bl	8001734 <Large_number>
		Write_display(0x3A);	// display :
 8001a40:	203a      	movs	r0, #58	; 0x3a
 8001a42:	f7ff f915 	bl	8000c70 <Write_display>
		Large_number(sTime.Minutes);
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <Display_clock+0xd0>)
 8001a48:	785b      	ldrb	r3, [r3, #1]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fe72 	bl	8001734 <Large_number>
		Write_display(0x3A);
 8001a50:	203a      	movs	r0, #58	; 0x3a
 8001a52:	f7ff f90d 	bl	8000c70 <Write_display>
		Large_number(sTime.Seconds);
 8001a56:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <Display_clock+0xd0>)
 8001a58:	789b      	ldrb	r3, [r3, #2]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fe6a 	bl	8001734 <Large_number>
	}
	prev_hour = sTime.Hours;
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <Display_clock+0xd0>)
 8001a62:	781a      	ldrb	r2, [r3, #0]
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <Display_clock+0xdc>)
 8001a66:	701a      	strb	r2, [r3, #0]
	prev_sec = sTime.Seconds;
 8001a68:	4b02      	ldr	r3, [pc, #8]	; (8001a74 <Display_clock+0xd0>)
 8001a6a:	789a      	ldrb	r2, [r3, #2]
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <Display_clock+0xe0>)
 8001a6e:	701a      	strb	r2, [r3, #0]
				sTime.Minutes = 0x00;
				sTime.Seconds = 0x00;
				HAL_RTC_SetTime(&hrtc,&sTime,RTC_FORMAT_BIN);
				HAL_RTC_SetDate(&hrtc,&sDate,RTC_FORMAT_BIN);
			}*/
}/*End of function Display_clock*/
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000028 	.word	0x20000028
 8001a78:	200000f4 	.word	0x200000f4
 8001a7c:	2000003c 	.word	0x2000003c
 8001a80:	20000040 	.word	0x20000040
 8001a84:	20000041 	.word	0x20000041

08001a88 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8001a8c:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <MX_UART5_Init+0x58>)
 8001a8e:	4a15      	ldr	r2, [pc, #84]	; (8001ae4 <MX_UART5_Init+0x5c>)
 8001a90:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001a92:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <MX_UART5_Init+0x58>)
 8001a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a98:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_UART5_Init+0x58>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <MX_UART5_Init+0x58>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_UART5_Init+0x58>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_UART5_Init+0x58>)
 8001aae:	220c      	movs	r2, #12
 8001ab0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <MX_UART5_Init+0x58>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_UART5_Init+0x58>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <MX_UART5_Init+0x58>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_UART5_Init+0x58>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_UART5_Init+0x58>)
 8001acc:	f004 ff00 	bl	80068d0 <HAL_UART_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001ad6:	f7ff fb17 	bl	8001108 <Error_Handler>
  }

}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200001bc 	.word	0x200001bc
 8001ae4:	40005000 	.word	0x40005000

08001ae8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001aee:	4a15      	ldr	r2, [pc, #84]	; (8001b44 <MX_USART2_UART_Init+0x5c>)
 8001af0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b0e:	220c      	movs	r2, #12
 8001b10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b2c:	f004 fed0 	bl	80068d0 <HAL_UART_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b36:	f7ff fae7 	bl	8001108 <Error_Handler>
  }

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2000023c 	.word	0x2000023c
 8001b44:	40004400 	.word	0x40004400

08001b48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08c      	sub	sp, #48	; 0x30
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 031c 	add.w	r3, r7, #28
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a3d      	ldr	r2, [pc, #244]	; (8001c5c <HAL_UART_MspInit+0x114>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d145      	bne.n	8001bf6 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001b6a:	4b3d      	ldr	r3, [pc, #244]	; (8001c60 <HAL_UART_MspInit+0x118>)
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6e:	4a3c      	ldr	r2, [pc, #240]	; (8001c60 <HAL_UART_MspInit+0x118>)
 8001b70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b74:	6593      	str	r3, [r2, #88]	; 0x58
 8001b76:	4b3a      	ldr	r3, [pc, #232]	; (8001c60 <HAL_UART_MspInit+0x118>)
 8001b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b7e:	61bb      	str	r3, [r7, #24]
 8001b80:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b82:	4b37      	ldr	r3, [pc, #220]	; (8001c60 <HAL_UART_MspInit+0x118>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b86:	4a36      	ldr	r2, [pc, #216]	; (8001c60 <HAL_UART_MspInit+0x118>)
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b8e:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <HAL_UART_MspInit+0x118>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b9a:	4b31      	ldr	r3, [pc, #196]	; (8001c60 <HAL_UART_MspInit+0x118>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	4a30      	ldr	r2, [pc, #192]	; (8001c60 <HAL_UART_MspInit+0x118>)
 8001ba0:	f043 0308 	orr.w	r3, r3, #8
 8001ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba6:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <HAL_UART_MspInit+0x118>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001bc4:	2308      	movs	r3, #8
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc8:	f107 031c 	add.w	r3, r7, #28
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4825      	ldr	r0, [pc, #148]	; (8001c64 <HAL_UART_MspInit+0x11c>)
 8001bd0:	f001 fb4a 	bl	8003268 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bd4:	2304      	movs	r3, #4
 8001bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001be4:	2308      	movs	r3, #8
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be8:	f107 031c 	add.w	r3, r7, #28
 8001bec:	4619      	mov	r1, r3
 8001bee:	481e      	ldr	r0, [pc, #120]	; (8001c68 <HAL_UART_MspInit+0x120>)
 8001bf0:	f001 fb3a 	bl	8003268 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001bf4:	e02d      	b.n	8001c52 <HAL_UART_MspInit+0x10a>
  else if(uartHandle->Instance==USART2)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a1c      	ldr	r2, [pc, #112]	; (8001c6c <HAL_UART_MspInit+0x124>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d128      	bne.n	8001c52 <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <HAL_UART_MspInit+0x118>)
 8001c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c04:	4a16      	ldr	r2, [pc, #88]	; (8001c60 <HAL_UART_MspInit+0x118>)
 8001c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <HAL_UART_MspInit+0x118>)
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <HAL_UART_MspInit+0x118>)
 8001c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1c:	4a10      	ldr	r2, [pc, #64]	; (8001c60 <HAL_UART_MspInit+0x118>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <HAL_UART_MspInit+0x118>)
 8001c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c30:	230c      	movs	r3, #12
 8001c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c40:	2307      	movs	r3, #7
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c44:	f107 031c 	add.w	r3, r7, #28
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c4e:	f001 fb0b 	bl	8003268 <HAL_GPIO_Init>
}
 8001c52:	bf00      	nop
 8001c54:	3730      	adds	r7, #48	; 0x30
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40005000 	.word	0x40005000
 8001c60:	40021000 	.word	0x40021000
 8001c64:	48000800 	.word	0x48000800
 8001c68:	48000c00 	.word	0x48000c00
 8001c6c:	40004400 	.word	0x40004400

08001c70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ca8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c74:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c76:	e003      	b.n	8001c80 <LoopCopyDataInit>

08001c78 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c7a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c7c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c7e:	3104      	adds	r1, #4

08001c80 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c80:	480b      	ldr	r0, [pc, #44]	; (8001cb0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c82:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c84:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c86:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c88:	d3f6      	bcc.n	8001c78 <CopyDataInit>
	ldr	r2, =_sbss
 8001c8a:	4a0b      	ldr	r2, [pc, #44]	; (8001cb8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c8c:	e002      	b.n	8001c94 <LoopFillZerobss>

08001c8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c8e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001c90:	f842 3b04 	str.w	r3, [r2], #4

08001c94 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <LoopForever+0x16>)
	cmp	r2, r3
 8001c96:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c98:	d3f9      	bcc.n	8001c8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c9a:	f7ff fbff 	bl	800149c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c9e:	f005 fbab 	bl	80073f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ca2:	f7ff f96f 	bl	8000f84 <main>

08001ca6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ca6:	e7fe      	b.n	8001ca6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ca8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001cac:	080075c8 	.word	0x080075c8
	ldr	r0, =_sdata
 8001cb0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001cb4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001cb8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001cbc:	200002c0 	.word	0x200002c0

08001cc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cc0:	e7fe      	b.n	8001cc0 <ADC1_2_IRQHandler>
	...

08001cc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <HAL_Init+0x3c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <HAL_Init+0x3c>)
 8001cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cda:	2003      	movs	r0, #3
 8001cdc:	f001 fa90 	bl	8003200 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	f000 f80f 	bl	8001d04 <HAL_InitTick>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d002      	beq.n	8001cf2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	71fb      	strb	r3, [r7, #7]
 8001cf0:	e001      	b.n	8001cf6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cf2:	f7ff fb81 	bl	80013f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40022000 	.word	0x40022000

08001d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d10:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <HAL_InitTick+0x68>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d022      	beq.n	8001d5e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d18:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <HAL_InitTick+0x6c>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <HAL_InitTick+0x68>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d24:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f001 fa8e 	bl	800324e <HAL_SYSTICK_Config>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10f      	bne.n	8001d58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b0f      	cmp	r3, #15
 8001d3c:	d809      	bhi.n	8001d52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	f04f 30ff 	mov.w	r0, #4294967295
 8001d46:	f001 fa66 	bl	8003216 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <HAL_InitTick+0x70>)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	e007      	b.n	8001d62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	73fb      	strb	r3, [r7, #15]
 8001d56:	e004      	b.n	8001d62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
 8001d5c:	e001      	b.n	8001d62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000008 	.word	0x20000008
 8001d70:	20000000 	.word	0x20000000
 8001d74:	20000004 	.word	0x20000004

08001d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_IncTick+0x1c>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_IncTick+0x20>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4413      	add	r3, r2
 8001d86:	4a03      	ldr	r2, [pc, #12]	; (8001d94 <HAL_IncTick+0x1c>)
 8001d88:	6013      	str	r3, [r2, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	200002bc 	.word	0x200002bc
 8001d98:	20000008 	.word	0x20000008

08001d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001da0:	4b03      	ldr	r3, [pc, #12]	; (8001db0 <HAL_GetTick+0x14>)
 8001da2:	681b      	ldr	r3, [r3, #0]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	200002bc 	.word	0x200002bc

08001db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dbc:	f7ff ffee 	bl	8001d9c <HAL_GetTick>
 8001dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dcc:	d004      	beq.n	8001dd8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_Delay+0x40>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dd8:	bf00      	nop
 8001dda:	f7ff ffdf 	bl	8001d9c <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d8f7      	bhi.n	8001dda <HAL_Delay+0x26>
  {
  }
}
 8001dea:	bf00      	nop
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000008 	.word	0x20000008

08001df8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	609a      	str	r2, [r3, #8]
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	609a      	str	r2, [r3, #8]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e60:	b490      	push	{r4, r7}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
 8001e6c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	3360      	adds	r3, #96	; 0x60
 8001e72:	461a      	mov	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001e7c:	6822      	ldr	r2, [r4, #0]
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <LL_ADC_SetOffset+0x40>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e92:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc90      	pop	{r4, r7}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	03fff000 	.word	0x03fff000

08001ea4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ea4:	b490      	push	{r4, r7}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3360      	adds	r3, #96	; 0x60
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ebc:	6823      	ldr	r3, [r4, #0]
 8001ebe:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc90      	pop	{r4, r7}
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ecc:	b490      	push	{r4, r7}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	3360      	adds	r3, #96	; 0x60
 8001edc:	461a      	mov	r2, r3
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc90      	pop	{r4, r7}
 8001efa:	4770      	bx	lr

08001efc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f22:	b490      	push	{r4, r7}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	3330      	adds	r3, #48	; 0x30
 8001f32:	461a      	mov	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	0a1b      	lsrs	r3, r3, #8
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	4413      	add	r3, r2
 8001f40:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001f42:	6822      	ldr	r2, [r4, #0]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f003 031f 	and.w	r3, r3, #31
 8001f4a:	211f      	movs	r1, #31
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	401a      	ands	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	0e9b      	lsrs	r3, r3, #26
 8001f58:	f003 011f 	and.w	r1, r3, #31
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f003 031f 	and.w	r3, r3, #31
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	4313      	orrs	r3, r2
 8001f68:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc90      	pop	{r4, r7}
 8001f72:	4770      	bx	lr

08001f74 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f74:	b490      	push	{r4, r7}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	3314      	adds	r3, #20
 8001f84:	461a      	mov	r2, r3
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	0e5b      	lsrs	r3, r3, #25
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	4413      	add	r3, r2
 8001f92:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001f94:	6822      	ldr	r2, [r4, #0]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	0d1b      	lsrs	r3, r3, #20
 8001f9a:	f003 031f 	and.w	r3, r3, #31
 8001f9e:	2107      	movs	r1, #7
 8001fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	0d1b      	lsrs	r3, r3, #20
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc90      	pop	{r4, r7}
 8001fc2:	4770      	bx	lr

08001fc4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	401a      	ands	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f003 0318 	and.w	r3, r3, #24
 8001fe6:	4908      	ldr	r1, [pc, #32]	; (8002008 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fe8:	40d9      	lsrs	r1, r3
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	400b      	ands	r3, r1
 8001fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	0007ffff 	.word	0x0007ffff

0800200c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 031f 	and.w	r3, r3, #31
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002054:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6093      	str	r3, [r2, #8]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800207c:	d101      	bne.n	8002082 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80020a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020cc:	d101      	bne.n	80020d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020f4:	f043 0201 	orr.w	r2, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <LL_ADC_IsEnabled+0x18>
 800211c:	2301      	movs	r3, #1
 800211e:	e000      	b.n	8002122 <LL_ADC_IsEnabled+0x1a>
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800213e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002142:	f043 0204 	orr.w	r2, r3, #4
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	2b04      	cmp	r3, #4
 8002168:	d101      	bne.n	800216e <LL_ADC_REG_IsConversionOngoing+0x18>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b08      	cmp	r3, #8
 800218e:	d101      	bne.n	8002194 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002190:	2301      	movs	r3, #1
 8002192:	e000      	b.n	8002196 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021a4:	b590      	push	{r4, r7, lr}
 80021a6:	b089      	sub	sp, #36	; 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e134      	b.n	8002428 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d109      	bne.n	80021e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7fe fc55 	bl	8000a7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff3f 	bl	8002068 <LL_ADC_IsDeepPowerDownEnabled>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d004      	beq.n	80021fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff25 	bl	8002044 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff ff5a 	bl	80020b8 <LL_ADC_IsInternalRegulatorEnabled>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d113      	bne.n	8002232 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff ff3e 	bl	8002090 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002214:	4b86      	ldr	r3, [pc, #536]	; (8002430 <HAL_ADC_Init+0x28c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	099b      	lsrs	r3, r3, #6
 800221a:	4a86      	ldr	r2, [pc, #536]	; (8002434 <HAL_ADC_Init+0x290>)
 800221c:	fba2 2303 	umull	r2, r3, r2, r3
 8002220:	099b      	lsrs	r3, r3, #6
 8002222:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002224:	e002      	b.n	800222c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	3b01      	subs	r3, #1
 800222a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f9      	bne.n	8002226 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ff3e 	bl	80020b8 <LL_ADC_IsInternalRegulatorEnabled>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10d      	bne.n	800225e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002246:	f043 0210 	orr.w	r2, r3, #16
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	f043 0201 	orr.w	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff ff77 	bl	8002156 <LL_ADC_REG_IsConversionOngoing>
 8002268:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	2b00      	cmp	r3, #0
 8002274:	f040 80cf 	bne.w	8002416 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f040 80cb 	bne.w	8002416 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002284:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002288:	f043 0202 	orr.w	r2, r3, #2
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff37 	bl	8002108 <LL_ADC_IsEnabled>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d115      	bne.n	80022cc <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022a0:	4865      	ldr	r0, [pc, #404]	; (8002438 <HAL_ADC_Init+0x294>)
 80022a2:	f7ff ff31 	bl	8002108 <LL_ADC_IsEnabled>
 80022a6:	4604      	mov	r4, r0
 80022a8:	4864      	ldr	r0, [pc, #400]	; (800243c <HAL_ADC_Init+0x298>)
 80022aa:	f7ff ff2d 	bl	8002108 <LL_ADC_IsEnabled>
 80022ae:	4603      	mov	r3, r0
 80022b0:	431c      	orrs	r4, r3
 80022b2:	4863      	ldr	r0, [pc, #396]	; (8002440 <HAL_ADC_Init+0x29c>)
 80022b4:	f7ff ff28 	bl	8002108 <LL_ADC_IsEnabled>
 80022b8:	4603      	mov	r3, r0
 80022ba:	4323      	orrs	r3, r4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d105      	bne.n	80022cc <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4619      	mov	r1, r3
 80022c6:	485f      	ldr	r0, [pc, #380]	; (8002444 <HAL_ADC_Init+0x2a0>)
 80022c8:	f7ff fd96 	bl	8001df8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	7e5b      	ldrb	r3, [r3, #25]
 80022d0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022d6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80022dc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80022e2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d106      	bne.n	8002308 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	3b01      	subs	r3, #1
 8002300:	045b      	lsls	r3, r3, #17
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230c:	2b00      	cmp	r3, #0
 800230e:	d009      	beq.n	8002324 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	4b47      	ldr	r3, [pc, #284]	; (8002448 <HAL_ADC_Init+0x2a4>)
 800232c:	4013      	ands	r3, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	69b9      	ldr	r1, [r7, #24]
 8002334:	430b      	orrs	r3, r1
 8002336:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff0a 	bl	8002156 <LL_ADC_REG_IsConversionOngoing>
 8002342:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff17 	bl	800217c <LL_ADC_INJ_IsConversionOngoing>
 800234e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d13d      	bne.n	80023d2 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d13a      	bne.n	80023d2 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002360:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002368:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002378:	f023 0302 	bic.w	r3, r3, #2
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	69b9      	ldr	r1, [r7, #24]
 8002382:	430b      	orrs	r3, r1
 8002384:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800238c:	2b01      	cmp	r3, #1
 800238e:	d118      	bne.n	80023c2 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800239a:	f023 0304 	bic.w	r3, r3, #4
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023a6:	4311      	orrs	r1, r2
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80023ac:	4311      	orrs	r1, r2
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023b2:	430a      	orrs	r2, r1
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	611a      	str	r2, [r3, #16]
 80023c0:	e007      	b.n	80023d2 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0201 	bic.w	r2, r2, #1
 80023d0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d10c      	bne.n	80023f4 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	f023 010f 	bic.w	r1, r3, #15
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	1e5a      	subs	r2, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	631a      	str	r2, [r3, #48]	; 0x30
 80023f2:	e007      	b.n	8002404 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 020f 	bic.w	r2, r2, #15
 8002402:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002408:	f023 0303 	bic.w	r3, r3, #3
 800240c:	f043 0201 	orr.w	r2, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	655a      	str	r2, [r3, #84]	; 0x54
 8002414:	e007      	b.n	8002426 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	f043 0210 	orr.w	r2, r3, #16
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002426:	7ffb      	ldrb	r3, [r7, #31]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3724      	adds	r7, #36	; 0x24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd90      	pop	{r4, r7, pc}
 8002430:	20000000 	.word	0x20000000
 8002434:	053e2d63 	.word	0x053e2d63
 8002438:	50040000 	.word	0x50040000
 800243c:	50040100 	.word	0x50040100
 8002440:	50040200 	.word	0x50040200
 8002444:	50040300 	.word	0x50040300
 8002448:	fff0c007 	.word	0xfff0c007

0800244c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002454:	4857      	ldr	r0, [pc, #348]	; (80025b4 <HAL_ADC_Start+0x168>)
 8002456:	f7ff fdd9 	bl	800200c <LL_ADC_GetMultimode>
 800245a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fe78 	bl	8002156 <LL_ADC_REG_IsConversionOngoing>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	f040 809c 	bne.w	80025a6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_ADC_Start+0x30>
 8002478:	2302      	movs	r3, #2
 800247a:	e097      	b.n	80025ac <HAL_ADC_Start+0x160>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 fcdd 	bl	8002e44 <ADC_Enable>
 800248a:	4603      	mov	r3, r0
 800248c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800248e:	7dfb      	ldrb	r3, [r7, #23]
 8002490:	2b00      	cmp	r3, #0
 8002492:	f040 8083 	bne.w	800259c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800249e:	f023 0301 	bic.w	r3, r3, #1
 80024a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a42      	ldr	r2, [pc, #264]	; (80025b8 <HAL_ADC_Start+0x16c>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d002      	beq.n	80024ba <HAL_ADC_Start+0x6e>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	e000      	b.n	80024bc <HAL_ADC_Start+0x70>
 80024ba:	4b40      	ldr	r3, [pc, #256]	; (80025bc <HAL_ADC_Start+0x170>)
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d002      	beq.n	80024ca <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d105      	bne.n	80024d6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e2:	d106      	bne.n	80024f2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e8:	f023 0206 	bic.w	r2, r3, #6
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	659a      	str	r2, [r3, #88]	; 0x58
 80024f0:	e002      	b.n	80024f8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	221c      	movs	r2, #28
 80024fe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a2a      	ldr	r2, [pc, #168]	; (80025b8 <HAL_ADC_Start+0x16c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d002      	beq.n	8002518 <HAL_ADC_Start+0xcc>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	e000      	b.n	800251a <HAL_ADC_Start+0xce>
 8002518:	4b28      	ldr	r3, [pc, #160]	; (80025bc <HAL_ADC_Start+0x170>)
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	4293      	cmp	r3, r2
 8002520:	d008      	beq.n	8002534 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	2b05      	cmp	r3, #5
 800252c:	d002      	beq.n	8002534 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	2b09      	cmp	r3, #9
 8002532:	d114      	bne.n	800255e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d007      	beq.n	8002552 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002546:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800254a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fde9 	bl	800212e <LL_ADC_REG_StartConversion>
 800255c:	e025      	b.n	80025aa <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002562:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a12      	ldr	r2, [pc, #72]	; (80025b8 <HAL_ADC_Start+0x16c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d002      	beq.n	800257a <HAL_ADC_Start+0x12e>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	e000      	b.n	800257c <HAL_ADC_Start+0x130>
 800257a:	4b10      	ldr	r3, [pc, #64]	; (80025bc <HAL_ADC_Start+0x170>)
 800257c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00f      	beq.n	80025aa <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002592:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	655a      	str	r2, [r3, #84]	; 0x54
 800259a:	e006      	b.n	80025aa <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80025a4:	e001      	b.n	80025aa <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025a6:	2302      	movs	r3, #2
 80025a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80025aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	50040300 	.word	0x50040300
 80025b8:	50040100 	.word	0x50040100
 80025bc:	50040000 	.word	0x50040000

080025c0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025ca:	4862      	ldr	r0, [pc, #392]	; (8002754 <HAL_ADC_PollForConversion+0x194>)
 80025cc:	f7ff fd1e 	bl	800200c <LL_ADC_GetMultimode>
 80025d0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d102      	bne.n	80025e0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80025da:	2308      	movs	r3, #8
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	e02a      	b.n	8002636 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2b05      	cmp	r3, #5
 80025ea:	d002      	beq.n	80025f2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	2b09      	cmp	r3, #9
 80025f0:	d111      	bne.n	8002616 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d007      	beq.n	8002610 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002604:	f043 0220 	orr.w	r2, r3, #32
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e09d      	b.n	800274c <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002610:	2304      	movs	r3, #4
 8002612:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002614:	e00f      	b.n	8002636 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002616:	484f      	ldr	r0, [pc, #316]	; (8002754 <HAL_ADC_PollForConversion+0x194>)
 8002618:	f7ff fd06 	bl	8002028 <LL_ADC_GetMultiDMATransfer>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d007      	beq.n	8002632 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002626:	f043 0220 	orr.w	r2, r3, #32
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e08c      	b.n	800274c <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002632:	2304      	movs	r3, #4
 8002634:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002636:	f7ff fbb1 	bl	8001d9c <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800263c:	e01a      	b.n	8002674 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002644:	d016      	beq.n	8002674 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002646:	f7ff fba9 	bl	8001d9c <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d302      	bcc.n	800265c <HAL_ADC_PollForConversion+0x9c>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10b      	bne.n	8002674 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002660:	f043 0204 	orr.w	r2, r3, #4
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e06b      	b.n	800274c <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0dd      	beq.n	800263e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002686:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fc32 	bl	8001efc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d01c      	beq.n	80026d8 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	7e5b      	ldrb	r3, [r3, #25]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d118      	bne.n	80026d8 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d111      	bne.n	80026d8 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d105      	bne.n	80026d8 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d0:	f043 0201 	orr.w	r2, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a1e      	ldr	r2, [pc, #120]	; (8002758 <HAL_ADC_PollForConversion+0x198>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d002      	beq.n	80026e8 <HAL_ADC_PollForConversion+0x128>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	e000      	b.n	80026ea <HAL_ADC_PollForConversion+0x12a>
 80026e8:	4b1c      	ldr	r3, [pc, #112]	; (800275c <HAL_ADC_PollForConversion+0x19c>)
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d008      	beq.n	8002704 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2b05      	cmp	r3, #5
 80026fc:	d002      	beq.n	8002704 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2b09      	cmp	r3, #9
 8002702:	d104      	bne.n	800270e <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	61bb      	str	r3, [r7, #24]
 800270c:	e00c      	b.n	8002728 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a11      	ldr	r2, [pc, #68]	; (8002758 <HAL_ADC_PollForConversion+0x198>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d002      	beq.n	800271e <HAL_ADC_PollForConversion+0x15e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	e000      	b.n	8002720 <HAL_ADC_PollForConversion+0x160>
 800271e:	4b0f      	ldr	r3, [pc, #60]	; (800275c <HAL_ADC_PollForConversion+0x19c>)
 8002720:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	2b08      	cmp	r3, #8
 800272c:	d104      	bne.n	8002738 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2208      	movs	r2, #8
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e008      	b.n	800274a <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d103      	bne.n	800274a <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	220c      	movs	r2, #12
 8002748:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3720      	adds	r7, #32
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	50040300 	.word	0x50040300
 8002758:	50040100 	.word	0x50040100
 800275c:	50040000 	.word	0x50040000

08002760 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b0a6      	sub	sp, #152	; 0x98
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_ADC_ConfigChannel+0x22>
 800279a:	2302      	movs	r3, #2
 800279c:	e348      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x6b4>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fcd3 	bl	8002156 <LL_ADC_REG_IsConversionOngoing>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f040 8329 	bne.w	8002e0a <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b05      	cmp	r3, #5
 80027be:	d824      	bhi.n	800280a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	3b02      	subs	r3, #2
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d81b      	bhi.n	8002802 <HAL_ADC_ConfigChannel+0x86>
 80027ca:	a201      	add	r2, pc, #4	; (adr r2, 80027d0 <HAL_ADC_ConfigChannel+0x54>)
 80027cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d0:	080027e1 	.word	0x080027e1
 80027d4:	080027e9 	.word	0x080027e9
 80027d8:	080027f1 	.word	0x080027f1
 80027dc:	080027f9 	.word	0x080027f9
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	220c      	movs	r2, #12
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	e011      	b.n	800280c <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	2212      	movs	r2, #18
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	e00d      	b.n	800280c <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	2218      	movs	r2, #24
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	e009      	b.n	800280c <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	e004      	b.n	800280c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2206      	movs	r2, #6
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	e000      	b.n	800280c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800280a:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6818      	ldr	r0, [r3, #0]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	6859      	ldr	r1, [r3, #4]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	f7ff fb82 	bl	8001f22 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fc97 	bl	8002156 <LL_ADC_REG_IsConversionOngoing>
 8002828:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fca3 	bl	800217c <LL_ADC_INJ_IsConversionOngoing>
 8002836:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800283a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800283e:	2b00      	cmp	r3, #0
 8002840:	f040 8148 	bne.w	8002ad4 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002844:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002848:	2b00      	cmp	r3, #0
 800284a:	f040 8143 	bne.w	8002ad4 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	6819      	ldr	r1, [r3, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	461a      	mov	r2, r3
 800285c:	f7ff fb8a 	bl	8001f74 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	695a      	ldr	r2, [r3, #20]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	08db      	lsrs	r3, r3, #3
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b04      	cmp	r3, #4
 8002880:	d00a      	beq.n	8002898 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6919      	ldr	r1, [r3, #16]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002892:	f7ff fae5 	bl	8001e60 <LL_ADC_SetOffset>
 8002896:	e11d      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2100      	movs	r1, #0
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fb00 	bl	8001ea4 <LL_ADC_GetOffsetChannel>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10a      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x148>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff faf5 	bl	8001ea4 <LL_ADC_GetOffsetChannel>
 80028ba:	4603      	mov	r3, r0
 80028bc:	0e9b      	lsrs	r3, r3, #26
 80028be:	f003 021f 	and.w	r2, r3, #31
 80028c2:	e012      	b.n	80028ea <HAL_ADC_ConfigChannel+0x16e>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2100      	movs	r1, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff faea 	bl	8001ea4 <LL_ADC_GetOffsetChannel>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028da:	fa93 f3a3 	rbit	r3, r3
 80028de:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028e2:	fab3 f383 	clz	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d105      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x186>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	0e9b      	lsrs	r3, r3, #26
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	e00a      	b.n	8002918 <HAL_ADC_ConfigChannel+0x19c>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800290a:	fa93 f3a3 	rbit	r3, r3
 800290e:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002910:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002912:	fab3 f383 	clz	r3, r3
 8002916:	b2db      	uxtb	r3, r3
 8002918:	429a      	cmp	r2, r3
 800291a:	d106      	bne.n	800292a <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2200      	movs	r2, #0
 8002922:	2100      	movs	r1, #0
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fad1 	bl	8001ecc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2101      	movs	r1, #1
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fab7 	bl	8001ea4 <LL_ADC_GetOffsetChannel>
 8002936:	4603      	mov	r3, r0
 8002938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10a      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x1da>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2101      	movs	r1, #1
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff faac 	bl	8001ea4 <LL_ADC_GetOffsetChannel>
 800294c:	4603      	mov	r3, r0
 800294e:	0e9b      	lsrs	r3, r3, #26
 8002950:	f003 021f 	and.w	r2, r3, #31
 8002954:	e010      	b.n	8002978 <HAL_ADC_ConfigChannel+0x1fc>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2101      	movs	r1, #1
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff faa1 	bl	8001ea4 <LL_ADC_GetOffsetChannel>
 8002962:	4603      	mov	r3, r0
 8002964:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800296e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002980:	2b00      	cmp	r3, #0
 8002982:	d105      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x214>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	0e9b      	lsrs	r3, r3, #26
 800298a:	f003 031f 	and.w	r3, r3, #31
 800298e:	e00a      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x22a>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800299e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029a0:	fab3 f383 	clz	r3, r3
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d106      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2200      	movs	r2, #0
 80029b0:	2101      	movs	r1, #1
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fa8a 	bl	8001ecc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2102      	movs	r1, #2
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fa70 	bl	8001ea4 <LL_ADC_GetOffsetChannel>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10a      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x268>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2102      	movs	r1, #2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fa65 	bl	8001ea4 <LL_ADC_GetOffsetChannel>
 80029da:	4603      	mov	r3, r0
 80029dc:	0e9b      	lsrs	r3, r3, #26
 80029de:	f003 021f 	and.w	r2, r3, #31
 80029e2:	e010      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x28a>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2102      	movs	r1, #2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fa5a 	bl	8001ea4 <LL_ADC_GetOffsetChannel>
 80029f0:	4603      	mov	r3, r0
 80029f2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80029fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d105      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x2a2>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	0e9b      	lsrs	r3, r3, #26
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	e00a      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x2b8>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d106      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2102      	movs	r1, #2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fa43 	bl	8001ecc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2103      	movs	r1, #3
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fa29 	bl	8001ea4 <LL_ADC_GetOffsetChannel>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10a      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x2f6>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2103      	movs	r1, #3
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fa1e 	bl	8001ea4 <LL_ADC_GetOffsetChannel>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	0e9b      	lsrs	r3, r3, #26
 8002a6c:	f003 021f 	and.w	r2, r3, #31
 8002a70:	e010      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x318>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2103      	movs	r1, #3
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff fa13 	bl	8001ea4 <LL_ADC_GetOffsetChannel>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a84:	fa93 f3a3 	rbit	r3, r3
 8002a88:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a8c:	fab3 f383 	clz	r3, r3
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d105      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x330>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	0e9b      	lsrs	r3, r3, #26
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	e00a      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x346>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ab4:	fa93 f3a3 	rbit	r3, r3
 8002ab8:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002aba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002abc:	fab3 f383 	clz	r3, r3
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d106      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2200      	movs	r2, #0
 8002acc:	2103      	movs	r1, #3
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff f9fc 	bl	8001ecc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fb15 	bl	8002108 <LL_ADC_IsEnabled>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f040 810c 	bne.w	8002cfe <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6818      	ldr	r0, [r3, #0]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	6819      	ldr	r1, [r3, #0]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	461a      	mov	r2, r3
 8002af4:	f7ff fa66 	bl	8001fc4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4aad      	ldr	r2, [pc, #692]	; (8002db4 <HAL_ADC_ConfigChannel+0x638>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	f040 80fd 	bne.w	8002cfe <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10b      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x3b0>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	0e9b      	lsrs	r3, r3, #26
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	2b09      	cmp	r3, #9
 8002b22:	bf94      	ite	ls
 8002b24:	2301      	movls	r3, #1
 8002b26:	2300      	movhi	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	e012      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x3d6>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b3c:	fab3 f383 	clz	r3, r3
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	3301      	adds	r3, #1
 8002b44:	f003 031f 	and.w	r3, r3, #31
 8002b48:	2b09      	cmp	r3, #9
 8002b4a:	bf94      	ite	ls
 8002b4c:	2301      	movls	r3, #1
 8002b4e:	2300      	movhi	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d064      	beq.n	8002c20 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d107      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x3f6>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	0e9b      	lsrs	r3, r3, #26
 8002b68:	3301      	adds	r3, #1
 8002b6a:	069b      	lsls	r3, r3, #26
 8002b6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b70:	e00e      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x414>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	3301      	adds	r3, #1
 8002b8a:	069b      	lsls	r3, r3, #26
 8002b8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d109      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x434>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	0e9b      	lsrs	r3, r3, #26
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	2101      	movs	r1, #1
 8002baa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bae:	e010      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x456>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc0:	fab3 f383 	clz	r3, r3
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	2101      	movs	r1, #1
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	ea42 0103 	orr.w	r1, r2, r3
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10a      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x47c>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	0e9b      	lsrs	r3, r3, #26
 8002be8:	3301      	adds	r3, #1
 8002bea:	f003 021f 	and.w	r2, r3, #31
 8002bee:	4613      	mov	r3, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	4413      	add	r3, r2
 8002bf4:	051b      	lsls	r3, r3, #20
 8002bf6:	e011      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x4a0>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	fa93 f3a3 	rbit	r3, r3
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	fab3 f383 	clz	r3, r3
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	3301      	adds	r3, #1
 8002c10:	f003 021f 	and.w	r2, r3, #31
 8002c14:	4613      	mov	r3, r2
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	4413      	add	r3, r2
 8002c1a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	e069      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d107      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x4c0>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	0e9b      	lsrs	r3, r3, #26
 8002c32:	3301      	adds	r3, #1
 8002c34:	069b      	lsls	r3, r3, #26
 8002c36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c3a:	e00e      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x4de>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	61fb      	str	r3, [r7, #28]
  return result;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	fab3 f383 	clz	r3, r3
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	3301      	adds	r3, #1
 8002c54:	069b      	lsls	r3, r3, #26
 8002c56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d109      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x4fe>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	0e9b      	lsrs	r3, r3, #26
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	2101      	movs	r1, #1
 8002c74:	fa01 f303 	lsl.w	r3, r1, r3
 8002c78:	e010      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x520>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	617b      	str	r3, [r7, #20]
  return result;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	3301      	adds	r3, #1
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	2101      	movs	r1, #1
 8002c98:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9c:	ea42 0103 	orr.w	r1, r2, r3
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10d      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x54c>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	0e9b      	lsrs	r3, r3, #26
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	f003 021f 	and.w	r2, r3, #31
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3b1e      	subs	r3, #30
 8002cc0:	051b      	lsls	r3, r3, #20
 8002cc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	e014      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x576>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	fa93 f3a3 	rbit	r3, r3
 8002cd4:	60fb      	str	r3, [r7, #12]
  return result;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	fab3 f383 	clz	r3, r3
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	3301      	adds	r3, #1
 8002ce0:	f003 021f 	and.w	r2, r3, #31
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	4413      	add	r3, r2
 8002cea:	3b1e      	subs	r3, #30
 8002cec:	051b      	lsls	r3, r3, #20
 8002cee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cf2:	430b      	orrs	r3, r1
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	6892      	ldr	r2, [r2, #8]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f7ff f93b 	bl	8001f74 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	4b2d      	ldr	r3, [pc, #180]	; (8002db8 <HAL_ADC_ConfigChannel+0x63c>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 808c 	beq.w	8002e24 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d0c:	482b      	ldr	r0, [pc, #172]	; (8002dbc <HAL_ADC_ConfigChannel+0x640>)
 8002d0e:	f7ff f899 	bl	8001e44 <LL_ADC_GetCommonPathInternalCh>
 8002d12:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a29      	ldr	r2, [pc, #164]	; (8002dc0 <HAL_ADC_ConfigChannel+0x644>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d12b      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x5fc>
 8002d20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d125      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a24      	ldr	r2, [pc, #144]	; (8002dc4 <HAL_ADC_ConfigChannel+0x648>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d004      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x5c4>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a23      	ldr	r2, [pc, #140]	; (8002dc8 <HAL_ADC_ConfigChannel+0x64c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d16e      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d48:	4619      	mov	r1, r3
 8002d4a:	481c      	ldr	r0, [pc, #112]	; (8002dbc <HAL_ADC_ConfigChannel+0x640>)
 8002d4c:	f7ff f867 	bl	8001e1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002d50:	4b1e      	ldr	r3, [pc, #120]	; (8002dcc <HAL_ADC_ConfigChannel+0x650>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	099b      	lsrs	r3, r3, #6
 8002d56:	4a1e      	ldr	r2, [pc, #120]	; (8002dd0 <HAL_ADC_ConfigChannel+0x654>)
 8002d58:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5c:	099a      	lsrs	r2, r3, #6
 8002d5e:	4613      	mov	r3, r2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	4413      	add	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d68:	e002      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f9      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d76:	e052      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a15      	ldr	r2, [pc, #84]	; (8002dd4 <HAL_ADC_ConfigChannel+0x658>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d12a      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x65c>
 8002d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d124      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a0c      	ldr	r2, [pc, #48]	; (8002dc4 <HAL_ADC_ConfigChannel+0x648>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d004      	beq.n	8002da2 <HAL_ADC_ConfigChannel+0x626>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a0a      	ldr	r2, [pc, #40]	; (8002dc8 <HAL_ADC_ConfigChannel+0x64c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d13f      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002da2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002daa:	4619      	mov	r1, r3
 8002dac:	4803      	ldr	r0, [pc, #12]	; (8002dbc <HAL_ADC_ConfigChannel+0x640>)
 8002dae:	f7ff f836 	bl	8001e1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002db2:	e036      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x6a6>
 8002db4:	407f0000 	.word	0x407f0000
 8002db8:	80080000 	.word	0x80080000
 8002dbc:	50040300 	.word	0x50040300
 8002dc0:	c7520000 	.word	0xc7520000
 8002dc4:	50040000 	.word	0x50040000
 8002dc8:	50040200 	.word	0x50040200
 8002dcc:	20000000 	.word	0x20000000
 8002dd0:	053e2d63 	.word	0x053e2d63
 8002dd4:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a16      	ldr	r2, [pc, #88]	; (8002e38 <HAL_ADC_ConfigChannel+0x6bc>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d120      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002de2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d11a      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a12      	ldr	r2, [pc, #72]	; (8002e3c <HAL_ADC_ConfigChannel+0x6c0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d115      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dfc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e00:	4619      	mov	r1, r3
 8002e02:	480f      	ldr	r0, [pc, #60]	; (8002e40 <HAL_ADC_ConfigChannel+0x6c4>)
 8002e04:	f7ff f80b 	bl	8001e1e <LL_ADC_SetCommonPathInternalCh>
 8002e08:	e00c      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0e:	f043 0220 	orr.w	r2, r3, #32
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002e1c:	e002      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e1e:	bf00      	nop
 8002e20:	e000      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e22:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e2c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3798      	adds	r7, #152	; 0x98
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	80000001 	.word	0x80000001
 8002e3c:	50040000 	.word	0x50040000
 8002e40:	50040300 	.word	0x50040300

08002e44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff f959 	bl	8002108 <LL_ADC_IsEnabled>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d146      	bne.n	8002eea <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <ADC_Enable+0xb0>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00d      	beq.n	8002e86 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6e:	f043 0210 	orr.w	r2, r3, #16
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7a:	f043 0201 	orr.w	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e032      	b.n	8002eec <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff f928 	bl	80020e0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e90:	f7fe ff84 	bl	8001d9c <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e96:	e021      	b.n	8002edc <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff f933 	bl	8002108 <LL_ADC_IsEnabled>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d104      	bne.n	8002eb2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff f917 	bl	80020e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002eb2:	f7fe ff73 	bl	8001d9c <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d90d      	bls.n	8002edc <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec4:	f043 0210 	orr.w	r2, r3, #16
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed0:	f043 0201 	orr.w	r2, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e007      	b.n	8002eec <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d1d6      	bne.n	8002e98 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	8000003f 	.word	0x8000003f

08002ef8 <LL_ADC_IsEnabled>:
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <LL_ADC_IsEnabled+0x18>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e000      	b.n	8002f12 <LL_ADC_IsEnabled+0x1a>
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <LL_ADC_REG_IsConversionOngoing>:
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d101      	bne.n	8002f36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f44:	b590      	push	{r4, r7, lr}
 8002f46:	b09f      	sub	sp, #124	; 0x7c
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d101      	bne.n	8002f62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e08f      	b.n	8003082 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a47      	ldr	r2, [pc, #284]	; (800308c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d102      	bne.n	8002f7a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002f74:	4b46      	ldr	r3, [pc, #280]	; (8003090 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002f76:	60bb      	str	r3, [r7, #8]
 8002f78:	e001      	b.n	8002f7e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10b      	bne.n	8002f9c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f88:	f043 0220 	orr.w	r2, r3, #32
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e072      	b.n	8003082 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff ffbd 	bl	8002f1e <LL_ADC_REG_IsConversionOngoing>
 8002fa4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff ffb7 	bl	8002f1e <LL_ADC_REG_IsConversionOngoing>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d154      	bne.n	8003060 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002fb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d151      	bne.n	8003060 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002fbc:	4b35      	ldr	r3, [pc, #212]	; (8003094 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002fbe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d02c      	beq.n	8003022 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	6859      	ldr	r1, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fda:	035b      	lsls	r3, r3, #13
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fe4:	4829      	ldr	r0, [pc, #164]	; (800308c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002fe6:	f7ff ff87 	bl	8002ef8 <LL_ADC_IsEnabled>
 8002fea:	4604      	mov	r4, r0
 8002fec:	4828      	ldr	r0, [pc, #160]	; (8003090 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002fee:	f7ff ff83 	bl	8002ef8 <LL_ADC_IsEnabled>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	431c      	orrs	r4, r3
 8002ff6:	4828      	ldr	r0, [pc, #160]	; (8003098 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ff8:	f7ff ff7e 	bl	8002ef8 <LL_ADC_IsEnabled>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	4323      	orrs	r3, r4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d137      	bne.n	8003074 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800300c:	f023 030f 	bic.w	r3, r3, #15
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	6811      	ldr	r1, [r2, #0]
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	6892      	ldr	r2, [r2, #8]
 8003018:	430a      	orrs	r2, r1
 800301a:	431a      	orrs	r2, r3
 800301c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800301e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003020:	e028      	b.n	8003074 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800302a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800302c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800302e:	4817      	ldr	r0, [pc, #92]	; (800308c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003030:	f7ff ff62 	bl	8002ef8 <LL_ADC_IsEnabled>
 8003034:	4604      	mov	r4, r0
 8003036:	4816      	ldr	r0, [pc, #88]	; (8003090 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003038:	f7ff ff5e 	bl	8002ef8 <LL_ADC_IsEnabled>
 800303c:	4603      	mov	r3, r0
 800303e:	431c      	orrs	r4, r3
 8003040:	4815      	ldr	r0, [pc, #84]	; (8003098 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003042:	f7ff ff59 	bl	8002ef8 <LL_ADC_IsEnabled>
 8003046:	4603      	mov	r3, r0
 8003048:	4323      	orrs	r3, r4
 800304a:	2b00      	cmp	r3, #0
 800304c:	d112      	bne.n	8003074 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800304e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003056:	f023 030f 	bic.w	r3, r3, #15
 800305a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800305c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800305e:	e009      	b.n	8003074 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003064:	f043 0220 	orr.w	r2, r3, #32
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003072:	e000      	b.n	8003076 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003074:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800307e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003082:	4618      	mov	r0, r3
 8003084:	377c      	adds	r7, #124	; 0x7c
 8003086:	46bd      	mov	sp, r7
 8003088:	bd90      	pop	{r4, r7, pc}
 800308a:	bf00      	nop
 800308c:	50040000 	.word	0x50040000
 8003090:	50040100 	.word	0x50040100
 8003094:	50040300 	.word	0x50040300
 8003098:	50040200 	.word	0x50040200

0800309c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030ac:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <__NVIC_SetPriorityGrouping+0x44>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030b8:	4013      	ands	r3, r2
 80030ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ce:	4a04      	ldr	r2, [pc, #16]	; (80030e0 <__NVIC_SetPriorityGrouping+0x44>)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	60d3      	str	r3, [r2, #12]
}
 80030d4:	bf00      	nop
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030e8:	4b04      	ldr	r3, [pc, #16]	; (80030fc <__NVIC_GetPriorityGrouping+0x18>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	0a1b      	lsrs	r3, r3, #8
 80030ee:	f003 0307 	and.w	r3, r3, #7
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	6039      	str	r1, [r7, #0]
 800310a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800310c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003110:	2b00      	cmp	r3, #0
 8003112:	db0a      	blt.n	800312a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	b2da      	uxtb	r2, r3
 8003118:	490c      	ldr	r1, [pc, #48]	; (800314c <__NVIC_SetPriority+0x4c>)
 800311a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311e:	0112      	lsls	r2, r2, #4
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	440b      	add	r3, r1
 8003124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003128:	e00a      	b.n	8003140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	b2da      	uxtb	r2, r3
 800312e:	4908      	ldr	r1, [pc, #32]	; (8003150 <__NVIC_SetPriority+0x50>)
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	3b04      	subs	r3, #4
 8003138:	0112      	lsls	r2, r2, #4
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	440b      	add	r3, r1
 800313e:	761a      	strb	r2, [r3, #24]
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000e100 	.word	0xe000e100
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003154:	b480      	push	{r7}
 8003156:	b089      	sub	sp, #36	; 0x24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f1c3 0307 	rsb	r3, r3, #7
 800316e:	2b04      	cmp	r3, #4
 8003170:	bf28      	it	cs
 8003172:	2304      	movcs	r3, #4
 8003174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	3304      	adds	r3, #4
 800317a:	2b06      	cmp	r3, #6
 800317c:	d902      	bls.n	8003184 <NVIC_EncodePriority+0x30>
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3b03      	subs	r3, #3
 8003182:	e000      	b.n	8003186 <NVIC_EncodePriority+0x32>
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003188:	f04f 32ff 	mov.w	r2, #4294967295
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43da      	mvns	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	401a      	ands	r2, r3
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800319c:	f04f 31ff 	mov.w	r1, #4294967295
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	fa01 f303 	lsl.w	r3, r1, r3
 80031a6:	43d9      	mvns	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ac:	4313      	orrs	r3, r2
         );
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3724      	adds	r7, #36	; 0x24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
	...

080031bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031cc:	d301      	bcc.n	80031d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ce:	2301      	movs	r3, #1
 80031d0:	e00f      	b.n	80031f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031d2:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <SysTick_Config+0x40>)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031da:	210f      	movs	r1, #15
 80031dc:	f04f 30ff 	mov.w	r0, #4294967295
 80031e0:	f7ff ff8e 	bl	8003100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <SysTick_Config+0x40>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ea:	4b04      	ldr	r3, [pc, #16]	; (80031fc <SysTick_Config+0x40>)
 80031ec:	2207      	movs	r2, #7
 80031ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	e000e010 	.word	0xe000e010

08003200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff ff47 	bl	800309c <__NVIC_SetPriorityGrouping>
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b086      	sub	sp, #24
 800321a:	af00      	add	r7, sp, #0
 800321c:	4603      	mov	r3, r0
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	607a      	str	r2, [r7, #4]
 8003222:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003228:	f7ff ff5c 	bl	80030e4 <__NVIC_GetPriorityGrouping>
 800322c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	68b9      	ldr	r1, [r7, #8]
 8003232:	6978      	ldr	r0, [r7, #20]
 8003234:	f7ff ff8e 	bl	8003154 <NVIC_EncodePriority>
 8003238:	4602      	mov	r2, r0
 800323a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800323e:	4611      	mov	r1, r2
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff ff5d 	bl	8003100 <__NVIC_SetPriority>
}
 8003246:	bf00      	nop
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff ffb0 	bl	80031bc <SysTick_Config>
 800325c:	4603      	mov	r3, r0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003276:	e17f      	b.n	8003578 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	2101      	movs	r1, #1
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	fa01 f303 	lsl.w	r3, r1, r3
 8003284:	4013      	ands	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 8171 	beq.w	8003572 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x38>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b12      	cmp	r3, #18
 800329e:	d123      	bne.n	80032e8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	08da      	lsrs	r2, r3, #3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3208      	adds	r2, #8
 80032a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	220f      	movs	r2, #15
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4013      	ands	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	08da      	lsrs	r2, r3, #3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3208      	adds	r2, #8
 80032e2:	6939      	ldr	r1, [r7, #16]
 80032e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	2203      	movs	r2, #3
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4013      	ands	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 0203 	and.w	r2, r3, #3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d00b      	beq.n	800333c <HAL_GPIO_Init+0xd4>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b02      	cmp	r3, #2
 800332a:	d007      	beq.n	800333c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003330:	2b11      	cmp	r3, #17
 8003332:	d003      	beq.n	800333c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b12      	cmp	r3, #18
 800333a:	d130      	bne.n	800339e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	2203      	movs	r2, #3
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4013      	ands	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003372:	2201      	movs	r2, #1
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4013      	ands	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	091b      	lsrs	r3, r3, #4
 8003388:	f003 0201 	and.w	r2, r3, #1
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d118      	bne.n	80033dc <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80033b0:	2201      	movs	r2, #1
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4013      	ands	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	08db      	lsrs	r3, r3, #3
 80033c6:	f003 0201 	and.w	r2, r3, #1
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	2203      	movs	r2, #3
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4013      	ands	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4313      	orrs	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 80ac 	beq.w	8003572 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800341a:	4b5e      	ldr	r3, [pc, #376]	; (8003594 <HAL_GPIO_Init+0x32c>)
 800341c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800341e:	4a5d      	ldr	r2, [pc, #372]	; (8003594 <HAL_GPIO_Init+0x32c>)
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	6613      	str	r3, [r2, #96]	; 0x60
 8003426:	4b5b      	ldr	r3, [pc, #364]	; (8003594 <HAL_GPIO_Init+0x32c>)
 8003428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003432:	4a59      	ldr	r2, [pc, #356]	; (8003598 <HAL_GPIO_Init+0x330>)
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	089b      	lsrs	r3, r3, #2
 8003438:	3302      	adds	r3, #2
 800343a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	220f      	movs	r2, #15
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	43db      	mvns	r3, r3
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4013      	ands	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800345c:	d025      	beq.n	80034aa <HAL_GPIO_Init+0x242>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a4e      	ldr	r2, [pc, #312]	; (800359c <HAL_GPIO_Init+0x334>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d01f      	beq.n	80034a6 <HAL_GPIO_Init+0x23e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a4d      	ldr	r2, [pc, #308]	; (80035a0 <HAL_GPIO_Init+0x338>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d019      	beq.n	80034a2 <HAL_GPIO_Init+0x23a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a4c      	ldr	r2, [pc, #304]	; (80035a4 <HAL_GPIO_Init+0x33c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d013      	beq.n	800349e <HAL_GPIO_Init+0x236>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a4b      	ldr	r2, [pc, #300]	; (80035a8 <HAL_GPIO_Init+0x340>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00d      	beq.n	800349a <HAL_GPIO_Init+0x232>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a4a      	ldr	r2, [pc, #296]	; (80035ac <HAL_GPIO_Init+0x344>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d007      	beq.n	8003496 <HAL_GPIO_Init+0x22e>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a49      	ldr	r2, [pc, #292]	; (80035b0 <HAL_GPIO_Init+0x348>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d101      	bne.n	8003492 <HAL_GPIO_Init+0x22a>
 800348e:	2306      	movs	r3, #6
 8003490:	e00c      	b.n	80034ac <HAL_GPIO_Init+0x244>
 8003492:	2307      	movs	r3, #7
 8003494:	e00a      	b.n	80034ac <HAL_GPIO_Init+0x244>
 8003496:	2305      	movs	r3, #5
 8003498:	e008      	b.n	80034ac <HAL_GPIO_Init+0x244>
 800349a:	2304      	movs	r3, #4
 800349c:	e006      	b.n	80034ac <HAL_GPIO_Init+0x244>
 800349e:	2303      	movs	r3, #3
 80034a0:	e004      	b.n	80034ac <HAL_GPIO_Init+0x244>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e002      	b.n	80034ac <HAL_GPIO_Init+0x244>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <HAL_GPIO_Init+0x244>
 80034aa:	2300      	movs	r3, #0
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	f002 0203 	and.w	r2, r2, #3
 80034b2:	0092      	lsls	r2, r2, #2
 80034b4:	4093      	lsls	r3, r2
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034bc:	4936      	ldr	r1, [pc, #216]	; (8003598 <HAL_GPIO_Init+0x330>)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	089b      	lsrs	r3, r3, #2
 80034c2:	3302      	adds	r3, #2
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80034ca:	4b3a      	ldr	r3, [pc, #232]	; (80035b4 <HAL_GPIO_Init+0x34c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	43db      	mvns	r3, r3
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4013      	ands	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034ee:	4a31      	ldr	r2, [pc, #196]	; (80035b4 <HAL_GPIO_Init+0x34c>)
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80034f4:	4b2f      	ldr	r3, [pc, #188]	; (80035b4 <HAL_GPIO_Init+0x34c>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4013      	ands	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003518:	4a26      	ldr	r2, [pc, #152]	; (80035b4 <HAL_GPIO_Init+0x34c>)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800351e:	4b25      	ldr	r3, [pc, #148]	; (80035b4 <HAL_GPIO_Init+0x34c>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	43db      	mvns	r3, r3
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4013      	ands	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003542:	4a1c      	ldr	r2, [pc, #112]	; (80035b4 <HAL_GPIO_Init+0x34c>)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003548:	4b1a      	ldr	r3, [pc, #104]	; (80035b4 <HAL_GPIO_Init+0x34c>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	43db      	mvns	r3, r3
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4013      	ands	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800356c:	4a11      	ldr	r2, [pc, #68]	; (80035b4 <HAL_GPIO_Init+0x34c>)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	3301      	adds	r3, #1
 8003576:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	fa22 f303 	lsr.w	r3, r2, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	f47f ae78 	bne.w	8003278 <HAL_GPIO_Init+0x10>
  }
}
 8003588:	bf00      	nop
 800358a:	371c      	adds	r7, #28
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	40021000 	.word	0x40021000
 8003598:	40010000 	.word	0x40010000
 800359c:	48000400 	.word	0x48000400
 80035a0:	48000800 	.word	0x48000800
 80035a4:	48000c00 	.word	0x48000c00
 80035a8:	48001000 	.word	0x48001000
 80035ac:	48001400 	.word	0x48001400
 80035b0:	48001800 	.word	0x48001800
 80035b4:	40010400 	.word	0x40010400

080035b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	807b      	strh	r3, [r7, #2]
 80035c4:	4613      	mov	r3, r2
 80035c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035c8:	787b      	ldrb	r3, [r7, #1]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035ce:	887a      	ldrh	r2, [r7, #2]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035d4:	e002      	b.n	80035dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035d6:	887a      	ldrh	r2, [r7, #2]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e081      	b.n	80036fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d106      	bne.n	8003614 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7fd fc74 	bl	8000efc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2224      	movs	r2, #36	; 0x24
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0201 	bic.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003638:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003648:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d107      	bne.n	8003662 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	e006      	b.n	8003670 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800366e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d104      	bne.n	8003682 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003680:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003694:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	ea42 0103 	orr.w	r1, r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	021a      	lsls	r2, r3, #8
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69d9      	ldr	r1, [r3, #28]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1a      	ldr	r2, [r3, #32]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b20      	cmp	r3, #32
 800371a:	d138      	bne.n	800378e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003726:	2302      	movs	r3, #2
 8003728:	e032      	b.n	8003790 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2224      	movs	r2, #36	; 0x24
 8003736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0201 	bic.w	r2, r2, #1
 8003748:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003758:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6819      	ldr	r1, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 0201 	orr.w	r2, r2, #1
 8003778:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2220      	movs	r2, #32
 800377e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	e000      	b.n	8003790 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800378e:	2302      	movs	r3, #2
  }
}
 8003790:	4618      	mov	r0, r3
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d139      	bne.n	8003826 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037bc:	2302      	movs	r3, #2
 80037be:	e033      	b.n	8003828 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2224      	movs	r2, #36	; 0x24
 80037cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	021b      	lsls	r3, r3, #8
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0201 	orr.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	e000      	b.n	8003828 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003826:	2302      	movs	r3, #2
  }
}
 8003828:	4618      	mov	r0, r3
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003838:	4b04      	ldr	r3, [pc, #16]	; (800384c <HAL_PWREx_GetVoltageRange+0x18>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003840:	4618      	mov	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40007000 	.word	0x40007000

08003850 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800385e:	d130      	bne.n	80038c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003860:	4b23      	ldr	r3, [pc, #140]	; (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800386c:	d038      	beq.n	80038e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800386e:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003876:	4a1e      	ldr	r2, [pc, #120]	; (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003878:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800387c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800387e:	4b1d      	ldr	r3, [pc, #116]	; (80038f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2232      	movs	r2, #50	; 0x32
 8003884:	fb02 f303 	mul.w	r3, r2, r3
 8003888:	4a1b      	ldr	r2, [pc, #108]	; (80038f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	0c9b      	lsrs	r3, r3, #18
 8003890:	3301      	adds	r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003894:	e002      	b.n	800389c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3b01      	subs	r3, #1
 800389a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800389c:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a8:	d102      	bne.n	80038b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1f2      	bne.n	8003896 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038b0:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038bc:	d110      	bne.n	80038e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e00f      	b.n	80038e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038c2:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ce:	d007      	beq.n	80038e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038d0:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038d8:	4a05      	ldr	r2, [pc, #20]	; (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	40007000 	.word	0x40007000
 80038f4:	20000000 	.word	0x20000000
 80038f8:	431bde83 	.word	0x431bde83

080038fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e39d      	b.n	800404a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800390e:	4ba4      	ldr	r3, [pc, #656]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003918:	4ba1      	ldr	r3, [pc, #644]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 80e1 	beq.w	8003af2 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <HAL_RCC_OscConfig+0x4a>
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b0c      	cmp	r3, #12
 800393a:	f040 8088 	bne.w	8003a4e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2b01      	cmp	r3, #1
 8003942:	f040 8084 	bne.w	8003a4e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003946:	4b96      	ldr	r3, [pc, #600]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_RCC_OscConfig+0x62>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e375      	b.n	800404a <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1a      	ldr	r2, [r3, #32]
 8003962:	4b8f      	ldr	r3, [pc, #572]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b00      	cmp	r3, #0
 800396c:	d004      	beq.n	8003978 <HAL_RCC_OscConfig+0x7c>
 800396e:	4b8c      	ldr	r3, [pc, #560]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003976:	e005      	b.n	8003984 <HAL_RCC_OscConfig+0x88>
 8003978:	4b89      	ldr	r3, [pc, #548]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 800397a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800397e:	091b      	lsrs	r3, r3, #4
 8003980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003984:	4293      	cmp	r3, r2
 8003986:	d223      	bcs.n	80039d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	4618      	mov	r0, r3
 800398e:	f000 fd09 	bl	80043a4 <RCC_SetFlashLatencyFromMSIRange>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e356      	b.n	800404a <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800399c:	4b80      	ldr	r3, [pc, #512]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a7f      	ldr	r2, [pc, #508]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 80039a2:	f043 0308 	orr.w	r3, r3, #8
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	4b7d      	ldr	r3, [pc, #500]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	497a      	ldr	r1, [pc, #488]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ba:	4b79      	ldr	r3, [pc, #484]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	021b      	lsls	r3, r3, #8
 80039c8:	4975      	ldr	r1, [pc, #468]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]
 80039ce:	e022      	b.n	8003a16 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039d0:	4b73      	ldr	r3, [pc, #460]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a72      	ldr	r2, [pc, #456]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 80039d6:	f043 0308 	orr.w	r3, r3, #8
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	4b70      	ldr	r3, [pc, #448]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	496d      	ldr	r1, [pc, #436]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ee:	4b6c      	ldr	r3, [pc, #432]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	021b      	lsls	r3, r3, #8
 80039fc:	4968      	ldr	r1, [pc, #416]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 fccc 	bl	80043a4 <RCC_SetFlashLatencyFromMSIRange>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e319      	b.n	800404a <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a16:	f000 fc03 	bl	8004220 <HAL_RCC_GetSysClockFreq>
 8003a1a:	4601      	mov	r1, r0
 8003a1c:	4b60      	ldr	r3, [pc, #384]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	091b      	lsrs	r3, r3, #4
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	4a5f      	ldr	r2, [pc, #380]	; (8003ba4 <HAL_RCC_OscConfig+0x2a8>)
 8003a28:	5cd3      	ldrb	r3, [r2, r3]
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	fa21 f303 	lsr.w	r3, r1, r3
 8003a32:	4a5d      	ldr	r2, [pc, #372]	; (8003ba8 <HAL_RCC_OscConfig+0x2ac>)
 8003a34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a36:	4b5d      	ldr	r3, [pc, #372]	; (8003bac <HAL_RCC_OscConfig+0x2b0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fe f962 	bl	8001d04 <HAL_InitTick>
 8003a40:	4603      	mov	r3, r0
 8003a42:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d052      	beq.n	8003af0 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	e2fd      	b.n	800404a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d032      	beq.n	8003abc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a56:	4b52      	ldr	r3, [pc, #328]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a51      	ldr	r2, [pc, #324]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a62:	f7fe f99b 	bl	8001d9c <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a6a:	f7fe f997 	bl	8001d9c <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e2e6      	b.n	800404a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a7c:	4b48      	ldr	r3, [pc, #288]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a88:	4b45      	ldr	r3, [pc, #276]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a44      	ldr	r2, [pc, #272]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003a8e:	f043 0308 	orr.w	r3, r3, #8
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	4b42      	ldr	r3, [pc, #264]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	493f      	ldr	r1, [pc, #252]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aa6:	4b3e      	ldr	r3, [pc, #248]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	021b      	lsls	r3, r3, #8
 8003ab4:	493a      	ldr	r1, [pc, #232]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	604b      	str	r3, [r1, #4]
 8003aba:	e01a      	b.n	8003af2 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003abc:	4b38      	ldr	r3, [pc, #224]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a37      	ldr	r2, [pc, #220]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003ac2:	f023 0301 	bic.w	r3, r3, #1
 8003ac6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ac8:	f7fe f968 	bl	8001d9c <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ad0:	f7fe f964 	bl	8001d9c <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e2b3      	b.n	800404a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ae2:	4b2f      	ldr	r3, [pc, #188]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x1d4>
 8003aee:	e000      	b.n	8003af2 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003af0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d074      	beq.n	8003be8 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d005      	beq.n	8003b10 <HAL_RCC_OscConfig+0x214>
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2b0c      	cmp	r3, #12
 8003b08:	d10e      	bne.n	8003b28 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d10b      	bne.n	8003b28 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b10:	4b23      	ldr	r3, [pc, #140]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d064      	beq.n	8003be6 <HAL_RCC_OscConfig+0x2ea>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d160      	bne.n	8003be6 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e290      	b.n	800404a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b30:	d106      	bne.n	8003b40 <HAL_RCC_OscConfig+0x244>
 8003b32:	4b1b      	ldr	r3, [pc, #108]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1a      	ldr	r2, [pc, #104]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	e01d      	b.n	8003b7c <HAL_RCC_OscConfig+0x280>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b48:	d10c      	bne.n	8003b64 <HAL_RCC_OscConfig+0x268>
 8003b4a:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a14      	ldr	r2, [pc, #80]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a11      	ldr	r2, [pc, #68]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	e00b      	b.n	8003b7c <HAL_RCC_OscConfig+0x280>
 8003b64:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a0d      	ldr	r2, [pc, #52]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a0a      	ldr	r2, [pc, #40]	; (8003ba0 <HAL_RCC_OscConfig+0x2a4>)
 8003b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d01c      	beq.n	8003bbe <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7fe f90a 	bl	8001d9c <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b8a:	e011      	b.n	8003bb0 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7fe f906 	bl	8001d9c <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	; 0x64
 8003b98:	d90a      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e255      	b.n	800404a <HAL_RCC_OscConfig+0x74e>
 8003b9e:	bf00      	nop
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	08007570 	.word	0x08007570
 8003ba8:	20000000 	.word	0x20000000
 8003bac:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bb0:	4bae      	ldr	r3, [pc, #696]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0e7      	beq.n	8003b8c <HAL_RCC_OscConfig+0x290>
 8003bbc:	e014      	b.n	8003be8 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbe:	f7fe f8ed 	bl	8001d9c <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc6:	f7fe f8e9 	bl	8001d9c <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b64      	cmp	r3, #100	; 0x64
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e238      	b.n	800404a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bd8:	4ba4      	ldr	r3, [pc, #656]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1f0      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x2ca>
 8003be4:	e000      	b.n	8003be8 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d060      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d005      	beq.n	8003c06 <HAL_RCC_OscConfig+0x30a>
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	2b0c      	cmp	r3, #12
 8003bfe:	d119      	bne.n	8003c34 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d116      	bne.n	8003c34 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c06:	4b99      	ldr	r3, [pc, #612]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d005      	beq.n	8003c1e <HAL_RCC_OscConfig+0x322>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e215      	b.n	800404a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1e:	4b93      	ldr	r3, [pc, #588]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	061b      	lsls	r3, r3, #24
 8003c2c:	498f      	ldr	r1, [pc, #572]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c32:	e040      	b.n	8003cb6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d023      	beq.n	8003c84 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c3c:	4b8b      	ldr	r3, [pc, #556]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a8a      	ldr	r2, [pc, #552]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c48:	f7fe f8a8 	bl	8001d9c <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c50:	f7fe f8a4 	bl	8001d9c <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e1f3      	b.n	800404a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c62:	4b82      	ldr	r3, [pc, #520]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6e:	4b7f      	ldr	r3, [pc, #508]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	061b      	lsls	r3, r3, #24
 8003c7c:	497b      	ldr	r1, [pc, #492]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	604b      	str	r3, [r1, #4]
 8003c82:	e018      	b.n	8003cb6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c84:	4b79      	ldr	r3, [pc, #484]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a78      	ldr	r2, [pc, #480]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003c8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7fe f884 	bl	8001d9c <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c98:	f7fe f880 	bl	8001d9c <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e1cf      	b.n	800404a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003caa:	4b70      	ldr	r3, [pc, #448]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d03c      	beq.n	8003d3c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d01c      	beq.n	8003d04 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cca:	4b68      	ldr	r3, [pc, #416]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cd0:	4a66      	ldr	r2, [pc, #408]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003cd2:	f043 0301 	orr.w	r3, r3, #1
 8003cd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cda:	f7fe f85f 	bl	8001d9c <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce2:	f7fe f85b 	bl	8001d9c <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e1aa      	b.n	800404a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cf4:	4b5d      	ldr	r3, [pc, #372]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0ef      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x3e6>
 8003d02:	e01b      	b.n	8003d3c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d04:	4b59      	ldr	r3, [pc, #356]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d0a:	4a58      	ldr	r2, [pc, #352]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003d0c:	f023 0301 	bic.w	r3, r3, #1
 8003d10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d14:	f7fe f842 	bl	8001d9c <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d1c:	f7fe f83e 	bl	8001d9c <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e18d      	b.n	800404a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d2e:	4b4f      	ldr	r3, [pc, #316]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1ef      	bne.n	8003d1c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 80a5 	beq.w	8003e94 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d4e:	4b47      	ldr	r3, [pc, #284]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10d      	bne.n	8003d76 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d5a:	4b44      	ldr	r3, [pc, #272]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5e:	4a43      	ldr	r2, [pc, #268]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d64:	6593      	str	r3, [r2, #88]	; 0x58
 8003d66:	4b41      	ldr	r3, [pc, #260]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d72:	2301      	movs	r3, #1
 8003d74:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d76:	4b3e      	ldr	r3, [pc, #248]	; (8003e70 <HAL_RCC_OscConfig+0x574>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d118      	bne.n	8003db4 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d82:	4b3b      	ldr	r3, [pc, #236]	; (8003e70 <HAL_RCC_OscConfig+0x574>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a3a      	ldr	r2, [pc, #232]	; (8003e70 <HAL_RCC_OscConfig+0x574>)
 8003d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d8e:	f7fe f805 	bl	8001d9c <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d96:	f7fe f801 	bl	8001d9c <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e150      	b.n	800404a <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003da8:	4b31      	ldr	r3, [pc, #196]	; (8003e70 <HAL_RCC_OscConfig+0x574>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d108      	bne.n	8003dce <HAL_RCC_OscConfig+0x4d2>
 8003dbc:	4b2b      	ldr	r3, [pc, #172]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc2:	4a2a      	ldr	r2, [pc, #168]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dcc:	e024      	b.n	8003e18 <HAL_RCC_OscConfig+0x51c>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b05      	cmp	r3, #5
 8003dd4:	d110      	bne.n	8003df8 <HAL_RCC_OscConfig+0x4fc>
 8003dd6:	4b25      	ldr	r3, [pc, #148]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ddc:	4a23      	ldr	r2, [pc, #140]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003dde:	f043 0304 	orr.w	r3, r3, #4
 8003de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003de6:	4b21      	ldr	r3, [pc, #132]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dec:	4a1f      	ldr	r2, [pc, #124]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003dee:	f043 0301 	orr.w	r3, r3, #1
 8003df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003df6:	e00f      	b.n	8003e18 <HAL_RCC_OscConfig+0x51c>
 8003df8:	4b1c      	ldr	r3, [pc, #112]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfe:	4a1b      	ldr	r2, [pc, #108]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003e00:	f023 0301 	bic.w	r3, r3, #1
 8003e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e08:	4b18      	ldr	r3, [pc, #96]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0e:	4a17      	ldr	r2, [pc, #92]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003e10:	f023 0304 	bic.w	r3, r3, #4
 8003e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d016      	beq.n	8003e4e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e20:	f7fd ffbc 	bl	8001d9c <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e26:	e00a      	b.n	8003e3e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e28:	f7fd ffb8 	bl	8001d9c <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e105      	b.n	800404a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e3e:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <HAL_RCC_OscConfig+0x570>)
 8003e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0ed      	beq.n	8003e28 <HAL_RCC_OscConfig+0x52c>
 8003e4c:	e019      	b.n	8003e82 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4e:	f7fd ffa5 	bl	8001d9c <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e54:	e00e      	b.n	8003e74 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e56:	f7fd ffa1 	bl	8001d9c <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d905      	bls.n	8003e74 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e0ee      	b.n	800404a <HAL_RCC_OscConfig+0x74e>
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e74:	4b77      	ldr	r3, [pc, #476]	; (8004054 <HAL_RCC_OscConfig+0x758>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1e9      	bne.n	8003e56 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e82:	7ffb      	ldrb	r3, [r7, #31]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d105      	bne.n	8003e94 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e88:	4b72      	ldr	r3, [pc, #456]	; (8004054 <HAL_RCC_OscConfig+0x758>)
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8c:	4a71      	ldr	r2, [pc, #452]	; (8004054 <HAL_RCC_OscConfig+0x758>)
 8003e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e92:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 80d5 	beq.w	8004048 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b0c      	cmp	r3, #12
 8003ea2:	f000 808e 	beq.w	8003fc2 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d15b      	bne.n	8003f66 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eae:	4b69      	ldr	r3, [pc, #420]	; (8004054 <HAL_RCC_OscConfig+0x758>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a68      	ldr	r2, [pc, #416]	; (8004054 <HAL_RCC_OscConfig+0x758>)
 8003eb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eba:	f7fd ff6f 	bl	8001d9c <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec2:	f7fd ff6b 	bl	8001d9c <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e0ba      	b.n	800404a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed4:	4b5f      	ldr	r3, [pc, #380]	; (8004054 <HAL_RCC_OscConfig+0x758>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1f0      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ee0:	4b5c      	ldr	r3, [pc, #368]	; (8004054 <HAL_RCC_OscConfig+0x758>)
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	4b5c      	ldr	r3, [pc, #368]	; (8004058 <HAL_RCC_OscConfig+0x75c>)
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ef0:	3a01      	subs	r2, #1
 8003ef2:	0112      	lsls	r2, r2, #4
 8003ef4:	4311      	orrs	r1, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003efa:	0212      	lsls	r2, r2, #8
 8003efc:	4311      	orrs	r1, r2
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f02:	0852      	lsrs	r2, r2, #1
 8003f04:	3a01      	subs	r2, #1
 8003f06:	0552      	lsls	r2, r2, #21
 8003f08:	4311      	orrs	r1, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f0e:	0852      	lsrs	r2, r2, #1
 8003f10:	3a01      	subs	r2, #1
 8003f12:	0652      	lsls	r2, r2, #25
 8003f14:	4311      	orrs	r1, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f1a:	0912      	lsrs	r2, r2, #4
 8003f1c:	0452      	lsls	r2, r2, #17
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	494c      	ldr	r1, [pc, #304]	; (8004054 <HAL_RCC_OscConfig+0x758>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f26:	4b4b      	ldr	r3, [pc, #300]	; (8004054 <HAL_RCC_OscConfig+0x758>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a4a      	ldr	r2, [pc, #296]	; (8004054 <HAL_RCC_OscConfig+0x758>)
 8003f2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f30:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f32:	4b48      	ldr	r3, [pc, #288]	; (8004054 <HAL_RCC_OscConfig+0x758>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	4a47      	ldr	r2, [pc, #284]	; (8004054 <HAL_RCC_OscConfig+0x758>)
 8003f38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f3c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3e:	f7fd ff2d 	bl	8001d9c <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f46:	f7fd ff29 	bl	8001d9c <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e078      	b.n	800404a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f58:	4b3e      	ldr	r3, [pc, #248]	; (8004054 <HAL_RCC_OscConfig+0x758>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0f0      	beq.n	8003f46 <HAL_RCC_OscConfig+0x64a>
 8003f64:	e070      	b.n	8004048 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f66:	4b3b      	ldr	r3, [pc, #236]	; (8004054 <HAL_RCC_OscConfig+0x758>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a3a      	ldr	r2, [pc, #232]	; (8004054 <HAL_RCC_OscConfig+0x758>)
 8003f6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f70:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003f72:	4b38      	ldr	r3, [pc, #224]	; (8004054 <HAL_RCC_OscConfig+0x758>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d105      	bne.n	8003f8a <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f7e:	4b35      	ldr	r3, [pc, #212]	; (8004054 <HAL_RCC_OscConfig+0x758>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	4a34      	ldr	r2, [pc, #208]	; (8004054 <HAL_RCC_OscConfig+0x758>)
 8003f84:	f023 0303 	bic.w	r3, r3, #3
 8003f88:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f8a:	4b32      	ldr	r3, [pc, #200]	; (8004054 <HAL_RCC_OscConfig+0x758>)
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	4a31      	ldr	r2, [pc, #196]	; (8004054 <HAL_RCC_OscConfig+0x758>)
 8003f90:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f98:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9a:	f7fd feff 	bl	8001d9c <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa2:	f7fd fefb 	bl	8001d9c <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e04a      	b.n	800404a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fb4:	4b27      	ldr	r3, [pc, #156]	; (8004054 <HAL_RCC_OscConfig+0x758>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f0      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x6a6>
 8003fc0:	e042      	b.n	8004048 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d101      	bne.n	8003fce <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e03d      	b.n	800404a <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003fce:	4b21      	ldr	r3, [pc, #132]	; (8004054 <HAL_RCC_OscConfig+0x758>)
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f003 0203 	and.w	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d130      	bne.n	8004044 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	3b01      	subs	r3, #1
 8003fee:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d127      	bne.n	8004044 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffe:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004000:	429a      	cmp	r2, r3
 8004002:	d11f      	bne.n	8004044 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800400e:	2a07      	cmp	r2, #7
 8004010:	bf14      	ite	ne
 8004012:	2201      	movne	r2, #1
 8004014:	2200      	moveq	r2, #0
 8004016:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004018:	4293      	cmp	r3, r2
 800401a:	d113      	bne.n	8004044 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004026:	085b      	lsrs	r3, r3, #1
 8004028:	3b01      	subs	r3, #1
 800402a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800402c:	429a      	cmp	r2, r3
 800402e:	d109      	bne.n	8004044 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	085b      	lsrs	r3, r3, #1
 800403c:	3b01      	subs	r3, #1
 800403e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3720      	adds	r7, #32
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40021000 	.word	0x40021000
 8004058:	f99d808c 	.word	0xf99d808c

0800405c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0c8      	b.n	8004202 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004070:	4b66      	ldr	r3, [pc, #408]	; (800420c <HAL_RCC_ClockConfig+0x1b0>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d910      	bls.n	80040a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	4b63      	ldr	r3, [pc, #396]	; (800420c <HAL_RCC_ClockConfig+0x1b0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f023 0207 	bic.w	r2, r3, #7
 8004086:	4961      	ldr	r1, [pc, #388]	; (800420c <HAL_RCC_ClockConfig+0x1b0>)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	4313      	orrs	r3, r2
 800408c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b5f      	ldr	r3, [pc, #380]	; (800420c <HAL_RCC_ClockConfig+0x1b0>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0b0      	b.n	8004202 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d04c      	beq.n	8004146 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	d107      	bne.n	80040c4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b4:	4b56      	ldr	r3, [pc, #344]	; (8004210 <HAL_RCC_ClockConfig+0x1b4>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d121      	bne.n	8004104 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e09e      	b.n	8004202 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d107      	bne.n	80040dc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040cc:	4b50      	ldr	r3, [pc, #320]	; (8004210 <HAL_RCC_ClockConfig+0x1b4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d115      	bne.n	8004104 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e092      	b.n	8004202 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d107      	bne.n	80040f4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040e4:	4b4a      	ldr	r3, [pc, #296]	; (8004210 <HAL_RCC_ClockConfig+0x1b4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d109      	bne.n	8004104 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e086      	b.n	8004202 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040f4:	4b46      	ldr	r3, [pc, #280]	; (8004210 <HAL_RCC_ClockConfig+0x1b4>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e07e      	b.n	8004202 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004104:	4b42      	ldr	r3, [pc, #264]	; (8004210 <HAL_RCC_ClockConfig+0x1b4>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f023 0203 	bic.w	r2, r3, #3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	493f      	ldr	r1, [pc, #252]	; (8004210 <HAL_RCC_ClockConfig+0x1b4>)
 8004112:	4313      	orrs	r3, r2
 8004114:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004116:	f7fd fe41 	bl	8001d9c <HAL_GetTick>
 800411a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411c:	e00a      	b.n	8004134 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800411e:	f7fd fe3d 	bl	8001d9c <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f241 3288 	movw	r2, #5000	; 0x1388
 800412c:	4293      	cmp	r3, r2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e066      	b.n	8004202 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004134:	4b36      	ldr	r3, [pc, #216]	; (8004210 <HAL_RCC_ClockConfig+0x1b4>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 020c 	and.w	r2, r3, #12
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	429a      	cmp	r2, r3
 8004144:	d1eb      	bne.n	800411e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d008      	beq.n	8004164 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004152:	4b2f      	ldr	r3, [pc, #188]	; (8004210 <HAL_RCC_ClockConfig+0x1b4>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	492c      	ldr	r1, [pc, #176]	; (8004210 <HAL_RCC_ClockConfig+0x1b4>)
 8004160:	4313      	orrs	r3, r2
 8004162:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004164:	4b29      	ldr	r3, [pc, #164]	; (800420c <HAL_RCC_ClockConfig+0x1b0>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d210      	bcs.n	8004194 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004172:	4b26      	ldr	r3, [pc, #152]	; (800420c <HAL_RCC_ClockConfig+0x1b0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 0207 	bic.w	r2, r3, #7
 800417a:	4924      	ldr	r1, [pc, #144]	; (800420c <HAL_RCC_ClockConfig+0x1b0>)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	4313      	orrs	r3, r2
 8004180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004182:	4b22      	ldr	r3, [pc, #136]	; (800420c <HAL_RCC_ClockConfig+0x1b0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d001      	beq.n	8004194 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e036      	b.n	8004202 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041a0:	4b1b      	ldr	r3, [pc, #108]	; (8004210 <HAL_RCC_ClockConfig+0x1b4>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	4918      	ldr	r1, [pc, #96]	; (8004210 <HAL_RCC_ClockConfig+0x1b4>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d009      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041be:	4b14      	ldr	r3, [pc, #80]	; (8004210 <HAL_RCC_ClockConfig+0x1b4>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	4910      	ldr	r1, [pc, #64]	; (8004210 <HAL_RCC_ClockConfig+0x1b4>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041d2:	f000 f825 	bl	8004220 <HAL_RCC_GetSysClockFreq>
 80041d6:	4601      	mov	r1, r0
 80041d8:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <HAL_RCC_ClockConfig+0x1b4>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	091b      	lsrs	r3, r3, #4
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	4a0c      	ldr	r2, [pc, #48]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 80041e4:	5cd3      	ldrb	r3, [r2, r3]
 80041e6:	f003 031f 	and.w	r3, r3, #31
 80041ea:	fa21 f303 	lsr.w	r3, r1, r3
 80041ee:	4a0a      	ldr	r2, [pc, #40]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041f2:	4b0a      	ldr	r3, [pc, #40]	; (800421c <HAL_RCC_ClockConfig+0x1c0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fd fd84 	bl	8001d04 <HAL_InitTick>
 80041fc:	4603      	mov	r3, r0
 80041fe:	72fb      	strb	r3, [r7, #11]

  return status;
 8004200:	7afb      	ldrb	r3, [r7, #11]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	40022000 	.word	0x40022000
 8004210:	40021000 	.word	0x40021000
 8004214:	08007570 	.word	0x08007570
 8004218:	20000000 	.word	0x20000000
 800421c:	20000004 	.word	0x20000004

08004220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004220:	b480      	push	{r7}
 8004222:	b089      	sub	sp, #36	; 0x24
 8004224:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	61fb      	str	r3, [r7, #28]
 800422a:	2300      	movs	r3, #0
 800422c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800422e:	4b3d      	ldr	r3, [pc, #244]	; (8004324 <HAL_RCC_GetSysClockFreq+0x104>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 030c 	and.w	r3, r3, #12
 8004236:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004238:	4b3a      	ldr	r3, [pc, #232]	; (8004324 <HAL_RCC_GetSysClockFreq+0x104>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0303 	and.w	r3, r3, #3
 8004240:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <HAL_RCC_GetSysClockFreq+0x34>
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	2b0c      	cmp	r3, #12
 800424c:	d121      	bne.n	8004292 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d11e      	bne.n	8004292 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004254:	4b33      	ldr	r3, [pc, #204]	; (8004324 <HAL_RCC_GetSysClockFreq+0x104>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b00      	cmp	r3, #0
 800425e:	d107      	bne.n	8004270 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004260:	4b30      	ldr	r3, [pc, #192]	; (8004324 <HAL_RCC_GetSysClockFreq+0x104>)
 8004262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004266:	0a1b      	lsrs	r3, r3, #8
 8004268:	f003 030f 	and.w	r3, r3, #15
 800426c:	61fb      	str	r3, [r7, #28]
 800426e:	e005      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004270:	4b2c      	ldr	r3, [pc, #176]	; (8004324 <HAL_RCC_GetSysClockFreq+0x104>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	091b      	lsrs	r3, r3, #4
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800427c:	4a2a      	ldr	r2, [pc, #168]	; (8004328 <HAL_RCC_GetSysClockFreq+0x108>)
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004284:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10d      	bne.n	80042a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004290:	e00a      	b.n	80042a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	2b04      	cmp	r3, #4
 8004296:	d102      	bne.n	800429e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004298:	4b24      	ldr	r3, [pc, #144]	; (800432c <HAL_RCC_GetSysClockFreq+0x10c>)
 800429a:	61bb      	str	r3, [r7, #24]
 800429c:	e004      	b.n	80042a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d101      	bne.n	80042a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042a4:	4b22      	ldr	r3, [pc, #136]	; (8004330 <HAL_RCC_GetSysClockFreq+0x110>)
 80042a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	2b0c      	cmp	r3, #12
 80042ac:	d133      	bne.n	8004316 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042ae:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <HAL_RCC_GetSysClockFreq+0x104>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d002      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0xa4>
 80042be:	2b03      	cmp	r3, #3
 80042c0:	d003      	beq.n	80042ca <HAL_RCC_GetSysClockFreq+0xaa>
 80042c2:	e005      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042c4:	4b19      	ldr	r3, [pc, #100]	; (800432c <HAL_RCC_GetSysClockFreq+0x10c>)
 80042c6:	617b      	str	r3, [r7, #20]
      break;
 80042c8:	e005      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042ca:	4b19      	ldr	r3, [pc, #100]	; (8004330 <HAL_RCC_GetSysClockFreq+0x110>)
 80042cc:	617b      	str	r3, [r7, #20]
      break;
 80042ce:	e002      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	617b      	str	r3, [r7, #20]
      break;
 80042d4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042d6:	4b13      	ldr	r3, [pc, #76]	; (8004324 <HAL_RCC_GetSysClockFreq+0x104>)
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	091b      	lsrs	r3, r3, #4
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	3301      	adds	r3, #1
 80042e2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042e4:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <HAL_RCC_GetSysClockFreq+0x104>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	0a1b      	lsrs	r3, r3, #8
 80042ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	fb02 f203 	mul.w	r2, r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042fc:	4b09      	ldr	r3, [pc, #36]	; (8004324 <HAL_RCC_GetSysClockFreq+0x104>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	0e5b      	lsrs	r3, r3, #25
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	3301      	adds	r3, #1
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	fbb2 f3f3 	udiv	r3, r2, r3
 8004314:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004316:	69bb      	ldr	r3, [r7, #24]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3724      	adds	r7, #36	; 0x24
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	40021000 	.word	0x40021000
 8004328:	08007588 	.word	0x08007588
 800432c:	00f42400 	.word	0x00f42400
 8004330:	007a1200 	.word	0x007a1200

08004334 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004338:	4b03      	ldr	r3, [pc, #12]	; (8004348 <HAL_RCC_GetHCLKFreq+0x14>)
 800433a:	681b      	ldr	r3, [r3, #0]
}
 800433c:	4618      	mov	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	20000000 	.word	0x20000000

0800434c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004350:	f7ff fff0 	bl	8004334 <HAL_RCC_GetHCLKFreq>
 8004354:	4601      	mov	r1, r0
 8004356:	4b06      	ldr	r3, [pc, #24]	; (8004370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	0a1b      	lsrs	r3, r3, #8
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	4a04      	ldr	r2, [pc, #16]	; (8004374 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004362:	5cd3      	ldrb	r3, [r2, r3]
 8004364:	f003 031f 	and.w	r3, r3, #31
 8004368:	fa21 f303 	lsr.w	r3, r1, r3
}
 800436c:	4618      	mov	r0, r3
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40021000 	.word	0x40021000
 8004374:	08007580 	.word	0x08007580

08004378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800437c:	f7ff ffda 	bl	8004334 <HAL_RCC_GetHCLKFreq>
 8004380:	4601      	mov	r1, r0
 8004382:	4b06      	ldr	r3, [pc, #24]	; (800439c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	0adb      	lsrs	r3, r3, #11
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	4a04      	ldr	r2, [pc, #16]	; (80043a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800438e:	5cd3      	ldrb	r3, [r2, r3]
 8004390:	f003 031f 	and.w	r3, r3, #31
 8004394:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004398:	4618      	mov	r0, r3
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40021000 	.word	0x40021000
 80043a0:	08007580 	.word	0x08007580

080043a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043ac:	2300      	movs	r3, #0
 80043ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043b0:	4b2a      	ldr	r3, [pc, #168]	; (800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043bc:	f7ff fa3a 	bl	8003834 <HAL_PWREx_GetVoltageRange>
 80043c0:	6178      	str	r0, [r7, #20]
 80043c2:	e014      	b.n	80043ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043c4:	4b25      	ldr	r3, [pc, #148]	; (800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c8:	4a24      	ldr	r2, [pc, #144]	; (800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ce:	6593      	str	r3, [r2, #88]	; 0x58
 80043d0:	4b22      	ldr	r3, [pc, #136]	; (800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043dc:	f7ff fa2a 	bl	8003834 <HAL_PWREx_GetVoltageRange>
 80043e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043e2:	4b1e      	ldr	r3, [pc, #120]	; (800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e6:	4a1d      	ldr	r2, [pc, #116]	; (800445c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f4:	d10b      	bne.n	800440e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b80      	cmp	r3, #128	; 0x80
 80043fa:	d919      	bls.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2ba0      	cmp	r3, #160	; 0xa0
 8004400:	d902      	bls.n	8004408 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004402:	2302      	movs	r3, #2
 8004404:	613b      	str	r3, [r7, #16]
 8004406:	e013      	b.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004408:	2301      	movs	r3, #1
 800440a:	613b      	str	r3, [r7, #16]
 800440c:	e010      	b.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b80      	cmp	r3, #128	; 0x80
 8004412:	d902      	bls.n	800441a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004414:	2303      	movs	r3, #3
 8004416:	613b      	str	r3, [r7, #16]
 8004418:	e00a      	b.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b80      	cmp	r3, #128	; 0x80
 800441e:	d102      	bne.n	8004426 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004420:	2302      	movs	r3, #2
 8004422:	613b      	str	r3, [r7, #16]
 8004424:	e004      	b.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b70      	cmp	r3, #112	; 0x70
 800442a:	d101      	bne.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800442c:	2301      	movs	r3, #1
 800442e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004430:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f023 0207 	bic.w	r2, r3, #7
 8004438:	4909      	ldr	r1, [pc, #36]	; (8004460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004440:	4b07      	ldr	r3, [pc, #28]	; (8004460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	429a      	cmp	r2, r3
 800444c:	d001      	beq.n	8004452 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e000      	b.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40021000 	.word	0x40021000
 8004460:	40022000 	.word	0x40022000

08004464 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800446c:	2300      	movs	r3, #0
 800446e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004470:	2300      	movs	r3, #0
 8004472:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800447c:	2b00      	cmp	r3, #0
 800447e:	d03f      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004488:	d01c      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800448a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800448e:	d802      	bhi.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00e      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004494:	e01f      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004496:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800449a:	d003      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800449c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044a0:	d01c      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x78>
 80044a2:	e018      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044a4:	4b85      	ldr	r3, [pc, #532]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	4a84      	ldr	r2, [pc, #528]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044b0:	e015      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3304      	adds	r3, #4
 80044b6:	2100      	movs	r1, #0
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fab9 	bl	8004a30 <RCCEx_PLLSAI1_Config>
 80044be:	4603      	mov	r3, r0
 80044c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044c2:	e00c      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3320      	adds	r3, #32
 80044c8:	2100      	movs	r1, #0
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fba0 	bl	8004c10 <RCCEx_PLLSAI2_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044d4:	e003      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	74fb      	strb	r3, [r7, #19]
      break;
 80044da:	e000      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80044dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044de:	7cfb      	ldrb	r3, [r7, #19]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10b      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044e4:	4b75      	ldr	r3, [pc, #468]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044f2:	4972      	ldr	r1, [pc, #456]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044fa:	e001      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fc:	7cfb      	ldrb	r3, [r7, #19]
 80044fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d03f      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004514:	d01c      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004516:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800451a:	d802      	bhi.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00e      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004520:	e01f      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004522:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004526:	d003      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004528:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800452c:	d01c      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800452e:	e018      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004530:	4b62      	ldr	r3, [pc, #392]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	4a61      	ldr	r2, [pc, #388]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800453a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800453c:	e015      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3304      	adds	r3, #4
 8004542:	2100      	movs	r1, #0
 8004544:	4618      	mov	r0, r3
 8004546:	f000 fa73 	bl	8004a30 <RCCEx_PLLSAI1_Config>
 800454a:	4603      	mov	r3, r0
 800454c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800454e:	e00c      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3320      	adds	r3, #32
 8004554:	2100      	movs	r1, #0
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fb5a 	bl	8004c10 <RCCEx_PLLSAI2_Config>
 800455c:	4603      	mov	r3, r0
 800455e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004560:	e003      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	74fb      	strb	r3, [r7, #19]
      break;
 8004566:	e000      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800456a:	7cfb      	ldrb	r3, [r7, #19]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10b      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004570:	4b52      	ldr	r3, [pc, #328]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004576:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800457e:	494f      	ldr	r1, [pc, #316]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004586:	e001      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004588:	7cfb      	ldrb	r3, [r7, #19]
 800458a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 80a0 	beq.w	80046da <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800459a:	2300      	movs	r3, #0
 800459c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800459e:	4b47      	ldr	r3, [pc, #284]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80045aa:	2301      	movs	r3, #1
 80045ac:	e000      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80045ae:	2300      	movs	r3, #0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00d      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b4:	4b41      	ldr	r3, [pc, #260]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b8:	4a40      	ldr	r2, [pc, #256]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045be:	6593      	str	r3, [r2, #88]	; 0x58
 80045c0:	4b3e      	ldr	r3, [pc, #248]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c8:	60bb      	str	r3, [r7, #8]
 80045ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045cc:	2301      	movs	r3, #1
 80045ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045d0:	4b3b      	ldr	r3, [pc, #236]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a3a      	ldr	r2, [pc, #232]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80045d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045dc:	f7fd fbde 	bl	8001d9c <HAL_GetTick>
 80045e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045e2:	e009      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e4:	f7fd fbda 	bl	8001d9c <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d902      	bls.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	74fb      	strb	r3, [r7, #19]
        break;
 80045f6:	e005      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045f8:	4b31      	ldr	r3, [pc, #196]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0ef      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004604:	7cfb      	ldrb	r3, [r7, #19]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d15c      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800460a:	4b2c      	ldr	r3, [pc, #176]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800460c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004614:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d01f      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	429a      	cmp	r2, r3
 8004626:	d019      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004628:	4b24      	ldr	r3, [pc, #144]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004632:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004634:	4b21      	ldr	r3, [pc, #132]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463a:	4a20      	ldr	r2, [pc, #128]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800463c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004644:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464a:	4a1c      	ldr	r2, [pc, #112]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800464c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004654:	4a19      	ldr	r2, [pc, #100]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d016      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004666:	f7fd fb99 	bl	8001d9c <HAL_GetTick>
 800466a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800466c:	e00b      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466e:	f7fd fb95 	bl	8001d9c <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	f241 3288 	movw	r2, #5000	; 0x1388
 800467c:	4293      	cmp	r3, r2
 800467e:	d902      	bls.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	74fb      	strb	r3, [r7, #19]
            break;
 8004684:	e006      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004686:	4b0d      	ldr	r3, [pc, #52]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0ec      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004694:	7cfb      	ldrb	r3, [r7, #19]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10c      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800469a:	4b08      	ldr	r3, [pc, #32]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800469c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046aa:	4904      	ldr	r1, [pc, #16]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046b2:	e009      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046b4:	7cfb      	ldrb	r3, [r7, #19]
 80046b6:	74bb      	strb	r3, [r7, #18]
 80046b8:	e006      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80046ba:	bf00      	nop
 80046bc:	40021000 	.word	0x40021000
 80046c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c4:	7cfb      	ldrb	r3, [r7, #19]
 80046c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046c8:	7c7b      	ldrb	r3, [r7, #17]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d105      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ce:	4b9e      	ldr	r3, [pc, #632]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d2:	4a9d      	ldr	r2, [pc, #628]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046e6:	4b98      	ldr	r3, [pc, #608]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ec:	f023 0203 	bic.w	r2, r3, #3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	4994      	ldr	r1, [pc, #592]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004708:	4b8f      	ldr	r3, [pc, #572]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800470a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470e:	f023 020c 	bic.w	r2, r3, #12
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004716:	498c      	ldr	r1, [pc, #560]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800472a:	4b87      	ldr	r3, [pc, #540]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004730:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	4983      	ldr	r1, [pc, #524]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800474c:	4b7e      	ldr	r3, [pc, #504]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004752:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475a:	497b      	ldr	r1, [pc, #492]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0310 	and.w	r3, r3, #16
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800476e:	4b76      	ldr	r3, [pc, #472]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477c:	4972      	ldr	r1, [pc, #456]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0320 	and.w	r3, r3, #32
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004790:	4b6d      	ldr	r3, [pc, #436]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004796:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479e:	496a      	ldr	r1, [pc, #424]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047b2:	4b65      	ldr	r3, [pc, #404]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c0:	4961      	ldr	r1, [pc, #388]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047d4:	4b5c      	ldr	r3, [pc, #368]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e2:	4959      	ldr	r1, [pc, #356]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047f6:	4b54      	ldr	r3, [pc, #336]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004804:	4950      	ldr	r1, [pc, #320]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004818:	4b4b      	ldr	r3, [pc, #300]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004826:	4948      	ldr	r1, [pc, #288]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800483a:	4b43      	ldr	r3, [pc, #268]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004840:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004848:	493f      	ldr	r1, [pc, #252]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d028      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800485c:	4b3a      	ldr	r3, [pc, #232]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800485e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004862:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800486a:	4937      	ldr	r1, [pc, #220]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004876:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800487a:	d106      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800487c:	4b32      	ldr	r3, [pc, #200]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4a31      	ldr	r2, [pc, #196]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004882:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004886:	60d3      	str	r3, [r2, #12]
 8004888:	e011      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800488e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004892:	d10c      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3304      	adds	r3, #4
 8004898:	2101      	movs	r1, #1
 800489a:	4618      	mov	r0, r3
 800489c:	f000 f8c8 	bl	8004a30 <RCCEx_PLLSAI1_Config>
 80048a0:	4603      	mov	r3, r0
 80048a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048a4:	7cfb      	ldrb	r3, [r7, #19]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80048aa:	7cfb      	ldrb	r3, [r7, #19]
 80048ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d028      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048ba:	4b23      	ldr	r3, [pc, #140]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c8:	491f      	ldr	r1, [pc, #124]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048d8:	d106      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048da:	4b1b      	ldr	r3, [pc, #108]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	4a1a      	ldr	r2, [pc, #104]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048e4:	60d3      	str	r3, [r2, #12]
 80048e6:	e011      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048f0:	d10c      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	3304      	adds	r3, #4
 80048f6:	2101      	movs	r1, #1
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 f899 	bl	8004a30 <RCCEx_PLLSAI1_Config>
 80048fe:	4603      	mov	r3, r0
 8004900:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004902:	7cfb      	ldrb	r3, [r7, #19]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004908:	7cfb      	ldrb	r3, [r7, #19]
 800490a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d02b      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004918:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004926:	4908      	ldr	r1, [pc, #32]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004932:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004936:	d109      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004938:	4b03      	ldr	r3, [pc, #12]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	4a02      	ldr	r2, [pc, #8]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800493e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004942:	60d3      	str	r3, [r2, #12]
 8004944:	e014      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004946:	bf00      	nop
 8004948:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004950:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004954:	d10c      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3304      	adds	r3, #4
 800495a:	2101      	movs	r1, #1
 800495c:	4618      	mov	r0, r3
 800495e:	f000 f867 	bl	8004a30 <RCCEx_PLLSAI1_Config>
 8004962:	4603      	mov	r3, r0
 8004964:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004966:	7cfb      	ldrb	r3, [r7, #19]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800496c:	7cfb      	ldrb	r3, [r7, #19]
 800496e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d02f      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800497c:	4b2b      	ldr	r3, [pc, #172]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004982:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800498a:	4928      	ldr	r1, [pc, #160]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800499a:	d10d      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3304      	adds	r3, #4
 80049a0:	2102      	movs	r1, #2
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 f844 	bl	8004a30 <RCCEx_PLLSAI1_Config>
 80049a8:	4603      	mov	r3, r0
 80049aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049ac:	7cfb      	ldrb	r3, [r7, #19]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d014      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80049b2:	7cfb      	ldrb	r3, [r7, #19]
 80049b4:	74bb      	strb	r3, [r7, #18]
 80049b6:	e011      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049c0:	d10c      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3320      	adds	r3, #32
 80049c6:	2102      	movs	r1, #2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 f921 	bl	8004c10 <RCCEx_PLLSAI2_Config>
 80049ce:	4603      	mov	r3, r0
 80049d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049d2:	7cfb      	ldrb	r3, [r7, #19]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80049d8:	7cfb      	ldrb	r3, [r7, #19]
 80049da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049e8:	4b10      	ldr	r3, [pc, #64]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049f6:	490d      	ldr	r1, [pc, #52]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00b      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a0a:	4b08      	ldr	r3, [pc, #32]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a1a:	4904      	ldr	r1, [pc, #16]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a22:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40021000 	.word	0x40021000

08004a30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a3e:	4b73      	ldr	r3, [pc, #460]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d018      	beq.n	8004a7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a4a:	4b70      	ldr	r3, [pc, #448]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f003 0203 	and.w	r2, r3, #3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d10d      	bne.n	8004a76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
       ||
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d009      	beq.n	8004a76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a62:	4b6a      	ldr	r3, [pc, #424]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	091b      	lsrs	r3, r3, #4
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
       ||
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d044      	beq.n	8004b00 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	73fb      	strb	r3, [r7, #15]
 8004a7a:	e041      	b.n	8004b00 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d00c      	beq.n	8004a9e <RCCEx_PLLSAI1_Config+0x6e>
 8004a84:	2b03      	cmp	r3, #3
 8004a86:	d013      	beq.n	8004ab0 <RCCEx_PLLSAI1_Config+0x80>
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d120      	bne.n	8004ace <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a8c:	4b5f      	ldr	r3, [pc, #380]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d11d      	bne.n	8004ad4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a9c:	e01a      	b.n	8004ad4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a9e:	4b5b      	ldr	r3, [pc, #364]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d116      	bne.n	8004ad8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aae:	e013      	b.n	8004ad8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ab0:	4b56      	ldr	r3, [pc, #344]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10f      	bne.n	8004adc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004abc:	4b53      	ldr	r3, [pc, #332]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d109      	bne.n	8004adc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004acc:	e006      	b.n	8004adc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8004ad2:	e004      	b.n	8004ade <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004ad4:	bf00      	nop
 8004ad6:	e002      	b.n	8004ade <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004ad8:	bf00      	nop
 8004ada:	e000      	b.n	8004ade <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004adc:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10d      	bne.n	8004b00 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ae4:	4b49      	ldr	r3, [pc, #292]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6819      	ldr	r1, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	3b01      	subs	r3, #1
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	430b      	orrs	r3, r1
 8004afa:	4944      	ldr	r1, [pc, #272]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d17d      	bne.n	8004c02 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b06:	4b41      	ldr	r3, [pc, #260]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a40      	ldr	r2, [pc, #256]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b12:	f7fd f943 	bl	8001d9c <HAL_GetTick>
 8004b16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b18:	e009      	b.n	8004b2e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b1a:	f7fd f93f 	bl	8001d9c <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d902      	bls.n	8004b2e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	73fb      	strb	r3, [r7, #15]
        break;
 8004b2c:	e005      	b.n	8004b3a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b2e:	4b37      	ldr	r3, [pc, #220]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1ef      	bne.n	8004b1a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d160      	bne.n	8004c02 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d111      	bne.n	8004b6a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b46:	4b31      	ldr	r3, [pc, #196]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6892      	ldr	r2, [r2, #8]
 8004b56:	0211      	lsls	r1, r2, #8
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	68d2      	ldr	r2, [r2, #12]
 8004b5c:	0912      	lsrs	r2, r2, #4
 8004b5e:	0452      	lsls	r2, r2, #17
 8004b60:	430a      	orrs	r2, r1
 8004b62:	492a      	ldr	r1, [pc, #168]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	610b      	str	r3, [r1, #16]
 8004b68:	e027      	b.n	8004bba <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d112      	bne.n	8004b96 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b70:	4b26      	ldr	r3, [pc, #152]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004b78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6892      	ldr	r2, [r2, #8]
 8004b80:	0211      	lsls	r1, r2, #8
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6912      	ldr	r2, [r2, #16]
 8004b86:	0852      	lsrs	r2, r2, #1
 8004b88:	3a01      	subs	r2, #1
 8004b8a:	0552      	lsls	r2, r2, #21
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	491f      	ldr	r1, [pc, #124]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	610b      	str	r3, [r1, #16]
 8004b94:	e011      	b.n	8004bba <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b96:	4b1d      	ldr	r3, [pc, #116]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6892      	ldr	r2, [r2, #8]
 8004ba6:	0211      	lsls	r1, r2, #8
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6952      	ldr	r2, [r2, #20]
 8004bac:	0852      	lsrs	r2, r2, #1
 8004bae:	3a01      	subs	r2, #1
 8004bb0:	0652      	lsls	r2, r2, #25
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	4915      	ldr	r1, [pc, #84]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004bba:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a13      	ldr	r2, [pc, #76]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bc4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc6:	f7fd f8e9 	bl	8001d9c <HAL_GetTick>
 8004bca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bcc:	e009      	b.n	8004be2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bce:	f7fd f8e5 	bl	8001d9c <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d902      	bls.n	8004be2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	73fb      	strb	r3, [r7, #15]
          break;
 8004be0:	e005      	b.n	8004bee <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004be2:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0ef      	beq.n	8004bce <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d106      	bne.n	8004c02 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004bf4:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	4903      	ldr	r1, [pc, #12]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40021000 	.word	0x40021000

08004c10 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c1e:	4b68      	ldr	r3, [pc, #416]	; (8004dc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d018      	beq.n	8004c5c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c2a:	4b65      	ldr	r3, [pc, #404]	; (8004dc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f003 0203 	and.w	r2, r3, #3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d10d      	bne.n	8004c56 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
       ||
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d009      	beq.n	8004c56 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c42:	4b5f      	ldr	r3, [pc, #380]	; (8004dc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	091b      	lsrs	r3, r3, #4
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
       ||
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d044      	beq.n	8004ce0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	73fb      	strb	r3, [r7, #15]
 8004c5a:	e041      	b.n	8004ce0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d00c      	beq.n	8004c7e <RCCEx_PLLSAI2_Config+0x6e>
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	d013      	beq.n	8004c90 <RCCEx_PLLSAI2_Config+0x80>
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d120      	bne.n	8004cae <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c6c:	4b54      	ldr	r3, [pc, #336]	; (8004dc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d11d      	bne.n	8004cb4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c7c:	e01a      	b.n	8004cb4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c7e:	4b50      	ldr	r3, [pc, #320]	; (8004dc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d116      	bne.n	8004cb8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c8e:	e013      	b.n	8004cb8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c90:	4b4b      	ldr	r3, [pc, #300]	; (8004dc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10f      	bne.n	8004cbc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c9c:	4b48      	ldr	r3, [pc, #288]	; (8004dc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d109      	bne.n	8004cbc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cac:	e006      	b.n	8004cbc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8004cb2:	e004      	b.n	8004cbe <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004cb4:	bf00      	nop
 8004cb6:	e002      	b.n	8004cbe <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004cb8:	bf00      	nop
 8004cba:	e000      	b.n	8004cbe <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004cbc:	bf00      	nop
    }

    if(status == HAL_OK)
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10d      	bne.n	8004ce0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004cc4:	4b3e      	ldr	r3, [pc, #248]	; (8004dc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6819      	ldr	r1, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	4939      	ldr	r1, [pc, #228]	; (8004dc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d167      	bne.n	8004db6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ce6:	4b36      	ldr	r3, [pc, #216]	; (8004dc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a35      	ldr	r2, [pc, #212]	; (8004dc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cf2:	f7fd f853 	bl	8001d9c <HAL_GetTick>
 8004cf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cf8:	e009      	b.n	8004d0e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cfa:	f7fd f84f 	bl	8001d9c <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d902      	bls.n	8004d0e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	73fb      	strb	r3, [r7, #15]
        break;
 8004d0c:	e005      	b.n	8004d1a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d0e:	4b2c      	ldr	r3, [pc, #176]	; (8004dc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1ef      	bne.n	8004cfa <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d14a      	bne.n	8004db6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d111      	bne.n	8004d4a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d26:	4b26      	ldr	r3, [pc, #152]	; (8004dc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6892      	ldr	r2, [r2, #8]
 8004d36:	0211      	lsls	r1, r2, #8
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	68d2      	ldr	r2, [r2, #12]
 8004d3c:	0912      	lsrs	r2, r2, #4
 8004d3e:	0452      	lsls	r2, r2, #17
 8004d40:	430a      	orrs	r2, r1
 8004d42:	491f      	ldr	r1, [pc, #124]	; (8004dc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	614b      	str	r3, [r1, #20]
 8004d48:	e011      	b.n	8004d6e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d4a:	4b1d      	ldr	r3, [pc, #116]	; (8004dc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6892      	ldr	r2, [r2, #8]
 8004d5a:	0211      	lsls	r1, r2, #8
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6912      	ldr	r2, [r2, #16]
 8004d60:	0852      	lsrs	r2, r2, #1
 8004d62:	3a01      	subs	r2, #1
 8004d64:	0652      	lsls	r2, r2, #25
 8004d66:	430a      	orrs	r2, r1
 8004d68:	4915      	ldr	r1, [pc, #84]	; (8004dc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d6e:	4b14      	ldr	r3, [pc, #80]	; (8004dc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a13      	ldr	r2, [pc, #76]	; (8004dc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d78:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7a:	f7fd f80f 	bl	8001d9c <HAL_GetTick>
 8004d7e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d80:	e009      	b.n	8004d96 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d82:	f7fd f80b 	bl	8001d9c <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d902      	bls.n	8004d96 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	73fb      	strb	r3, [r7, #15]
          break;
 8004d94:	e005      	b.n	8004da2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d96:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0ef      	beq.n	8004d82 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d106      	bne.n	8004db6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004da8:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004daa:	695a      	ldr	r2, [r3, #20]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	4903      	ldr	r1, [pc, #12]	; (8004dc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	40021000 	.word	0x40021000

08004dc4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d06f      	beq.n	8004eb6 <HAL_RTC_Init+0xf2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d106      	bne.n	8004df0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7fc fa24 	bl	8001238 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	22ca      	movs	r2, #202	; 0xca
 8004dfe:	625a      	str	r2, [r3, #36]	; 0x24
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2253      	movs	r2, #83	; 0x53
 8004e06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fa4c 	bl	80052a6 <RTC_EnterInitMode>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004e12:	7bfb      	ldrb	r3, [r7, #15]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d14e      	bne.n	8004eb6 <HAL_RTC_Init+0xf2>
#if defined(STM32L412xx) || defined(STM32L422xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e2a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6899      	ldr	r1, [r3, #8]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	68d2      	ldr	r2, [r2, #12]
 8004e52:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6919      	ldr	r1, [r3, #16]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	041a      	lsls	r2, r3, #16
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fa4f 	bl	800530c <RTC_ExitInitMode>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d11e      	bne.n	8004eb6 <HAL_RTC_Init+0xf2>
      {
#if defined(STM32L412xx) || defined(STM32L422xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0203 	bic.w	r2, r2, #3
 8004e86:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69da      	ldr	r2, [r3, #28]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	22ff      	movs	r2, #255	; 0xff
 8004ea6:	625a      	str	r2, [r3, #36]	; 0x24

        if (status == HAL_OK)
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d103      	bne.n	8004eb6 <HAL_RTC_Init+0xf2>
        {
          hrtc->State = HAL_RTC_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
      }
    }
  }

  return status;
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ec0:	b590      	push	{r4, r7, lr}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_RTC_SetTime+0x1a>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e08b      	b.n	8004ff2 <HAL_RTC_SetTime+0x132>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	22ca      	movs	r2, #202	; 0xca
 8004ef0:	625a      	str	r2, [r3, #36]	; 0x24
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2253      	movs	r2, #83	; 0x53
 8004ef8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 f9d3 	bl	80052a6 <RTC_EnterInitMode>
 8004f00:	4603      	mov	r3, r0
 8004f02:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004f04:	7cfb      	ldrb	r3, [r7, #19]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d163      	bne.n	8004fd2 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d126      	bne.n	8004f5e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d102      	bne.n	8004f24 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2200      	movs	r2, #0
 8004f22:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 fa2d 	bl	8005388 <RTC_ByteToBcd2>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	785b      	ldrb	r3, [r3, #1]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fa26 	bl	8005388 <RTC_ByteToBcd2>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f40:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	789b      	ldrb	r3, [r3, #2]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fa1e 	bl	8005388 <RTC_ByteToBcd2>
 8004f4c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f4e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	78db      	ldrb	r3, [r3, #3]
 8004f56:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	e018      	b.n	8004f90 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d102      	bne.n	8004f72 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	785b      	ldrb	r3, [r3, #1]
 8004f7c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f7e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f84:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	78db      	ldrb	r3, [r3, #3]
 8004f8a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004f9a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004f9e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6899      	ldr	r1, [r3, #8]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 f99f 	bl	800530c <RTC_ExitInitMode>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	22ff      	movs	r2, #255	; 0xff
 8004fd8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004fda:	7cfb      	ldrb	r3, [r7, #19]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d103      	bne.n	8004fe8 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004ff0:	7cfb      	ldrb	r3, [r7, #19]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	371c      	adds	r7, #28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd90      	pop	{r4, r7, pc}

08004ffa <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b086      	sub	sp, #24
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	60f8      	str	r0, [r7, #12]
 8005002:	60b9      	str	r1, [r7, #8]
 8005004:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005028:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800502c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	0c1b      	lsrs	r3, r3, #16
 8005032:	b2db      	uxtb	r3, r3
 8005034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005038:	b2da      	uxtb	r2, r3
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	0a1b      	lsrs	r3, r3, #8
 8005042:	b2db      	uxtb	r3, r3
 8005044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005048:	b2da      	uxtb	r2, r3
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	b2db      	uxtb	r3, r3
 8005052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005056:	b2da      	uxtb	r2, r3
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	0d9b      	lsrs	r3, r3, #22
 8005060:	b2db      	uxtb	r3, r3
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	b2da      	uxtb	r2, r3
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d11a      	bne.n	80050a8 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f000 f9a6 	bl	80053c8 <RTC_Bcd2ToByte>
 800507c:	4603      	mov	r3, r0
 800507e:	461a      	mov	r2, r3
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	785b      	ldrb	r3, [r3, #1]
 8005088:	4618      	mov	r0, r3
 800508a:	f000 f99d 	bl	80053c8 <RTC_Bcd2ToByte>
 800508e:	4603      	mov	r3, r0
 8005090:	461a      	mov	r2, r3
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	789b      	ldrb	r3, [r3, #2]
 800509a:	4618      	mov	r0, r3
 800509c:	f000 f994 	bl	80053c8 <RTC_Bcd2ToByte>
 80050a0:	4603      	mov	r3, r0
 80050a2:	461a      	mov	r2, r3
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80050b2:	b590      	push	{r4, r7, lr}
 80050b4:	b087      	sub	sp, #28
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	60b9      	str	r1, [r7, #8]
 80050bc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_RTC_SetDate+0x1a>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e075      	b.n	80051b8 <HAL_RTC_SetDate+0x106>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10e      	bne.n	8005100 <HAL_RTC_SetDate+0x4e>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	785b      	ldrb	r3, [r3, #1]
 80050e6:	f003 0310 	and.w	r3, r3, #16
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d008      	beq.n	8005100 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	785b      	ldrb	r3, [r3, #1]
 80050f2:	f023 0310 	bic.w	r3, r3, #16
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	330a      	adds	r3, #10
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d11c      	bne.n	8005140 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	78db      	ldrb	r3, [r3, #3]
 800510a:	4618      	mov	r0, r3
 800510c:	f000 f93c 	bl	8005388 <RTC_ByteToBcd2>
 8005110:	4603      	mov	r3, r0
 8005112:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	785b      	ldrb	r3, [r3, #1]
 8005118:	4618      	mov	r0, r3
 800511a:	f000 f935 	bl	8005388 <RTC_ByteToBcd2>
 800511e:	4603      	mov	r3, r0
 8005120:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005122:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	789b      	ldrb	r3, [r3, #2]
 8005128:	4618      	mov	r0, r3
 800512a:	f000 f92d 	bl	8005388 <RTC_ByteToBcd2>
 800512e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005130:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800513a:	4313      	orrs	r3, r2
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	e00e      	b.n	800515e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	78db      	ldrb	r3, [r3, #3]
 8005144:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	785b      	ldrb	r3, [r3, #1]
 800514a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800514c:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005152:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	22ca      	movs	r2, #202	; 0xca
 8005164:	625a      	str	r2, [r3, #36]	; 0x24
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2253      	movs	r2, #83	; 0x53
 800516c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 f899 	bl	80052a6 <RTC_EnterInitMode>
 8005174:	4603      	mov	r3, r0
 8005176:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005178:	7cfb      	ldrb	r3, [r7, #19]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10c      	bne.n	8005198 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005188:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800518c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 f8bc 	bl	800530c <RTC_ExitInitMode>
 8005194:	4603      	mov	r3, r0
 8005196:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	22ff      	movs	r2, #255	; 0xff
 800519e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80051a0:	7cfb      	ldrb	r3, [r7, #19]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d103      	bne.n	80051ae <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80051b6:	7cfb      	ldrb	r3, [r7, #19]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd90      	pop	{r4, r7, pc}

080051c0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80051d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80051da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	0c1b      	lsrs	r3, r3, #16
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	0a1b      	lsrs	r3, r3, #8
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	f003 031f 	and.w	r3, r3, #31
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	0b5b      	lsrs	r3, r3, #13
 8005208:	b2db      	uxtb	r3, r3
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	b2da      	uxtb	r2, r3
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d11a      	bne.n	8005250 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	78db      	ldrb	r3, [r3, #3]
 800521e:	4618      	mov	r0, r3
 8005220:	f000 f8d2 	bl	80053c8 <RTC_Bcd2ToByte>
 8005224:	4603      	mov	r3, r0
 8005226:	461a      	mov	r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	785b      	ldrb	r3, [r3, #1]
 8005230:	4618      	mov	r0, r3
 8005232:	f000 f8c9 	bl	80053c8 <RTC_Bcd2ToByte>
 8005236:	4603      	mov	r3, r0
 8005238:	461a      	mov	r2, r3
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	789b      	ldrb	r3, [r3, #2]
 8005242:	4618      	mov	r0, r3
 8005244:	f000 f8c0 	bl	80053c8 <RTC_Bcd2ToByte>
 8005248:	4603      	mov	r3, r0
 800524a:	461a      	mov	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b084      	sub	sp, #16
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005270:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005272:	f7fc fd93 	bl	8001d9c <HAL_GetTick>
 8005276:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005278:	e009      	b.n	800528e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800527a:	f7fc fd8f 	bl	8001d9c <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005288:	d901      	bls.n	800528e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e007      	b.n	800529e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0320 	and.w	r3, r3, #32
 8005298:	2b00      	cmp	r3, #0
 800529a:	d0ee      	beq.n	800527a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b084      	sub	sp, #16
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d120      	bne.n	8005302 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f04f 32ff 	mov.w	r2, #4294967295
 80052c8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80052ca:	f7fc fd67 	bl	8001d9c <HAL_GetTick>
 80052ce:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80052d0:	e00d      	b.n	80052ee <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80052d2:	f7fc fd63 	bl	8001d9c <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052e0:	d905      	bls.n	80052ee <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2203      	movs	r2, #3
 80052ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d102      	bne.n	8005302 <RTC_EnterInitMode+0x5c>
 80052fc:	7bfb      	ldrb	r3, [r7, #15]
 80052fe:	2b03      	cmp	r3, #3
 8005300:	d1e7      	bne.n	80052d2 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return status;
 8005302:	7bfb      	ldrb	r3, [r7, #15]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005314:	2300      	movs	r3, #0
 8005316:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005318:	4b1a      	ldr	r3, [pc, #104]	; (8005384 <RTC_ExitInitMode+0x78>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	4a19      	ldr	r2, [pc, #100]	; (8005384 <RTC_ExitInitMode+0x78>)
 800531e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005322:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005324:	4b17      	ldr	r3, [pc, #92]	; (8005384 <RTC_ExitInitMode+0x78>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f003 0320 	and.w	r3, r3, #32
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10c      	bne.n	800534a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff ff92 	bl	800525a <HAL_RTC_WaitForSynchro>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01e      	beq.n	800537a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2203      	movs	r2, #3
 8005340:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	73fb      	strb	r3, [r7, #15]
 8005348:	e017      	b.n	800537a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800534a:	4b0e      	ldr	r3, [pc, #56]	; (8005384 <RTC_ExitInitMode+0x78>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	4a0d      	ldr	r2, [pc, #52]	; (8005384 <RTC_ExitInitMode+0x78>)
 8005350:	f023 0320 	bic.w	r3, r3, #32
 8005354:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7ff ff7f 	bl	800525a <HAL_RTC_WaitForSynchro>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d005      	beq.n	800536e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2203      	movs	r2, #3
 8005366:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800536e:	4b05      	ldr	r3, [pc, #20]	; (8005384 <RTC_ExitInitMode+0x78>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	4a04      	ldr	r2, [pc, #16]	; (8005384 <RTC_ExitInitMode+0x78>)
 8005374:	f043 0320 	orr.w	r3, r3, #32
 8005378:	6093      	str	r3, [r2, #8]
  }

  return status;
 800537a:	7bfb      	ldrb	r3, [r7, #15]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40002800 	.word	0x40002800

08005388 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	4603      	mov	r3, r0
 8005390:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005396:	79fb      	ldrb	r3, [r7, #7]
 8005398:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800539a:	e005      	b.n	80053a8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	3301      	adds	r3, #1
 80053a0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80053a2:	7afb      	ldrb	r3, [r7, #11]
 80053a4:	3b0a      	subs	r3, #10
 80053a6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80053a8:	7afb      	ldrb	r3, [r7, #11]
 80053aa:	2b09      	cmp	r3, #9
 80053ac:	d8f6      	bhi.n	800539c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	7afb      	ldrb	r3, [r7, #11]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	b2db      	uxtb	r3, r3
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	4603      	mov	r3, r0
 80053d0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80053d2:	79fb      	ldrb	r3, [r7, #7]
 80053d4:	091b      	lsrs	r3, r3, #4
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	461a      	mov	r2, r3
 80053da:	0092      	lsls	r2, r2, #2
 80053dc:	4413      	add	r3, r2
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80053e2:	79fb      	ldrb	r3, [r7, #7]
 80053e4:	f003 030f 	and.w	r3, r3, #15
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	4413      	add	r3, r2
 80053ee:	b2db      	uxtb	r3, r3
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 3020 	ldrb.w	r3, [r3, #32]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d101      	bne.n	8005414 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8005410:	2302      	movs	r3, #2
 8005412:	e034      	b.n	800547e <HAL_RTCEx_SetCalibrationOutPut+0x82>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2202      	movs	r2, #2
 8005420:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	22ca      	movs	r2, #202	; 0xca
 800542a:	625a      	str	r2, [r3, #36]	; 0x24
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2253      	movs	r2, #83	; 0x53
 8005432:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8005442:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6899      	ldr	r1, [r3, #8]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005462:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	22ff      	movs	r2, #255	; 0xff
 800546a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e07c      	b.n	8005596 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d106      	bne.n	80054bc <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7fb ff3c 	bl	8001334 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054dc:	d902      	bls.n	80054e4 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80054de:	2300      	movs	r3, #0
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	e002      	b.n	80054ea <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80054e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80054f2:	d007      	beq.n	8005504 <HAL_SPI_Init+0x7a>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054fc:	d002      	beq.n	8005504 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10b      	bne.n	8005524 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005514:	d903      	bls.n	800551e <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2202      	movs	r2, #2
 800551a:	631a      	str	r2, [r3, #48]	; 0x30
 800551c:	e002      	b.n	8005524 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	431a      	orrs	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	431a      	orrs	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	ea42 0103 	orr.w	r1, r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	0c1b      	lsrs	r3, r3, #16
 8005564:	f003 0204 	and.w	r2, r3, #4
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	431a      	orrs	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	ea42 0103 	orr.w	r1, r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	430a      	orrs	r2, r1
 8005584:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b088      	sub	sp, #32
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	60b9      	str	r1, [r7, #8]
 80055a8:	603b      	str	r3, [r7, #0]
 80055aa:	4613      	mov	r3, r2
 80055ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <HAL_SPI_Transmit+0x22>
 80055bc:	2302      	movs	r3, #2
 80055be:	e150      	b.n	8005862 <HAL_SPI_Transmit+0x2c4>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055c8:	f7fc fbe8 	bl	8001d9c <HAL_GetTick>
 80055cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055ce:	88fb      	ldrh	r3, [r7, #6]
 80055d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d002      	beq.n	80055e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80055de:	2302      	movs	r3, #2
 80055e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055e2:	e135      	b.n	8005850 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <HAL_SPI_Transmit+0x52>
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d102      	bne.n	80055f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055f4:	e12c      	b.n	8005850 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2203      	movs	r2, #3
 80055fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	88fa      	ldrh	r2, [r7, #6]
 800560e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	88fa      	ldrh	r2, [r7, #6]
 8005614:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005640:	d107      	bne.n	8005652 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005650:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565c:	2b40      	cmp	r3, #64	; 0x40
 800565e:	d007      	beq.n	8005670 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800566e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005678:	d94b      	bls.n	8005712 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <HAL_SPI_Transmit+0xea>
 8005682:	8afb      	ldrh	r3, [r7, #22]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d13e      	bne.n	8005706 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568c:	881a      	ldrh	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005698:	1c9a      	adds	r2, r3, #2
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	3b01      	subs	r3, #1
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056ac:	e02b      	b.n	8005706 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d112      	bne.n	80056e2 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c0:	881a      	ldrh	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056cc:	1c9a      	adds	r2, r3, #2
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	3b01      	subs	r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056e0:	e011      	b.n	8005706 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056e2:	f7fc fb5b 	bl	8001d9c <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d803      	bhi.n	80056fa <HAL_SPI_Transmit+0x15c>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f8:	d102      	bne.n	8005700 <HAL_SPI_Transmit+0x162>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d102      	bne.n	8005706 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005704:	e0a4      	b.n	8005850 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800570a:	b29b      	uxth	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1ce      	bne.n	80056ae <HAL_SPI_Transmit+0x110>
 8005710:	e07c      	b.n	800580c <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d002      	beq.n	8005720 <HAL_SPI_Transmit+0x182>
 800571a:	8afb      	ldrh	r3, [r7, #22]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d170      	bne.n	8005802 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005724:	b29b      	uxth	r3, r3
 8005726:	2b01      	cmp	r3, #1
 8005728:	d912      	bls.n	8005750 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572e:	881a      	ldrh	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573a:	1c9a      	adds	r2, r3, #2
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005744:	b29b      	uxth	r3, r3
 8005746:	3b02      	subs	r3, #2
 8005748:	b29a      	uxth	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800574e:	e058      	b.n	8005802 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	330c      	adds	r3, #12
 800575a:	7812      	ldrb	r2, [r2, #0]
 800575c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800576c:	b29b      	uxth	r3, r3
 800576e:	3b01      	subs	r3, #1
 8005770:	b29a      	uxth	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005776:	e044      	b.n	8005802 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b02      	cmp	r3, #2
 8005784:	d12b      	bne.n	80057de <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800578a:	b29b      	uxth	r3, r3
 800578c:	2b01      	cmp	r3, #1
 800578e:	d912      	bls.n	80057b6 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	881a      	ldrh	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a0:	1c9a      	adds	r2, r3, #2
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b02      	subs	r3, #2
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057b4:	e025      	b.n	8005802 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	330c      	adds	r3, #12
 80057c0:	7812      	ldrb	r2, [r2, #0]
 80057c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	3b01      	subs	r3, #1
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057dc:	e011      	b.n	8005802 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057de:	f7fc fadd 	bl	8001d9c <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d803      	bhi.n	80057f6 <HAL_SPI_Transmit+0x258>
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f4:	d102      	bne.n	80057fc <HAL_SPI_Transmit+0x25e>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d102      	bne.n	8005802 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005800:	e026      	b.n	8005850 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005806:	b29b      	uxth	r3, r3
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1b5      	bne.n	8005778 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	6839      	ldr	r1, [r7, #0]
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 f901 	bl	8005a18 <SPI_EndRxTxTransaction>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d002      	beq.n	8005822 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2220      	movs	r2, #32
 8005820:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10a      	bne.n	8005840 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800582a:	2300      	movs	r3, #0
 800582c:	613b      	str	r3, [r7, #16]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	77fb      	strb	r3, [r7, #31]
 800584c:	e000      	b.n	8005850 <HAL_SPI_Transmit+0x2b2>
  }

error:
 800584e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005860:	7ffb      	ldrb	r3, [r7, #31]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3720      	adds	r7, #32
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b084      	sub	sp, #16
 800586e:	af00      	add	r7, sp, #0
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	603b      	str	r3, [r7, #0]
 8005876:	4613      	mov	r3, r2
 8005878:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800587a:	e04c      	b.n	8005916 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005882:	d048      	beq.n	8005916 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005884:	f7fc fa8a 	bl	8001d9c <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d902      	bls.n	800589a <SPI_WaitFlagStateUntilTimeout+0x30>
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d13d      	bne.n	8005916 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058b2:	d111      	bne.n	80058d8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058bc:	d004      	beq.n	80058c8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058c6:	d107      	bne.n	80058d8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058e0:	d10f      	bne.n	8005902 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005900:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e00f      	b.n	8005936 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	4013      	ands	r3, r2
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	429a      	cmp	r2, r3
 8005924:	bf0c      	ite	eq
 8005926:	2301      	moveq	r3, #1
 8005928:	2300      	movne	r3, #0
 800592a:	b2db      	uxtb	r3, r3
 800592c:	461a      	mov	r2, r3
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	429a      	cmp	r2, r3
 8005932:	d1a3      	bne.n	800587c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	60b9      	str	r1, [r7, #8]
 8005948:	607a      	str	r2, [r7, #4]
 800594a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800594c:	e057      	b.n	80059fe <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005954:	d106      	bne.n	8005964 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d103      	bne.n	8005964 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	330c      	adds	r3, #12
 8005962:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596a:	d048      	beq.n	80059fe <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800596c:	f7fc fa16 	bl	8001d9c <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	429a      	cmp	r2, r3
 800597a:	d902      	bls.n	8005982 <SPI_WaitFifoStateUntilTimeout+0x44>
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d13d      	bne.n	80059fe <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005990:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800599a:	d111      	bne.n	80059c0 <SPI_WaitFifoStateUntilTimeout+0x82>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059a4:	d004      	beq.n	80059b0 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ae:	d107      	bne.n	80059c0 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059c8:	d10f      	bne.n	80059ea <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e008      	b.n	8005a10 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	689a      	ldr	r2, [r3, #8]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	4013      	ands	r3, r2
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d19f      	bne.n	800594e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af02      	add	r7, sp, #8
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f7ff ff84 	bl	800593e <SPI_WaitFifoStateUntilTimeout>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d007      	beq.n	8005a4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a40:	f043 0220 	orr.w	r2, r3, #32
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e027      	b.n	8005a9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2200      	movs	r2, #0
 8005a54:	2180      	movs	r1, #128	; 0x80
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f7ff ff07 	bl	800586a <SPI_WaitFlagStateUntilTimeout>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d007      	beq.n	8005a72 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a66:	f043 0220 	orr.w	r2, r3, #32
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e014      	b.n	8005a9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f7ff ff5d 	bl	800593e <SPI_WaitFifoStateUntilTimeout>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d007      	beq.n	8005a9a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a8e:	f043 0220 	orr.w	r2, r3, #32
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e000      	b.n	8005a9c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e01d      	b.n	8005af2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7fb fd94 	bl	80015f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	4610      	mov	r0, r2
 8005ae4:	f000 fa68 	bl	8005fb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b082      	sub	sp, #8
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e01d      	b.n	8005b48 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d106      	bne.n	8005b26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f815 	bl	8005b50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	3304      	adds	r3, #4
 8005b36:	4619      	mov	r1, r3
 8005b38:	4610      	mov	r0, r2
 8005b3a:	f000 fa3d 	bl	8005fb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2201      	movs	r2, #1
 8005b74:	6839      	ldr	r1, [r7, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fe28 	bl	80067cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a1e      	ldr	r2, [pc, #120]	; (8005bfc <HAL_TIM_PWM_Start+0x98>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d013      	beq.n	8005bae <HAL_TIM_PWM_Start+0x4a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a1d      	ldr	r2, [pc, #116]	; (8005c00 <HAL_TIM_PWM_Start+0x9c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00e      	beq.n	8005bae <HAL_TIM_PWM_Start+0x4a>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a1b      	ldr	r2, [pc, #108]	; (8005c04 <HAL_TIM_PWM_Start+0xa0>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d009      	beq.n	8005bae <HAL_TIM_PWM_Start+0x4a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a1a      	ldr	r2, [pc, #104]	; (8005c08 <HAL_TIM_PWM_Start+0xa4>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d004      	beq.n	8005bae <HAL_TIM_PWM_Start+0x4a>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a18      	ldr	r2, [pc, #96]	; (8005c0c <HAL_TIM_PWM_Start+0xa8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d101      	bne.n	8005bb2 <HAL_TIM_PWM_Start+0x4e>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e000      	b.n	8005bb4 <HAL_TIM_PWM_Start+0x50>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d007      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bc6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689a      	ldr	r2, [r3, #8]
 8005bce:	4b10      	ldr	r3, [pc, #64]	; (8005c10 <HAL_TIM_PWM_Start+0xac>)
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b06      	cmp	r3, #6
 8005bd8:	d00b      	beq.n	8005bf2 <HAL_TIM_PWM_Start+0x8e>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be0:	d007      	beq.n	8005bf2 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f042 0201 	orr.w	r2, r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40012c00 	.word	0x40012c00
 8005c00:	40013400 	.word	0x40013400
 8005c04:	40014000 	.word	0x40014000
 8005c08:	40014400 	.word	0x40014400
 8005c0c:	40014800 	.word	0x40014800
 8005c10:	00010007 	.word	0x00010007

08005c14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d101      	bne.n	8005c2e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	e105      	b.n	8005e3a <HAL_TIM_PWM_ConfigChannel+0x226>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2202      	movs	r2, #2
 8005c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b14      	cmp	r3, #20
 8005c42:	f200 80f0 	bhi.w	8005e26 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005c46:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4c:	08005ca1 	.word	0x08005ca1
 8005c50:	08005e27 	.word	0x08005e27
 8005c54:	08005e27 	.word	0x08005e27
 8005c58:	08005e27 	.word	0x08005e27
 8005c5c:	08005ce1 	.word	0x08005ce1
 8005c60:	08005e27 	.word	0x08005e27
 8005c64:	08005e27 	.word	0x08005e27
 8005c68:	08005e27 	.word	0x08005e27
 8005c6c:	08005d23 	.word	0x08005d23
 8005c70:	08005e27 	.word	0x08005e27
 8005c74:	08005e27 	.word	0x08005e27
 8005c78:	08005e27 	.word	0x08005e27
 8005c7c:	08005d63 	.word	0x08005d63
 8005c80:	08005e27 	.word	0x08005e27
 8005c84:	08005e27 	.word	0x08005e27
 8005c88:	08005e27 	.word	0x08005e27
 8005c8c:	08005da5 	.word	0x08005da5
 8005c90:	08005e27 	.word	0x08005e27
 8005c94:	08005e27 	.word	0x08005e27
 8005c98:	08005e27 	.word	0x08005e27
 8005c9c:	08005de5 	.word	0x08005de5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68b9      	ldr	r1, [r7, #8]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 fa20 	bl	80060ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699a      	ldr	r2, [r3, #24]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0208 	orr.w	r2, r2, #8
 8005cba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	699a      	ldr	r2, [r3, #24]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0204 	bic.w	r2, r2, #4
 8005cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6999      	ldr	r1, [r3, #24]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	691a      	ldr	r2, [r3, #16]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	619a      	str	r2, [r3, #24]
      break;
 8005cde:	e0a3      	b.n	8005e28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68b9      	ldr	r1, [r7, #8]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 fa90 	bl	800620c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	699a      	ldr	r2, [r3, #24]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699a      	ldr	r2, [r3, #24]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6999      	ldr	r1, [r3, #24]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	021a      	lsls	r2, r3, #8
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	619a      	str	r2, [r3, #24]
      break;
 8005d20:	e082      	b.n	8005e28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68b9      	ldr	r1, [r7, #8]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 faf9 	bl	8006320 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	69da      	ldr	r2, [r3, #28]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f042 0208 	orr.w	r2, r2, #8
 8005d3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69da      	ldr	r2, [r3, #28]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 0204 	bic.w	r2, r2, #4
 8005d4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	69d9      	ldr	r1, [r3, #28]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	691a      	ldr	r2, [r3, #16]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	61da      	str	r2, [r3, #28]
      break;
 8005d60:	e062      	b.n	8005e28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68b9      	ldr	r1, [r7, #8]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f000 fb61 	bl	8006430 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69da      	ldr	r2, [r3, #28]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69da      	ldr	r2, [r3, #28]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69d9      	ldr	r1, [r3, #28]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	021a      	lsls	r2, r3, #8
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	61da      	str	r2, [r3, #28]
      break;
 8005da2:	e041      	b.n	8005e28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68b9      	ldr	r1, [r7, #8]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fbaa 	bl	8006504 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0208 	orr.w	r2, r2, #8
 8005dbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 0204 	bic.w	r2, r2, #4
 8005dce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	691a      	ldr	r2, [r3, #16]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005de2:	e021      	b.n	8005e28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 fbee 	bl	80065cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dfe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	021a      	lsls	r2, r3, #8
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e24:	e000      	b.n	8005e28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005e26:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop

08005e44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d101      	bne.n	8005e5c <HAL_TIM_ConfigClockSource+0x18>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	e0a8      	b.n	8005fae <HAL_TIM_ConfigClockSource+0x16a>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b40      	cmp	r3, #64	; 0x40
 8005e96:	d067      	beq.n	8005f68 <HAL_TIM_ConfigClockSource+0x124>
 8005e98:	2b40      	cmp	r3, #64	; 0x40
 8005e9a:	d80b      	bhi.n	8005eb4 <HAL_TIM_ConfigClockSource+0x70>
 8005e9c:	2b10      	cmp	r3, #16
 8005e9e:	d073      	beq.n	8005f88 <HAL_TIM_ConfigClockSource+0x144>
 8005ea0:	2b10      	cmp	r3, #16
 8005ea2:	d802      	bhi.n	8005eaa <HAL_TIM_ConfigClockSource+0x66>
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d06f      	beq.n	8005f88 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005ea8:	e078      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005eaa:	2b20      	cmp	r3, #32
 8005eac:	d06c      	beq.n	8005f88 <HAL_TIM_ConfigClockSource+0x144>
 8005eae:	2b30      	cmp	r3, #48	; 0x30
 8005eb0:	d06a      	beq.n	8005f88 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005eb2:	e073      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005eb4:	2b70      	cmp	r3, #112	; 0x70
 8005eb6:	d00d      	beq.n	8005ed4 <HAL_TIM_ConfigClockSource+0x90>
 8005eb8:	2b70      	cmp	r3, #112	; 0x70
 8005eba:	d804      	bhi.n	8005ec6 <HAL_TIM_ConfigClockSource+0x82>
 8005ebc:	2b50      	cmp	r3, #80	; 0x50
 8005ebe:	d033      	beq.n	8005f28 <HAL_TIM_ConfigClockSource+0xe4>
 8005ec0:	2b60      	cmp	r3, #96	; 0x60
 8005ec2:	d041      	beq.n	8005f48 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005ec4:	e06a      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eca:	d066      	beq.n	8005f9a <HAL_TIM_ConfigClockSource+0x156>
 8005ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed0:	d017      	beq.n	8005f02 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005ed2:	e063      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6818      	ldr	r0, [r3, #0]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	6899      	ldr	r1, [r3, #8]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f000 fc52 	bl	800678c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ef6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	609a      	str	r2, [r3, #8]
      break;
 8005f00:	e04c      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6818      	ldr	r0, [r3, #0]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	6899      	ldr	r1, [r3, #8]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f000 fc3b 	bl	800678c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f24:	609a      	str	r2, [r3, #8]
      break;
 8005f26:	e039      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6818      	ldr	r0, [r3, #0]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	6859      	ldr	r1, [r3, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	461a      	mov	r2, r3
 8005f36:	f000 fbaf 	bl	8006698 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2150      	movs	r1, #80	; 0x50
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 fc08 	bl	8006756 <TIM_ITRx_SetConfig>
      break;
 8005f46:	e029      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6818      	ldr	r0, [r3, #0]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	6859      	ldr	r1, [r3, #4]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	461a      	mov	r2, r3
 8005f56:	f000 fbce 	bl	80066f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2160      	movs	r1, #96	; 0x60
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 fbf8 	bl	8006756 <TIM_ITRx_SetConfig>
      break;
 8005f66:	e019      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6818      	ldr	r0, [r3, #0]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	6859      	ldr	r1, [r3, #4]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	461a      	mov	r2, r3
 8005f76:	f000 fb8f 	bl	8006698 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2140      	movs	r1, #64	; 0x40
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 fbe8 	bl	8006756 <TIM_ITRx_SetConfig>
      break;
 8005f86:	e009      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4619      	mov	r1, r3
 8005f92:	4610      	mov	r0, r2
 8005f94:	f000 fbdf 	bl	8006756 <TIM_ITRx_SetConfig>
      break;
 8005f98:	e000      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005f9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
	...

08005fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a40      	ldr	r2, [pc, #256]	; (80060cc <TIM_Base_SetConfig+0x114>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d013      	beq.n	8005ff8 <TIM_Base_SetConfig+0x40>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd6:	d00f      	beq.n	8005ff8 <TIM_Base_SetConfig+0x40>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a3d      	ldr	r2, [pc, #244]	; (80060d0 <TIM_Base_SetConfig+0x118>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d00b      	beq.n	8005ff8 <TIM_Base_SetConfig+0x40>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a3c      	ldr	r2, [pc, #240]	; (80060d4 <TIM_Base_SetConfig+0x11c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d007      	beq.n	8005ff8 <TIM_Base_SetConfig+0x40>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a3b      	ldr	r2, [pc, #236]	; (80060d8 <TIM_Base_SetConfig+0x120>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d003      	beq.n	8005ff8 <TIM_Base_SetConfig+0x40>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a3a      	ldr	r2, [pc, #232]	; (80060dc <TIM_Base_SetConfig+0x124>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d108      	bne.n	800600a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a2f      	ldr	r2, [pc, #188]	; (80060cc <TIM_Base_SetConfig+0x114>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d01f      	beq.n	8006052 <TIM_Base_SetConfig+0x9a>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006018:	d01b      	beq.n	8006052 <TIM_Base_SetConfig+0x9a>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a2c      	ldr	r2, [pc, #176]	; (80060d0 <TIM_Base_SetConfig+0x118>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d017      	beq.n	8006052 <TIM_Base_SetConfig+0x9a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a2b      	ldr	r2, [pc, #172]	; (80060d4 <TIM_Base_SetConfig+0x11c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d013      	beq.n	8006052 <TIM_Base_SetConfig+0x9a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a2a      	ldr	r2, [pc, #168]	; (80060d8 <TIM_Base_SetConfig+0x120>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d00f      	beq.n	8006052 <TIM_Base_SetConfig+0x9a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a29      	ldr	r2, [pc, #164]	; (80060dc <TIM_Base_SetConfig+0x124>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00b      	beq.n	8006052 <TIM_Base_SetConfig+0x9a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a28      	ldr	r2, [pc, #160]	; (80060e0 <TIM_Base_SetConfig+0x128>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d007      	beq.n	8006052 <TIM_Base_SetConfig+0x9a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a27      	ldr	r2, [pc, #156]	; (80060e4 <TIM_Base_SetConfig+0x12c>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d003      	beq.n	8006052 <TIM_Base_SetConfig+0x9a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a26      	ldr	r2, [pc, #152]	; (80060e8 <TIM_Base_SetConfig+0x130>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d108      	bne.n	8006064 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a10      	ldr	r2, [pc, #64]	; (80060cc <TIM_Base_SetConfig+0x114>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d00f      	beq.n	80060b0 <TIM_Base_SetConfig+0xf8>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a12      	ldr	r2, [pc, #72]	; (80060dc <TIM_Base_SetConfig+0x124>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d00b      	beq.n	80060b0 <TIM_Base_SetConfig+0xf8>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a11      	ldr	r2, [pc, #68]	; (80060e0 <TIM_Base_SetConfig+0x128>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d007      	beq.n	80060b0 <TIM_Base_SetConfig+0xf8>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a10      	ldr	r2, [pc, #64]	; (80060e4 <TIM_Base_SetConfig+0x12c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d003      	beq.n	80060b0 <TIM_Base_SetConfig+0xf8>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a0f      	ldr	r2, [pc, #60]	; (80060e8 <TIM_Base_SetConfig+0x130>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d103      	bne.n	80060b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	691a      	ldr	r2, [r3, #16]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	615a      	str	r2, [r3, #20]
}
 80060be:	bf00      	nop
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40012c00 	.word	0x40012c00
 80060d0:	40000400 	.word	0x40000400
 80060d4:	40000800 	.word	0x40000800
 80060d8:	40000c00 	.word	0x40000c00
 80060dc:	40013400 	.word	0x40013400
 80060e0:	40014000 	.word	0x40014000
 80060e4:	40014400 	.word	0x40014400
 80060e8:	40014800 	.word	0x40014800

080060ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b087      	sub	sp, #28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	f023 0201 	bic.w	r2, r3, #1
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800611a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800611e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 0303 	bic.w	r3, r3, #3
 8006126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f023 0302 	bic.w	r3, r3, #2
 8006138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	4313      	orrs	r3, r2
 8006142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a2c      	ldr	r2, [pc, #176]	; (80061f8 <TIM_OC1_SetConfig+0x10c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d00f      	beq.n	800616c <TIM_OC1_SetConfig+0x80>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a2b      	ldr	r2, [pc, #172]	; (80061fc <TIM_OC1_SetConfig+0x110>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d00b      	beq.n	800616c <TIM_OC1_SetConfig+0x80>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a2a      	ldr	r2, [pc, #168]	; (8006200 <TIM_OC1_SetConfig+0x114>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d007      	beq.n	800616c <TIM_OC1_SetConfig+0x80>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a29      	ldr	r2, [pc, #164]	; (8006204 <TIM_OC1_SetConfig+0x118>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d003      	beq.n	800616c <TIM_OC1_SetConfig+0x80>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a28      	ldr	r2, [pc, #160]	; (8006208 <TIM_OC1_SetConfig+0x11c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d10c      	bne.n	8006186 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f023 0308 	bic.w	r3, r3, #8
 8006172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f023 0304 	bic.w	r3, r3, #4
 8006184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a1b      	ldr	r2, [pc, #108]	; (80061f8 <TIM_OC1_SetConfig+0x10c>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d00f      	beq.n	80061ae <TIM_OC1_SetConfig+0xc2>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a1a      	ldr	r2, [pc, #104]	; (80061fc <TIM_OC1_SetConfig+0x110>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d00b      	beq.n	80061ae <TIM_OC1_SetConfig+0xc2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a19      	ldr	r2, [pc, #100]	; (8006200 <TIM_OC1_SetConfig+0x114>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d007      	beq.n	80061ae <TIM_OC1_SetConfig+0xc2>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a18      	ldr	r2, [pc, #96]	; (8006204 <TIM_OC1_SetConfig+0x118>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d003      	beq.n	80061ae <TIM_OC1_SetConfig+0xc2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a17      	ldr	r2, [pc, #92]	; (8006208 <TIM_OC1_SetConfig+0x11c>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d111      	bne.n	80061d2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	621a      	str	r2, [r3, #32]
}
 80061ec:	bf00      	nop
 80061ee:	371c      	adds	r7, #28
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr
 80061f8:	40012c00 	.word	0x40012c00
 80061fc:	40013400 	.word	0x40013400
 8006200:	40014000 	.word	0x40014000
 8006204:	40014400 	.word	0x40014400
 8006208:	40014800 	.word	0x40014800

0800620c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	f023 0210 	bic.w	r2, r3, #16
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800623a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800623e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	021b      	lsls	r3, r3, #8
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	4313      	orrs	r3, r2
 8006252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f023 0320 	bic.w	r3, r3, #32
 800625a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	011b      	lsls	r3, r3, #4
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	4313      	orrs	r3, r2
 8006266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a28      	ldr	r2, [pc, #160]	; (800630c <TIM_OC2_SetConfig+0x100>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d003      	beq.n	8006278 <TIM_OC2_SetConfig+0x6c>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a27      	ldr	r2, [pc, #156]	; (8006310 <TIM_OC2_SetConfig+0x104>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d10d      	bne.n	8006294 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800627e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	011b      	lsls	r3, r3, #4
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	4313      	orrs	r3, r2
 800628a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006292:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a1d      	ldr	r2, [pc, #116]	; (800630c <TIM_OC2_SetConfig+0x100>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d00f      	beq.n	80062bc <TIM_OC2_SetConfig+0xb0>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a1c      	ldr	r2, [pc, #112]	; (8006310 <TIM_OC2_SetConfig+0x104>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00b      	beq.n	80062bc <TIM_OC2_SetConfig+0xb0>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a1b      	ldr	r2, [pc, #108]	; (8006314 <TIM_OC2_SetConfig+0x108>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d007      	beq.n	80062bc <TIM_OC2_SetConfig+0xb0>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a1a      	ldr	r2, [pc, #104]	; (8006318 <TIM_OC2_SetConfig+0x10c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d003      	beq.n	80062bc <TIM_OC2_SetConfig+0xb0>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a19      	ldr	r2, [pc, #100]	; (800631c <TIM_OC2_SetConfig+0x110>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d113      	bne.n	80062e4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	695b      	ldr	r3, [r3, #20]
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	621a      	str	r2, [r3, #32]
}
 80062fe:	bf00      	nop
 8006300:	371c      	adds	r7, #28
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	40012c00 	.word	0x40012c00
 8006310:	40013400 	.word	0x40013400
 8006314:	40014000 	.word	0x40014000
 8006318:	40014400 	.word	0x40014400
 800631c:	40014800 	.word	0x40014800

08006320 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800634e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f023 0303 	bic.w	r3, r3, #3
 800635a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800636c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	021b      	lsls	r3, r3, #8
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	4313      	orrs	r3, r2
 8006378:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a27      	ldr	r2, [pc, #156]	; (800641c <TIM_OC3_SetConfig+0xfc>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d003      	beq.n	800638a <TIM_OC3_SetConfig+0x6a>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a26      	ldr	r2, [pc, #152]	; (8006420 <TIM_OC3_SetConfig+0x100>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d10d      	bne.n	80063a6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006390:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	021b      	lsls	r3, r3, #8
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	4313      	orrs	r3, r2
 800639c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a1c      	ldr	r2, [pc, #112]	; (800641c <TIM_OC3_SetConfig+0xfc>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d00f      	beq.n	80063ce <TIM_OC3_SetConfig+0xae>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a1b      	ldr	r2, [pc, #108]	; (8006420 <TIM_OC3_SetConfig+0x100>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d00b      	beq.n	80063ce <TIM_OC3_SetConfig+0xae>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a1a      	ldr	r2, [pc, #104]	; (8006424 <TIM_OC3_SetConfig+0x104>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d007      	beq.n	80063ce <TIM_OC3_SetConfig+0xae>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a19      	ldr	r2, [pc, #100]	; (8006428 <TIM_OC3_SetConfig+0x108>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d003      	beq.n	80063ce <TIM_OC3_SetConfig+0xae>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a18      	ldr	r2, [pc, #96]	; (800642c <TIM_OC3_SetConfig+0x10c>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d113      	bne.n	80063f6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	011b      	lsls	r3, r3, #4
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	621a      	str	r2, [r3, #32]
}
 8006410:	bf00      	nop
 8006412:	371c      	adds	r7, #28
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	40012c00 	.word	0x40012c00
 8006420:	40013400 	.word	0x40013400
 8006424:	40014000 	.word	0x40014000
 8006428:	40014400 	.word	0x40014400
 800642c:	40014800 	.word	0x40014800

08006430 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800645e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800646a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	021b      	lsls	r3, r3, #8
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	4313      	orrs	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800647e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	031b      	lsls	r3, r3, #12
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	4313      	orrs	r3, r2
 800648a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a18      	ldr	r2, [pc, #96]	; (80064f0 <TIM_OC4_SetConfig+0xc0>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d00f      	beq.n	80064b4 <TIM_OC4_SetConfig+0x84>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a17      	ldr	r2, [pc, #92]	; (80064f4 <TIM_OC4_SetConfig+0xc4>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00b      	beq.n	80064b4 <TIM_OC4_SetConfig+0x84>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a16      	ldr	r2, [pc, #88]	; (80064f8 <TIM_OC4_SetConfig+0xc8>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d007      	beq.n	80064b4 <TIM_OC4_SetConfig+0x84>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a15      	ldr	r2, [pc, #84]	; (80064fc <TIM_OC4_SetConfig+0xcc>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d003      	beq.n	80064b4 <TIM_OC4_SetConfig+0x84>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a14      	ldr	r2, [pc, #80]	; (8006500 <TIM_OC4_SetConfig+0xd0>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d109      	bne.n	80064c8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	019b      	lsls	r3, r3, #6
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	621a      	str	r2, [r3, #32]
}
 80064e2:	bf00      	nop
 80064e4:	371c      	adds	r7, #28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	40012c00 	.word	0x40012c00
 80064f4:	40013400 	.word	0x40013400
 80064f8:	40014000 	.word	0x40014000
 80064fc:	40014400 	.word	0x40014400
 8006500:	40014800 	.word	0x40014800

08006504 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006504:	b480      	push	{r7}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	4313      	orrs	r3, r2
 8006540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006548:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	041b      	lsls	r3, r3, #16
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4313      	orrs	r3, r2
 8006554:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a17      	ldr	r2, [pc, #92]	; (80065b8 <TIM_OC5_SetConfig+0xb4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d00f      	beq.n	800657e <TIM_OC5_SetConfig+0x7a>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a16      	ldr	r2, [pc, #88]	; (80065bc <TIM_OC5_SetConfig+0xb8>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d00b      	beq.n	800657e <TIM_OC5_SetConfig+0x7a>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a15      	ldr	r2, [pc, #84]	; (80065c0 <TIM_OC5_SetConfig+0xbc>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d007      	beq.n	800657e <TIM_OC5_SetConfig+0x7a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a14      	ldr	r2, [pc, #80]	; (80065c4 <TIM_OC5_SetConfig+0xc0>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d003      	beq.n	800657e <TIM_OC5_SetConfig+0x7a>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a13      	ldr	r2, [pc, #76]	; (80065c8 <TIM_OC5_SetConfig+0xc4>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d109      	bne.n	8006592 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006584:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	021b      	lsls	r3, r3, #8
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	4313      	orrs	r3, r2
 8006590:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	621a      	str	r2, [r3, #32]
}
 80065ac:	bf00      	nop
 80065ae:	371c      	adds	r7, #28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	40012c00 	.word	0x40012c00
 80065bc:	40013400 	.word	0x40013400
 80065c0:	40014000 	.word	0x40014000
 80065c4:	40014400 	.word	0x40014400
 80065c8:	40014800 	.word	0x40014800

080065cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	021b      	lsls	r3, r3, #8
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	4313      	orrs	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	051b      	lsls	r3, r3, #20
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	4313      	orrs	r3, r2
 800661e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a18      	ldr	r2, [pc, #96]	; (8006684 <TIM_OC6_SetConfig+0xb8>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d00f      	beq.n	8006648 <TIM_OC6_SetConfig+0x7c>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a17      	ldr	r2, [pc, #92]	; (8006688 <TIM_OC6_SetConfig+0xbc>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d00b      	beq.n	8006648 <TIM_OC6_SetConfig+0x7c>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a16      	ldr	r2, [pc, #88]	; (800668c <TIM_OC6_SetConfig+0xc0>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d007      	beq.n	8006648 <TIM_OC6_SetConfig+0x7c>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a15      	ldr	r2, [pc, #84]	; (8006690 <TIM_OC6_SetConfig+0xc4>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d003      	beq.n	8006648 <TIM_OC6_SetConfig+0x7c>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a14      	ldr	r2, [pc, #80]	; (8006694 <TIM_OC6_SetConfig+0xc8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d109      	bne.n	800665c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800664e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	029b      	lsls	r3, r3, #10
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	4313      	orrs	r3, r2
 800665a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	621a      	str	r2, [r3, #32]
}
 8006676:	bf00      	nop
 8006678:	371c      	adds	r7, #28
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	40012c00 	.word	0x40012c00
 8006688:	40013400 	.word	0x40013400
 800668c:	40014000 	.word	0x40014000
 8006690:	40014400 	.word	0x40014400
 8006694:	40014800 	.word	0x40014800

08006698 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	f023 0201 	bic.w	r2, r3, #1
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f023 030a 	bic.w	r3, r3, #10
 80066d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	4313      	orrs	r3, r2
 80066dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	621a      	str	r2, [r3, #32]
}
 80066ea:	bf00      	nop
 80066ec:	371c      	adds	r7, #28
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b087      	sub	sp, #28
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	60f8      	str	r0, [r7, #12]
 80066fe:	60b9      	str	r1, [r7, #8]
 8006700:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	f023 0210 	bic.w	r2, r3, #16
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006720:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	031b      	lsls	r3, r3, #12
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	4313      	orrs	r3, r2
 800672a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006732:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	011b      	lsls	r3, r3, #4
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	4313      	orrs	r3, r2
 800673c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	621a      	str	r2, [r3, #32]
}
 800674a:	bf00      	nop
 800674c:	371c      	adds	r7, #28
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006756:	b480      	push	{r7}
 8006758:	b085      	sub	sp, #20
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
 800675e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4313      	orrs	r3, r2
 8006774:	f043 0307 	orr.w	r3, r3, #7
 8006778:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	609a      	str	r2, [r3, #8]
}
 8006780:	bf00      	nop
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800678c:	b480      	push	{r7}
 800678e:	b087      	sub	sp, #28
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
 8006798:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	021a      	lsls	r2, r3, #8
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	431a      	orrs	r2, r3
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	609a      	str	r2, [r3, #8]
}
 80067c0:	bf00      	nop
 80067c2:	371c      	adds	r7, #28
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b087      	sub	sp, #28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f003 031f 	and.w	r3, r3, #31
 80067de:	2201      	movs	r2, #1
 80067e0:	fa02 f303 	lsl.w	r3, r2, r3
 80067e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6a1a      	ldr	r2, [r3, #32]
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	43db      	mvns	r3, r3
 80067ee:	401a      	ands	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a1a      	ldr	r2, [r3, #32]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f003 031f 	and.w	r3, r3, #31
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	fa01 f303 	lsl.w	r3, r1, r3
 8006804:	431a      	orrs	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	621a      	str	r2, [r3, #32]
}
 800680a:	bf00      	nop
 800680c:	371c      	adds	r7, #28
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
	...

08006818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006828:	2b01      	cmp	r3, #1
 800682a:	d101      	bne.n	8006830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800682c:	2302      	movs	r3, #2
 800682e:	e045      	b.n	80068bc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a1c      	ldr	r2, [pc, #112]	; (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d004      	beq.n	8006864 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a1b      	ldr	r2, [pc, #108]	; (80068cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d108      	bne.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800686a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	4313      	orrs	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800688e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	4313      	orrs	r3, r2
 8006898:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	40012c00 	.word	0x40012c00
 80068cc:	40013400 	.word	0x40013400

080068d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e040      	b.n	8006964 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d106      	bne.n	80068f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7fb f928 	bl	8001b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2224      	movs	r2, #36	; 0x24
 80068fc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0201 	bic.w	r2, r2, #1
 800690c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f8fa 	bl	8006b08 <UART_SetConfig>
 8006914:	4603      	mov	r3, r0
 8006916:	2b01      	cmp	r3, #1
 8006918:	d101      	bne.n	800691e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e022      	b.n	8006964 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006922:	2b00      	cmp	r3, #0
 8006924:	d002      	beq.n	800692c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fc36 	bl	8007198 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685a      	ldr	r2, [r3, #4]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800693a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689a      	ldr	r2, [r3, #8]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800694a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f042 0201 	orr.w	r2, r2, #1
 800695a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fcbd 	bl	80072dc <UART_CheckIdleState>
 8006962:	4603      	mov	r3, r0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b08a      	sub	sp, #40	; 0x28
 8006970:	af02      	add	r7, sp, #8
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	603b      	str	r3, [r7, #0]
 8006978:	4613      	mov	r3, r2
 800697a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006980:	2b20      	cmp	r3, #32
 8006982:	f040 80bb 	bne.w	8006afc <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d002      	beq.n	8006992 <HAL_UART_Receive+0x26>
 800698c:	88fb      	ldrh	r3, [r7, #6]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e0b3      	b.n	8006afe <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800699c:	2b01      	cmp	r3, #1
 800699e:	d101      	bne.n	80069a4 <HAL_UART_Receive+0x38>
 80069a0:	2302      	movs	r3, #2
 80069a2:	e0ac      	b.n	8006afe <HAL_UART_Receive+0x192>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2222      	movs	r2, #34	; 0x22
 80069b6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80069b8:	f7fb f9f0 	bl	8001d9c <HAL_GetTick>
 80069bc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	88fa      	ldrh	r2, [r7, #6]
 80069c2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	88fa      	ldrh	r2, [r7, #6]
 80069ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d6:	d10e      	bne.n	80069f6 <HAL_UART_Receive+0x8a>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d105      	bne.n	80069ec <HAL_UART_Receive+0x80>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80069e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069ea:	e02d      	b.n	8006a48 <HAL_UART_Receive+0xdc>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	22ff      	movs	r2, #255	; 0xff
 80069f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069f4:	e028      	b.n	8006a48 <HAL_UART_Receive+0xdc>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10d      	bne.n	8006a1a <HAL_UART_Receive+0xae>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d104      	bne.n	8006a10 <HAL_UART_Receive+0xa4>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	22ff      	movs	r2, #255	; 0xff
 8006a0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a0e:	e01b      	b.n	8006a48 <HAL_UART_Receive+0xdc>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	227f      	movs	r2, #127	; 0x7f
 8006a14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a18:	e016      	b.n	8006a48 <HAL_UART_Receive+0xdc>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a22:	d10d      	bne.n	8006a40 <HAL_UART_Receive+0xd4>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d104      	bne.n	8006a36 <HAL_UART_Receive+0xca>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	227f      	movs	r2, #127	; 0x7f
 8006a30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a34:	e008      	b.n	8006a48 <HAL_UART_Receive+0xdc>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	223f      	movs	r2, #63	; 0x3f
 8006a3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a3e:	e003      	b.n	8006a48 <HAL_UART_Receive+0xdc>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a4e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a58:	d108      	bne.n	8006a6c <HAL_UART_Receive+0x100>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d104      	bne.n	8006a6c <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8006a62:	2300      	movs	r3, #0
 8006a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	61bb      	str	r3, [r7, #24]
 8006a6a:	e003      	b.n	8006a74 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a70:	2300      	movs	r3, #0
 8006a72:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006a74:	e033      	b.n	8006ade <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	2120      	movs	r1, #32
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 fc70 	bl	8007366 <UART_WaitOnFlagUntilTimeout>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e036      	b.n	8006afe <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10c      	bne.n	8006ab0 <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	8a7b      	ldrh	r3, [r7, #18]
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	3302      	adds	r3, #2
 8006aac:	61bb      	str	r3, [r7, #24]
 8006aae:	e00d      	b.n	8006acc <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	b2da      	uxtb	r2, r3
 8006aba:	8a7b      	ldrh	r3, [r7, #18]
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	4013      	ands	r3, r2
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1c5      	bne.n	8006a76 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2220      	movs	r2, #32
 8006aee:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	e000      	b.n	8006afe <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8006afc:	2302      	movs	r3, #2
  }
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3720      	adds	r7, #32
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
	...

08006b08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b08:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006b0c:	b088      	sub	sp, #32
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689a      	ldr	r2, [r3, #8]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	431a      	orrs	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	4bac      	ldr	r3, [pc, #688]	; (8006df0 <UART_SetConfig+0x2e8>)
 8006b3e:	4013      	ands	r3, r2
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	6812      	ldr	r2, [r2, #0]
 8006b44:	69f9      	ldr	r1, [r7, #28]
 8006b46:	430b      	orrs	r3, r1
 8006b48:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	68da      	ldr	r2, [r3, #12]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4aa2      	ldr	r2, [pc, #648]	; (8006df4 <UART_SetConfig+0x2ec>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d004      	beq.n	8006b7a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	69fa      	ldr	r2, [r7, #28]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	69fa      	ldr	r2, [r7, #28]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a99      	ldr	r2, [pc, #612]	; (8006df8 <UART_SetConfig+0x2f0>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d121      	bne.n	8006bdc <UART_SetConfig+0xd4>
 8006b98:	4b98      	ldr	r3, [pc, #608]	; (8006dfc <UART_SetConfig+0x2f4>)
 8006b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b9e:	f003 0303 	and.w	r3, r3, #3
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	d816      	bhi.n	8006bd4 <UART_SetConfig+0xcc>
 8006ba6:	a201      	add	r2, pc, #4	; (adr r2, 8006bac <UART_SetConfig+0xa4>)
 8006ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bac:	08006bbd 	.word	0x08006bbd
 8006bb0:	08006bc9 	.word	0x08006bc9
 8006bb4:	08006bc3 	.word	0x08006bc3
 8006bb8:	08006bcf 	.word	0x08006bcf
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	76fb      	strb	r3, [r7, #27]
 8006bc0:	e0e8      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	76fb      	strb	r3, [r7, #27]
 8006bc6:	e0e5      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006bc8:	2304      	movs	r3, #4
 8006bca:	76fb      	strb	r3, [r7, #27]
 8006bcc:	e0e2      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006bce:	2308      	movs	r3, #8
 8006bd0:	76fb      	strb	r3, [r7, #27]
 8006bd2:	e0df      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006bd4:	2310      	movs	r3, #16
 8006bd6:	76fb      	strb	r3, [r7, #27]
 8006bd8:	bf00      	nop
 8006bda:	e0db      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a87      	ldr	r2, [pc, #540]	; (8006e00 <UART_SetConfig+0x2f8>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d134      	bne.n	8006c50 <UART_SetConfig+0x148>
 8006be6:	4b85      	ldr	r3, [pc, #532]	; (8006dfc <UART_SetConfig+0x2f4>)
 8006be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bec:	f003 030c 	and.w	r3, r3, #12
 8006bf0:	2b0c      	cmp	r3, #12
 8006bf2:	d829      	bhi.n	8006c48 <UART_SetConfig+0x140>
 8006bf4:	a201      	add	r2, pc, #4	; (adr r2, 8006bfc <UART_SetConfig+0xf4>)
 8006bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfa:	bf00      	nop
 8006bfc:	08006c31 	.word	0x08006c31
 8006c00:	08006c49 	.word	0x08006c49
 8006c04:	08006c49 	.word	0x08006c49
 8006c08:	08006c49 	.word	0x08006c49
 8006c0c:	08006c3d 	.word	0x08006c3d
 8006c10:	08006c49 	.word	0x08006c49
 8006c14:	08006c49 	.word	0x08006c49
 8006c18:	08006c49 	.word	0x08006c49
 8006c1c:	08006c37 	.word	0x08006c37
 8006c20:	08006c49 	.word	0x08006c49
 8006c24:	08006c49 	.word	0x08006c49
 8006c28:	08006c49 	.word	0x08006c49
 8006c2c:	08006c43 	.word	0x08006c43
 8006c30:	2300      	movs	r3, #0
 8006c32:	76fb      	strb	r3, [r7, #27]
 8006c34:	e0ae      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006c36:	2302      	movs	r3, #2
 8006c38:	76fb      	strb	r3, [r7, #27]
 8006c3a:	e0ab      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006c3c:	2304      	movs	r3, #4
 8006c3e:	76fb      	strb	r3, [r7, #27]
 8006c40:	e0a8      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006c42:	2308      	movs	r3, #8
 8006c44:	76fb      	strb	r3, [r7, #27]
 8006c46:	e0a5      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006c48:	2310      	movs	r3, #16
 8006c4a:	76fb      	strb	r3, [r7, #27]
 8006c4c:	bf00      	nop
 8006c4e:	e0a1      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a6b      	ldr	r2, [pc, #428]	; (8006e04 <UART_SetConfig+0x2fc>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d120      	bne.n	8006c9c <UART_SetConfig+0x194>
 8006c5a:	4b68      	ldr	r3, [pc, #416]	; (8006dfc <UART_SetConfig+0x2f4>)
 8006c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c64:	2b10      	cmp	r3, #16
 8006c66:	d00f      	beq.n	8006c88 <UART_SetConfig+0x180>
 8006c68:	2b10      	cmp	r3, #16
 8006c6a:	d802      	bhi.n	8006c72 <UART_SetConfig+0x16a>
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d005      	beq.n	8006c7c <UART_SetConfig+0x174>
 8006c70:	e010      	b.n	8006c94 <UART_SetConfig+0x18c>
 8006c72:	2b20      	cmp	r3, #32
 8006c74:	d005      	beq.n	8006c82 <UART_SetConfig+0x17a>
 8006c76:	2b30      	cmp	r3, #48	; 0x30
 8006c78:	d009      	beq.n	8006c8e <UART_SetConfig+0x186>
 8006c7a:	e00b      	b.n	8006c94 <UART_SetConfig+0x18c>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	76fb      	strb	r3, [r7, #27]
 8006c80:	e088      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006c82:	2302      	movs	r3, #2
 8006c84:	76fb      	strb	r3, [r7, #27]
 8006c86:	e085      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006c88:	2304      	movs	r3, #4
 8006c8a:	76fb      	strb	r3, [r7, #27]
 8006c8c:	e082      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006c8e:	2308      	movs	r3, #8
 8006c90:	76fb      	strb	r3, [r7, #27]
 8006c92:	e07f      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006c94:	2310      	movs	r3, #16
 8006c96:	76fb      	strb	r3, [r7, #27]
 8006c98:	bf00      	nop
 8006c9a:	e07b      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a59      	ldr	r2, [pc, #356]	; (8006e08 <UART_SetConfig+0x300>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d120      	bne.n	8006ce8 <UART_SetConfig+0x1e0>
 8006ca6:	4b55      	ldr	r3, [pc, #340]	; (8006dfc <UART_SetConfig+0x2f4>)
 8006ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006cb0:	2b40      	cmp	r3, #64	; 0x40
 8006cb2:	d00f      	beq.n	8006cd4 <UART_SetConfig+0x1cc>
 8006cb4:	2b40      	cmp	r3, #64	; 0x40
 8006cb6:	d802      	bhi.n	8006cbe <UART_SetConfig+0x1b6>
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d005      	beq.n	8006cc8 <UART_SetConfig+0x1c0>
 8006cbc:	e010      	b.n	8006ce0 <UART_SetConfig+0x1d8>
 8006cbe:	2b80      	cmp	r3, #128	; 0x80
 8006cc0:	d005      	beq.n	8006cce <UART_SetConfig+0x1c6>
 8006cc2:	2bc0      	cmp	r3, #192	; 0xc0
 8006cc4:	d009      	beq.n	8006cda <UART_SetConfig+0x1d2>
 8006cc6:	e00b      	b.n	8006ce0 <UART_SetConfig+0x1d8>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	76fb      	strb	r3, [r7, #27]
 8006ccc:	e062      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	76fb      	strb	r3, [r7, #27]
 8006cd2:	e05f      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006cd4:	2304      	movs	r3, #4
 8006cd6:	76fb      	strb	r3, [r7, #27]
 8006cd8:	e05c      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006cda:	2308      	movs	r3, #8
 8006cdc:	76fb      	strb	r3, [r7, #27]
 8006cde:	e059      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006ce0:	2310      	movs	r3, #16
 8006ce2:	76fb      	strb	r3, [r7, #27]
 8006ce4:	bf00      	nop
 8006ce6:	e055      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a47      	ldr	r2, [pc, #284]	; (8006e0c <UART_SetConfig+0x304>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d124      	bne.n	8006d3c <UART_SetConfig+0x234>
 8006cf2:	4b42      	ldr	r3, [pc, #264]	; (8006dfc <UART_SetConfig+0x2f4>)
 8006cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d00:	d012      	beq.n	8006d28 <UART_SetConfig+0x220>
 8006d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d06:	d802      	bhi.n	8006d0e <UART_SetConfig+0x206>
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d007      	beq.n	8006d1c <UART_SetConfig+0x214>
 8006d0c:	e012      	b.n	8006d34 <UART_SetConfig+0x22c>
 8006d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d12:	d006      	beq.n	8006d22 <UART_SetConfig+0x21a>
 8006d14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d18:	d009      	beq.n	8006d2e <UART_SetConfig+0x226>
 8006d1a:	e00b      	b.n	8006d34 <UART_SetConfig+0x22c>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	76fb      	strb	r3, [r7, #27]
 8006d20:	e038      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006d22:	2302      	movs	r3, #2
 8006d24:	76fb      	strb	r3, [r7, #27]
 8006d26:	e035      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006d28:	2304      	movs	r3, #4
 8006d2a:	76fb      	strb	r3, [r7, #27]
 8006d2c:	e032      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006d2e:	2308      	movs	r3, #8
 8006d30:	76fb      	strb	r3, [r7, #27]
 8006d32:	e02f      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006d34:	2310      	movs	r3, #16
 8006d36:	76fb      	strb	r3, [r7, #27]
 8006d38:	bf00      	nop
 8006d3a:	e02b      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a2c      	ldr	r2, [pc, #176]	; (8006df4 <UART_SetConfig+0x2ec>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d124      	bne.n	8006d90 <UART_SetConfig+0x288>
 8006d46:	4b2d      	ldr	r3, [pc, #180]	; (8006dfc <UART_SetConfig+0x2f4>)
 8006d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d54:	d012      	beq.n	8006d7c <UART_SetConfig+0x274>
 8006d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d5a:	d802      	bhi.n	8006d62 <UART_SetConfig+0x25a>
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d007      	beq.n	8006d70 <UART_SetConfig+0x268>
 8006d60:	e012      	b.n	8006d88 <UART_SetConfig+0x280>
 8006d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d66:	d006      	beq.n	8006d76 <UART_SetConfig+0x26e>
 8006d68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d6c:	d009      	beq.n	8006d82 <UART_SetConfig+0x27a>
 8006d6e:	e00b      	b.n	8006d88 <UART_SetConfig+0x280>
 8006d70:	2300      	movs	r3, #0
 8006d72:	76fb      	strb	r3, [r7, #27]
 8006d74:	e00e      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006d76:	2302      	movs	r3, #2
 8006d78:	76fb      	strb	r3, [r7, #27]
 8006d7a:	e00b      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006d7c:	2304      	movs	r3, #4
 8006d7e:	76fb      	strb	r3, [r7, #27]
 8006d80:	e008      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006d82:	2308      	movs	r3, #8
 8006d84:	76fb      	strb	r3, [r7, #27]
 8006d86:	e005      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006d88:	2310      	movs	r3, #16
 8006d8a:	76fb      	strb	r3, [r7, #27]
 8006d8c:	bf00      	nop
 8006d8e:	e001      	b.n	8006d94 <UART_SetConfig+0x28c>
 8006d90:	2310      	movs	r3, #16
 8006d92:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a16      	ldr	r2, [pc, #88]	; (8006df4 <UART_SetConfig+0x2ec>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	f040 80fa 	bne.w	8006f94 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006da0:	7efb      	ldrb	r3, [r7, #27]
 8006da2:	2b08      	cmp	r3, #8
 8006da4:	d836      	bhi.n	8006e14 <UART_SetConfig+0x30c>
 8006da6:	a201      	add	r2, pc, #4	; (adr r2, 8006dac <UART_SetConfig+0x2a4>)
 8006da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dac:	08006dd1 	.word	0x08006dd1
 8006db0:	08006e15 	.word	0x08006e15
 8006db4:	08006dd9 	.word	0x08006dd9
 8006db8:	08006e15 	.word	0x08006e15
 8006dbc:	08006ddf 	.word	0x08006ddf
 8006dc0:	08006e15 	.word	0x08006e15
 8006dc4:	08006e15 	.word	0x08006e15
 8006dc8:	08006e15 	.word	0x08006e15
 8006dcc:	08006de7 	.word	0x08006de7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006dd0:	f7fd fabc 	bl	800434c <HAL_RCC_GetPCLK1Freq>
 8006dd4:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006dd6:	e020      	b.n	8006e1a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006dd8:	4b0d      	ldr	r3, [pc, #52]	; (8006e10 <UART_SetConfig+0x308>)
 8006dda:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006ddc:	e01d      	b.n	8006e1a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006dde:	f7fd fa1f 	bl	8004220 <HAL_RCC_GetSysClockFreq>
 8006de2:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006de4:	e019      	b.n	8006e1a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dea:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006dec:	e015      	b.n	8006e1a <UART_SetConfig+0x312>
 8006dee:	bf00      	nop
 8006df0:	efff69f3 	.word	0xefff69f3
 8006df4:	40008000 	.word	0x40008000
 8006df8:	40013800 	.word	0x40013800
 8006dfc:	40021000 	.word	0x40021000
 8006e00:	40004400 	.word	0x40004400
 8006e04:	40004800 	.word	0x40004800
 8006e08:	40004c00 	.word	0x40004c00
 8006e0c:	40005000 	.word	0x40005000
 8006e10:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	74fb      	strb	r3, [r7, #19]
        break;
 8006e18:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f000 81ac 	beq.w	800717a <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	4613      	mov	r3, r2
 8006e28:	005b      	lsls	r3, r3, #1
 8006e2a:	4413      	add	r3, r2
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d305      	bcc.n	8006e3e <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d902      	bls.n	8006e44 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	74fb      	strb	r3, [r7, #19]
 8006e42:	e19a      	b.n	800717a <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8006e44:	7efb      	ldrb	r3, [r7, #27]
 8006e46:	2b08      	cmp	r3, #8
 8006e48:	f200 8091 	bhi.w	8006f6e <UART_SetConfig+0x466>
 8006e4c:	a201      	add	r2, pc, #4	; (adr r2, 8006e54 <UART_SetConfig+0x34c>)
 8006e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e52:	bf00      	nop
 8006e54:	08006e79 	.word	0x08006e79
 8006e58:	08006f6f 	.word	0x08006f6f
 8006e5c:	08006ec5 	.word	0x08006ec5
 8006e60:	08006f6f 	.word	0x08006f6f
 8006e64:	08006ef9 	.word	0x08006ef9
 8006e68:	08006f6f 	.word	0x08006f6f
 8006e6c:	08006f6f 	.word	0x08006f6f
 8006e70:	08006f6f 	.word	0x08006f6f
 8006e74:	08006f45 	.word	0x08006f45
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006e78:	f7fd fa68 	bl	800434c <HAL_RCC_GetPCLK1Freq>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	4619      	mov	r1, r3
 8006e80:	f04f 0200 	mov.w	r2, #0
 8006e84:	f04f 0300 	mov.w	r3, #0
 8006e88:	f04f 0400 	mov.w	r4, #0
 8006e8c:	0214      	lsls	r4, r2, #8
 8006e8e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006e92:	020b      	lsls	r3, r1, #8
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	6852      	ldr	r2, [r2, #4]
 8006e98:	0852      	lsrs	r2, r2, #1
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	f04f 0200 	mov.w	r2, #0
 8006ea0:	eb13 0b01 	adds.w	fp, r3, r1
 8006ea4:	eb44 0c02 	adc.w	ip, r4, r2
 8006ea8:	4658      	mov	r0, fp
 8006eaa:	4661      	mov	r1, ip
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f04f 0400 	mov.w	r4, #0
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	4623      	mov	r3, r4
 8006eb8:	f7f9 fbea 	bl	8000690 <__aeabi_uldivmod>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	460c      	mov	r4, r1
 8006ec0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006ec2:	e057      	b.n	8006f74 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	085b      	lsrs	r3, r3, #1
 8006eca:	f04f 0400 	mov.w	r4, #0
 8006ece:	49b1      	ldr	r1, [pc, #708]	; (8007194 <UART_SetConfig+0x68c>)
 8006ed0:	f04f 0200 	mov.w	r2, #0
 8006ed4:	eb13 0b01 	adds.w	fp, r3, r1
 8006ed8:	eb44 0c02 	adc.w	ip, r4, r2
 8006edc:	4658      	mov	r0, fp
 8006ede:	4661      	mov	r1, ip
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f04f 0400 	mov.w	r4, #0
 8006ee8:	461a      	mov	r2, r3
 8006eea:	4623      	mov	r3, r4
 8006eec:	f7f9 fbd0 	bl	8000690 <__aeabi_uldivmod>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	460c      	mov	r4, r1
 8006ef4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006ef6:	e03d      	b.n	8006f74 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006ef8:	f7fd f992 	bl	8004220 <HAL_RCC_GetSysClockFreq>
 8006efc:	4603      	mov	r3, r0
 8006efe:	4619      	mov	r1, r3
 8006f00:	f04f 0200 	mov.w	r2, #0
 8006f04:	f04f 0300 	mov.w	r3, #0
 8006f08:	f04f 0400 	mov.w	r4, #0
 8006f0c:	0214      	lsls	r4, r2, #8
 8006f0e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006f12:	020b      	lsls	r3, r1, #8
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	6852      	ldr	r2, [r2, #4]
 8006f18:	0852      	lsrs	r2, r2, #1
 8006f1a:	4611      	mov	r1, r2
 8006f1c:	f04f 0200 	mov.w	r2, #0
 8006f20:	eb13 0b01 	adds.w	fp, r3, r1
 8006f24:	eb44 0c02 	adc.w	ip, r4, r2
 8006f28:	4658      	mov	r0, fp
 8006f2a:	4661      	mov	r1, ip
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f04f 0400 	mov.w	r4, #0
 8006f34:	461a      	mov	r2, r3
 8006f36:	4623      	mov	r3, r4
 8006f38:	f7f9 fbaa 	bl	8000690 <__aeabi_uldivmod>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	460c      	mov	r4, r1
 8006f40:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006f42:	e017      	b.n	8006f74 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	085b      	lsrs	r3, r3, #1
 8006f4a:	f04f 0400 	mov.w	r4, #0
 8006f4e:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8006f52:	f144 0100 	adc.w	r1, r4, #0
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f04f 0400 	mov.w	r4, #0
 8006f5e:	461a      	mov	r2, r3
 8006f60:	4623      	mov	r3, r4
 8006f62:	f7f9 fb95 	bl	8000690 <__aeabi_uldivmod>
 8006f66:	4603      	mov	r3, r0
 8006f68:	460c      	mov	r4, r1
 8006f6a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006f6c:	e002      	b.n	8006f74 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	74fb      	strb	r3, [r7, #19]
            break;
 8006f72:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f7a:	d308      	bcc.n	8006f8e <UART_SetConfig+0x486>
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f82:	d204      	bcs.n	8006f8e <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	60da      	str	r2, [r3, #12]
 8006f8c:	e0f5      	b.n	800717a <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	74fb      	strb	r3, [r7, #19]
 8006f92:	e0f2      	b.n	800717a <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f9c:	d17f      	bne.n	800709e <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8006f9e:	7efb      	ldrb	r3, [r7, #27]
 8006fa0:	2b08      	cmp	r3, #8
 8006fa2:	d85c      	bhi.n	800705e <UART_SetConfig+0x556>
 8006fa4:	a201      	add	r2, pc, #4	; (adr r2, 8006fac <UART_SetConfig+0x4a4>)
 8006fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006faa:	bf00      	nop
 8006fac:	08006fd1 	.word	0x08006fd1
 8006fb0:	08006fef 	.word	0x08006fef
 8006fb4:	0800700d 	.word	0x0800700d
 8006fb8:	0800705f 	.word	0x0800705f
 8006fbc:	08007029 	.word	0x08007029
 8006fc0:	0800705f 	.word	0x0800705f
 8006fc4:	0800705f 	.word	0x0800705f
 8006fc8:	0800705f 	.word	0x0800705f
 8006fcc:	08007047 	.word	0x08007047
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006fd0:	f7fd f9bc 	bl	800434c <HAL_RCC_GetPCLK1Freq>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	005a      	lsls	r2, r3, #1
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	085b      	lsrs	r3, r3, #1
 8006fde:	441a      	add	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006fec:	e03a      	b.n	8007064 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006fee:	f7fd f9c3 	bl	8004378 <HAL_RCC_GetPCLK2Freq>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	005a      	lsls	r2, r3, #1
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	085b      	lsrs	r3, r3, #1
 8006ffc:	441a      	add	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	fbb2 f3f3 	udiv	r3, r2, r3
 8007006:	b29b      	uxth	r3, r3
 8007008:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800700a:	e02b      	b.n	8007064 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	085b      	lsrs	r3, r3, #1
 8007012:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8007016:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	6852      	ldr	r2, [r2, #4]
 800701e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007022:	b29b      	uxth	r3, r3
 8007024:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007026:	e01d      	b.n	8007064 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007028:	f7fd f8fa 	bl	8004220 <HAL_RCC_GetSysClockFreq>
 800702c:	4603      	mov	r3, r0
 800702e:	005a      	lsls	r2, r3, #1
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	085b      	lsrs	r3, r3, #1
 8007036:	441a      	add	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007040:	b29b      	uxth	r3, r3
 8007042:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007044:	e00e      	b.n	8007064 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	085b      	lsrs	r3, r3, #1
 800704c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	fbb2 f3f3 	udiv	r3, r2, r3
 8007058:	b29b      	uxth	r3, r3
 800705a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800705c:	e002      	b.n	8007064 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	74fb      	strb	r3, [r7, #19]
        break;
 8007062:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	2b0f      	cmp	r3, #15
 8007068:	d916      	bls.n	8007098 <UART_SetConfig+0x590>
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007070:	d212      	bcs.n	8007098 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	b29b      	uxth	r3, r3
 8007076:	f023 030f 	bic.w	r3, r3, #15
 800707a:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	085b      	lsrs	r3, r3, #1
 8007080:	b29b      	uxth	r3, r3
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	b29a      	uxth	r2, r3
 8007088:	897b      	ldrh	r3, [r7, #10]
 800708a:	4313      	orrs	r3, r2
 800708c:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	897a      	ldrh	r2, [r7, #10]
 8007094:	60da      	str	r2, [r3, #12]
 8007096:	e070      	b.n	800717a <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	74fb      	strb	r3, [r7, #19]
 800709c:	e06d      	b.n	800717a <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 800709e:	7efb      	ldrb	r3, [r7, #27]
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d859      	bhi.n	8007158 <UART_SetConfig+0x650>
 80070a4:	a201      	add	r2, pc, #4	; (adr r2, 80070ac <UART_SetConfig+0x5a4>)
 80070a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070aa:	bf00      	nop
 80070ac:	080070d1 	.word	0x080070d1
 80070b0:	080070ed 	.word	0x080070ed
 80070b4:	08007109 	.word	0x08007109
 80070b8:	08007159 	.word	0x08007159
 80070bc:	08007125 	.word	0x08007125
 80070c0:	08007159 	.word	0x08007159
 80070c4:	08007159 	.word	0x08007159
 80070c8:	08007159 	.word	0x08007159
 80070cc:	08007141 	.word	0x08007141
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80070d0:	f7fd f93c 	bl	800434c <HAL_RCC_GetPCLK1Freq>
 80070d4:	4602      	mov	r2, r0
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	085b      	lsrs	r3, r3, #1
 80070dc:	441a      	add	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80070ea:	e038      	b.n	800715e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80070ec:	f7fd f944 	bl	8004378 <HAL_RCC_GetPCLK2Freq>
 80070f0:	4602      	mov	r2, r0
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	085b      	lsrs	r3, r3, #1
 80070f8:	441a      	add	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007102:	b29b      	uxth	r3, r3
 8007104:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007106:	e02a      	b.n	800715e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	085b      	lsrs	r3, r3, #1
 800710e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8007112:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	6852      	ldr	r2, [r2, #4]
 800711a:	fbb3 f3f2 	udiv	r3, r3, r2
 800711e:	b29b      	uxth	r3, r3
 8007120:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007122:	e01c      	b.n	800715e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007124:	f7fd f87c 	bl	8004220 <HAL_RCC_GetSysClockFreq>
 8007128:	4602      	mov	r2, r0
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	085b      	lsrs	r3, r3, #1
 8007130:	441a      	add	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	fbb2 f3f3 	udiv	r3, r2, r3
 800713a:	b29b      	uxth	r3, r3
 800713c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800713e:	e00e      	b.n	800715e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	085b      	lsrs	r3, r3, #1
 8007146:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007152:	b29b      	uxth	r3, r3
 8007154:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007156:	e002      	b.n	800715e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	74fb      	strb	r3, [r7, #19]
        break;
 800715c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2b0f      	cmp	r3, #15
 8007162:	d908      	bls.n	8007176 <UART_SetConfig+0x66e>
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800716a:	d204      	bcs.n	8007176 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	60da      	str	r2, [r3, #12]
 8007174:	e001      	b.n	800717a <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007186:	7cfb      	ldrb	r3, [r7, #19]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3720      	adds	r7, #32
 800718c:	46bd      	mov	sp, r7
 800718e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007192:	bf00      	nop
 8007194:	f4240000 	.word	0xf4240000

08007198 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00a      	beq.n	80071c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00a      	beq.n	80071e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e8:	f003 0304 	and.w	r3, r3, #4
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00a      	beq.n	8007206 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720a:	f003 0308 	and.w	r3, r3, #8
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00a      	beq.n	8007228 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	f003 0310 	and.w	r3, r3, #16
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00a      	beq.n	800724a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	430a      	orrs	r2, r1
 8007248:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724e:	f003 0320 	and.w	r3, r3, #32
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007274:	2b00      	cmp	r3, #0
 8007276:	d01a      	beq.n	80072ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007296:	d10a      	bne.n	80072ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00a      	beq.n	80072d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	605a      	str	r2, [r3, #4]
  }
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af02      	add	r7, sp, #8
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80072ea:	f7fa fd57 	bl	8001d9c <HAL_GetTick>
 80072ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0308 	and.w	r3, r3, #8
 80072fa:	2b08      	cmp	r3, #8
 80072fc:	d10e      	bne.n	800731c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f82a 	bl	8007366 <UART_WaitOnFlagUntilTimeout>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007318:	2303      	movs	r3, #3
 800731a:	e020      	b.n	800735e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0304 	and.w	r3, r3, #4
 8007326:	2b04      	cmp	r3, #4
 8007328:	d10e      	bne.n	8007348 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800732a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f814 	bl	8007366 <UART_WaitOnFlagUntilTimeout>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d001      	beq.n	8007348 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e00a      	b.n	800735e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2220      	movs	r2, #32
 800734c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2220      	movs	r2, #32
 8007352:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b084      	sub	sp, #16
 800736a:	af00      	add	r7, sp, #0
 800736c:	60f8      	str	r0, [r7, #12]
 800736e:	60b9      	str	r1, [r7, #8]
 8007370:	603b      	str	r3, [r7, #0]
 8007372:	4613      	mov	r3, r2
 8007374:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007376:	e02a      	b.n	80073ce <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737e:	d026      	beq.n	80073ce <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007380:	f7fa fd0c 	bl	8001d9c <HAL_GetTick>
 8007384:	4602      	mov	r2, r0
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	69ba      	ldr	r2, [r7, #24]
 800738c:	429a      	cmp	r2, r3
 800738e:	d302      	bcc.n	8007396 <UART_WaitOnFlagUntilTimeout+0x30>
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d11b      	bne.n	80073ce <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80073a4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689a      	ldr	r2, [r3, #8]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f022 0201 	bic.w	r2, r2, #1
 80073b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2220      	movs	r2, #32
 80073ba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2220      	movs	r2, #32
 80073c0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e00f      	b.n	80073ee <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	69da      	ldr	r2, [r3, #28]
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	4013      	ands	r3, r2
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	429a      	cmp	r2, r3
 80073dc:	bf0c      	ite	eq
 80073de:	2301      	moveq	r3, #1
 80073e0:	2300      	movne	r3, #0
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	461a      	mov	r2, r3
 80073e6:	79fb      	ldrb	r3, [r7, #7]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d0c5      	beq.n	8007378 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
	...

080073f8 <__libc_init_array>:
 80073f8:	b570      	push	{r4, r5, r6, lr}
 80073fa:	4e0d      	ldr	r6, [pc, #52]	; (8007430 <__libc_init_array+0x38>)
 80073fc:	4c0d      	ldr	r4, [pc, #52]	; (8007434 <__libc_init_array+0x3c>)
 80073fe:	1ba4      	subs	r4, r4, r6
 8007400:	10a4      	asrs	r4, r4, #2
 8007402:	2500      	movs	r5, #0
 8007404:	42a5      	cmp	r5, r4
 8007406:	d109      	bne.n	800741c <__libc_init_array+0x24>
 8007408:	4e0b      	ldr	r6, [pc, #44]	; (8007438 <__libc_init_array+0x40>)
 800740a:	4c0c      	ldr	r4, [pc, #48]	; (800743c <__libc_init_array+0x44>)
 800740c:	f000 f8a4 	bl	8007558 <_init>
 8007410:	1ba4      	subs	r4, r4, r6
 8007412:	10a4      	asrs	r4, r4, #2
 8007414:	2500      	movs	r5, #0
 8007416:	42a5      	cmp	r5, r4
 8007418:	d105      	bne.n	8007426 <__libc_init_array+0x2e>
 800741a:	bd70      	pop	{r4, r5, r6, pc}
 800741c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007420:	4798      	blx	r3
 8007422:	3501      	adds	r5, #1
 8007424:	e7ee      	b.n	8007404 <__libc_init_array+0xc>
 8007426:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800742a:	4798      	blx	r3
 800742c:	3501      	adds	r5, #1
 800742e:	e7f2      	b.n	8007416 <__libc_init_array+0x1e>
 8007430:	080075c0 	.word	0x080075c0
 8007434:	080075c0 	.word	0x080075c0
 8007438:	080075c0 	.word	0x080075c0
 800743c:	080075c4 	.word	0x080075c4

08007440 <memset>:
 8007440:	4402      	add	r2, r0
 8007442:	4603      	mov	r3, r0
 8007444:	4293      	cmp	r3, r2
 8007446:	d100      	bne.n	800744a <memset+0xa>
 8007448:	4770      	bx	lr
 800744a:	f803 1b01 	strb.w	r1, [r3], #1
 800744e:	e7f9      	b.n	8007444 <memset+0x4>

08007450 <floor>:
 8007450:	ec51 0b10 	vmov	r0, r1, d0
 8007454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007458:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800745c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007460:	2e13      	cmp	r6, #19
 8007462:	460c      	mov	r4, r1
 8007464:	ee10 5a10 	vmov	r5, s0
 8007468:	4680      	mov	r8, r0
 800746a:	dc34      	bgt.n	80074d6 <floor+0x86>
 800746c:	2e00      	cmp	r6, #0
 800746e:	da16      	bge.n	800749e <floor+0x4e>
 8007470:	a335      	add	r3, pc, #212	; (adr r3, 8007548 <floor+0xf8>)
 8007472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007476:	f7f8 fead 	bl	80001d4 <__adddf3>
 800747a:	2200      	movs	r2, #0
 800747c:	2300      	movs	r3, #0
 800747e:	f7f9 f8dd 	bl	800063c <__aeabi_dcmpgt>
 8007482:	b148      	cbz	r0, 8007498 <floor+0x48>
 8007484:	2c00      	cmp	r4, #0
 8007486:	da59      	bge.n	800753c <floor+0xec>
 8007488:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800748c:	4a30      	ldr	r2, [pc, #192]	; (8007550 <floor+0x100>)
 800748e:	432b      	orrs	r3, r5
 8007490:	2500      	movs	r5, #0
 8007492:	42ab      	cmp	r3, r5
 8007494:	bf18      	it	ne
 8007496:	4614      	movne	r4, r2
 8007498:	4621      	mov	r1, r4
 800749a:	4628      	mov	r0, r5
 800749c:	e025      	b.n	80074ea <floor+0x9a>
 800749e:	4f2d      	ldr	r7, [pc, #180]	; (8007554 <floor+0x104>)
 80074a0:	4137      	asrs	r7, r6
 80074a2:	ea01 0307 	and.w	r3, r1, r7
 80074a6:	4303      	orrs	r3, r0
 80074a8:	d01f      	beq.n	80074ea <floor+0x9a>
 80074aa:	a327      	add	r3, pc, #156	; (adr r3, 8007548 <floor+0xf8>)
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	f7f8 fe90 	bl	80001d4 <__adddf3>
 80074b4:	2200      	movs	r2, #0
 80074b6:	2300      	movs	r3, #0
 80074b8:	f7f9 f8c0 	bl	800063c <__aeabi_dcmpgt>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d0eb      	beq.n	8007498 <floor+0x48>
 80074c0:	2c00      	cmp	r4, #0
 80074c2:	bfbe      	ittt	lt
 80074c4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80074c8:	fa43 f606 	asrlt.w	r6, r3, r6
 80074cc:	19a4      	addlt	r4, r4, r6
 80074ce:	ea24 0407 	bic.w	r4, r4, r7
 80074d2:	2500      	movs	r5, #0
 80074d4:	e7e0      	b.n	8007498 <floor+0x48>
 80074d6:	2e33      	cmp	r6, #51	; 0x33
 80074d8:	dd0b      	ble.n	80074f2 <floor+0xa2>
 80074da:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80074de:	d104      	bne.n	80074ea <floor+0x9a>
 80074e0:	ee10 2a10 	vmov	r2, s0
 80074e4:	460b      	mov	r3, r1
 80074e6:	f7f8 fe75 	bl	80001d4 <__adddf3>
 80074ea:	ec41 0b10 	vmov	d0, r0, r1
 80074ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074f2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80074f6:	f04f 33ff 	mov.w	r3, #4294967295
 80074fa:	fa23 f707 	lsr.w	r7, r3, r7
 80074fe:	4207      	tst	r7, r0
 8007500:	d0f3      	beq.n	80074ea <floor+0x9a>
 8007502:	a311      	add	r3, pc, #68	; (adr r3, 8007548 <floor+0xf8>)
 8007504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007508:	f7f8 fe64 	bl	80001d4 <__adddf3>
 800750c:	2200      	movs	r2, #0
 800750e:	2300      	movs	r3, #0
 8007510:	f7f9 f894 	bl	800063c <__aeabi_dcmpgt>
 8007514:	2800      	cmp	r0, #0
 8007516:	d0bf      	beq.n	8007498 <floor+0x48>
 8007518:	2c00      	cmp	r4, #0
 800751a:	da02      	bge.n	8007522 <floor+0xd2>
 800751c:	2e14      	cmp	r6, #20
 800751e:	d103      	bne.n	8007528 <floor+0xd8>
 8007520:	3401      	adds	r4, #1
 8007522:	ea25 0507 	bic.w	r5, r5, r7
 8007526:	e7b7      	b.n	8007498 <floor+0x48>
 8007528:	2301      	movs	r3, #1
 800752a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800752e:	fa03 f606 	lsl.w	r6, r3, r6
 8007532:	4435      	add	r5, r6
 8007534:	4545      	cmp	r5, r8
 8007536:	bf38      	it	cc
 8007538:	18e4      	addcc	r4, r4, r3
 800753a:	e7f2      	b.n	8007522 <floor+0xd2>
 800753c:	2500      	movs	r5, #0
 800753e:	462c      	mov	r4, r5
 8007540:	e7aa      	b.n	8007498 <floor+0x48>
 8007542:	bf00      	nop
 8007544:	f3af 8000 	nop.w
 8007548:	8800759c 	.word	0x8800759c
 800754c:	7e37e43c 	.word	0x7e37e43c
 8007550:	bff00000 	.word	0xbff00000
 8007554:	000fffff 	.word	0x000fffff

08007558 <_init>:
 8007558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755a:	bf00      	nop
 800755c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800755e:	bc08      	pop	{r3}
 8007560:	469e      	mov	lr, r3
 8007562:	4770      	bx	lr

08007564 <_fini>:
 8007564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007566:	bf00      	nop
 8007568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800756a:	bc08      	pop	{r3}
 800756c:	469e      	mov	lr, r3
 800756e:	4770      	bx	lr
